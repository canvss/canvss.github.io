<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python爬虫--无头浏览器</title>
      <link href="/2022/04/27/Python%E7%88%AC%E8%99%AB-selenium/"/>
      <url>/2022/04/27/Python%E7%88%AC%E8%99%AB-selenium/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><ul><li>Selenium是一个用于Web应用程序测试的工具</li><li>Selenium测试直接运行在浏览器中，模拟用户真实操作浏览器</li><li>支持各种driver（FirfoxDriver,IternetExplorerDriver,ChromeDriver等）驱动</li><li>selenium支持无界面浏览器操作</li></ul><h2 id="为什么使用selenium？"><a href="#为什么使用selenium？" class="headerlink" title="为什么使用selenium？"></a>为什么使用selenium？</h2><p><strong>模拟浏览器功能，自动执行网页中的js代码，实现动态加载</strong></p><h2 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h2><ul><li>ChromeDriver（<a href="http://chromedriver.storage.googleapis.com/index.html%EF%BC%89">http://chromedriver.storage.googleapis.com/index.html）</a></li><li>pip install selenium</li></ul><h2 id="selenium使用步骤"><a href="#selenium使用步骤" class="headerlink" title="selenium使用步骤"></a>selenium使用步骤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;chromedriver.exe&#x27;</span></span><br><span class="line">browser = webdriver.Chrome(path)</span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过id定位元素</span></span><br><span class="line">button = browser.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(button)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过name定位元素</span></span><br><span class="line">name = browser.find_elements_by_name(<span class="string">&quot;wd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过xpath语发定位元素</span></span><br><span class="line">img_xpath =  browser.find_elements_by_xpath(<span class="string">&quot;//div[@id=&#x27;wrapper&#x27;]//input&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_xpath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过标签名定位元素</span></span><br><span class="line">tag_name = browser.find_elements_by_tag_name(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tag_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过css属性定位元素</span></span><br><span class="line">css_selector = browser.find_elements_by_css_selector(<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(css_selector)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过超链接文本定位</span></span><br><span class="line">link_text = browser.find_element_by_link_text(<span class="string">&#x27;贴吧&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(link_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素文本</span></span><br><span class="line"><span class="built_in">print</span>(link_text.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素属性</span></span><br><span class="line"><span class="built_in">print</span>(link_text.get_attribute(<span class="string">&#x27;class&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签名</span></span><br><span class="line"><span class="built_in">print</span>(link_text.tag_name)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h2 id="Phantomjs"><a href="#Phantomjs" class="headerlink" title="Phantomjs"></a>Phantomjs</h2><ul><li>无界面浏览器</li><li>支持页面元素查找，js代码运行</li><li>由于不进行css和gui渲染，运行效率高</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.PhantomJS(<span class="string">&#x27;phantomjs.exe&#x27;</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存屏幕快照</span></span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;baidu.png&#x27;</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;刘德华&#x27;</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;刘德华.png&#x27;</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h2 id="Chrome-handless"><a href="#Chrome-handless" class="headerlink" title="Chrome handless"></a>Chrome handless</h2><ul><li>chrome-headless模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐disable‐gpu&#x27;</span>)</span><br><span class="line">    path = <span class="string">r&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot;</span></span><br><span class="line">    chrome_options.binary_location = path</span><br><span class="line">    <span class="keyword">return</span> webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line">browser = share_browser()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> crawler </tag>
            
            <tag> robots.txt </tag>
            
            <tag> cookie </tag>
            
            <tag> Urllib </tag>
            
            <tag> selenium </tag>
            
            <tag> Phantomjs </tag>
            
            <tag> Chrome handless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫--数据解析</title>
      <link href="/2022/04/27/Python%E7%88%AC%E8%99%AB-%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/04/27/Python%E7%88%AC%E8%99%AB-%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><p><strong>解析数据，其用途就是在爬虫过程中将服务器返回的HTML源代码转换为我们能读懂的格式。</strong></p><ul><li>xpath</li><li>jsonpath</li><li>bs4</li></ul><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><ul><li>xpath插件安装（ctrl+shift+x）</li><li>安装lxml库（pip install lxml）</li><li>懒加载</li></ul><h3 id="xpath使用"><a href="#xpath使用" class="headerlink" title="xpath使用"></a>xpath使用</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># etree.parse()读取本地HTMl</span></span><br><span class="line">tree = etree.parse(<span class="string">&#x27;07-xpath_test.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;body/ul/li/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签id为l1的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签有id属性的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[@id]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签有class属性的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[@class]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签有id和有class属性的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[@id and @class]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签的id以l开头的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[starts-with(@id,&quot;l&quot;)]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签的id包含l的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[contains(@class,&quot;c&quot;)]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签id为l1的class属性值</span></span><br><span class="line">attribute = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/@class&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="抓取站长素材前10页图片"><a href="#抓取站长素材前10页图片" class="headerlink" title="抓取站长素材前10页图片"></a>抓取站长素材前10页图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    url = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> page == <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/jinmaoquantupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/jinmaoquantupian_&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span>, <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;tn=baidu&amp;wd=ip%E6%9F%A5%E8%AF%A2&amp;oq=ip%25E6%259F%25A5%25E8%25AF%25A2&amp;rsv_pq=93fa920200008ca9&amp;rsv_t=e38bd2devLnU2pnYyuiCFdtzwh3I3gTa0RM85dJNYYIowWwE%2BMJwdn%2FecFA&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_btype=t&amp;inputT=5&amp;rsv_sug3=9&amp;rsv_sug1=3&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_sug4=721&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    <span class="keyword">return</span> response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">content</span>):</span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    img_url = tree.xpath(<span class="string">&#x27;//div[@id=&quot;container&quot;]//a/img/@src2&#x27;</span>)</span><br><span class="line">    name = tree.xpath(<span class="string">&#x27;//div[@id=&quot;container&quot;]//a/img/@alt&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_url)):</span><br><span class="line">        url = <span class="string">&#x27;https:&#x27;</span>+img_url[i]</span><br><span class="line">        filename = <span class="string">&#x27;./download_pricture/&#x27;</span>+name[i]+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        urllib.request.urlretrieve(filename=filename,url=url)</span><br></pre></td></tr></table></figure><h2 id="JsonPath"><a href="#JsonPath" class="headerlink" title="JsonPath"></a>JsonPath</h2><ul><li>pip install jsonpath</li></ul><h3 id="JsonPath使用"><a href="#JsonPath使用" class="headerlink" title="JsonPath使用"></a>JsonPath使用</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json,jsonpath</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> = json.load(<span class="built_in">open</span>(<span class="string">&#x27;08-crawler_jsonpath.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有书的作者</span></span><br><span class="line">author_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$.store.book[*].author&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(author_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的作者</span></span><br><span class="line">author_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..author&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(author_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># store下面的所有元素</span></span><br><span class="line">tag_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$.store.*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tag_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># store里面所有东西的price</span></span><br><span class="line">price = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$.store..price&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(price)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三本书</span></span><br><span class="line">book = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[2]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一本书</span></span><br><span class="line">book = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[(@.length-1)]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前面两本书</span></span><br><span class="line">book_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[:2]&#x27;</span>)</span><br><span class="line">book_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[0,1]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤出所有包含isbn的书</span></span><br><span class="line">book_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[?(@.isbn)]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哪本书价格超过了10快</span></span><br><span class="line">book_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[?(@.price&gt;10)]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book_list)</span><br></pre></td></tr></table></figure><h3 id="淘票票城市数据"><a href="#淘票票城市数据" class="headerlink" title="淘票票城市数据"></a>淘票票城市数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,json,jsonpath</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://dianying.taobao.com/cityAction.json?activityId&amp;_ksTS=1632662735620_134&amp;jsoncallback=jsonp135&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;cna=foyqGW1EDTICAWXMQt+mnIzQ; t=d8799591d39e8a91536ef1af53e94680; lgc=%5Cu738B%5Cu5FD7%5Cu5F3A18228660970; tracknic738B%5Cu5FD7%5Cu5F3A18228660970; hng=CN%7Czh-CN%7CCNY%7C156; thw=cn; enc=xaQAAf1k3RE0T6wwZbGLyV2Gnja1k0Qb1sUIKvldK8cqhNB0yJdteQDn5wniaVkO%2BkLgHMdFymW9XvMw4QJgvQ%3D%3D; uc3=nk2=rpB9i5t4xCwUCLbHex6iP5Y%UGrdCbqdCCNpQ%3D%3D&amp;lg2=W5iHLLyFOGW7aA%3D%3D&amp;vt3=F8dCujC5mqqlWnWtiF8%3D; uc4=nk4=0%40rMpFul3%2BHjvKbCkx325MJ6j9eKMThOpH7W4geA%3D%3D&amp;id4=0%40U2OcRLKI%2FEgm9OyPQArEW1A%2BZQRT; _cc_=WqG3DMC9EA%3D%3D; xlly_s=1; cookie2=1bf16dc72f369feffb4b59fd887; v=0; _tb_token_=56d8f63eb53e9; mt=ci=-1_0; tb_city=513200; tb_cityName=&quot;sKKw0w==&quot;; uc1=cookie14=Uoe3dYeFqc%2FGog%3D%3D; tfstk=c11dBvG4Slq31D8Ou9egPdCe0dfRZGhH4z-SwPINyFcKVMlRiS5cM1ltUUmp6PC..; l=eBrCbbwugrzv13B8BO5CFurza779mQAb4sPzaNbMiInca69h1F11FNCLH0F2RdtjgtCAaetrd8LeqRLHR3AgCc0c07kqm0RxexvO.; isg=BFVVhJkpmMQ3ebzFQpH_cJvAZFEPUglks08wbNf4EkwbLnUgn6LDNDLg-DKYLiEc&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://dianying.taobao.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;93&quot;, &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;93&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;x-requested-with&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    <span class="keyword">return</span> response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup（bs4）"><a href="#BeautifulSoup（bs4）" class="headerlink" title="BeautifulSoup（bs4）"></a>BeautifulSoup（bs4）</h2><ul><li>pip install bs4</li></ul><h3 id="bs4使用"><a href="#bs4使用" class="headerlink" title="bs4使用"></a>bs4使用</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过bs4解析本地文件,默认读取文件方式为gbk,所以需要指定utf-8编码</span></span><br><span class="line">soup = BeautifulSoup(<span class="built_in">open</span>(<span class="string">&#x27;09-crawler_bs4.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>),<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签名查找到第一个符合条件的数据</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签的属性和属性值</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.attrs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bs4的一些函数</span></span><br><span class="line"><span class="comment"># (1) find</span></span><br><span class="line"><span class="comment"># 返回的是第一个符合条件的数据</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据title的值来找到对应的标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&#x27;a&#x27;</span>,title=<span class="string">&#x27;a2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据class属性值来找到对应的标签,class语法已经纯在所以需要添加_</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&#x27;p&#x27;</span>,class_=<span class="string">&#x27;p1&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (2)find_all 返回所有匹配的标签list</span></span><br><span class="line"><span class="built_in">print</span>(soup.findAll(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找多个标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.findAll([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;span&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># limit的作用是查找的前几个数据</span></span><br><span class="line"><span class="built_in">print</span>(soup.findAll(<span class="string">&#x27;li&#x27;</span>,limit=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (3) select</span></span><br><span class="line"><span class="comment"># select查询返回一个list</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过类选择器</span></span><br><span class="line"><span class="comment"># 查找class属性为a1的标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.a1&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#l2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性选择器</span></span><br><span class="line"><span class="comment"># 查找li标签中id=l2的标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li[id=&quot;l2&quot;]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找li标签中有id的标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li[id]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 层级选择器</span></span><br><span class="line"><span class="comment"># 后代选择器</span></span><br><span class="line"><span class="comment"># 找到div下面的li</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;div li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子代选择器:某标签的第一级标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;div &gt; ul &gt; span&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到a标签和li标签的所有对象</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a,li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点信息</span></span><br><span class="line">tag_l1 = soup.select(<span class="string">&#x27;#l1&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(tag_l1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签内容</span></span><br><span class="line"><span class="built_in">print</span>(tag_l1.get_text())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签对象中，存在标签那么string就获取不到数据，使用get_text()就能获取数据</span></span><br><span class="line"><span class="built_in">print</span>(tag_l1.string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点属性</span></span><br><span class="line">tag_obj = soup.select(<span class="string">&#x27;#p1&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(tag_obj.name)</span><br><span class="line"><span class="built_in">print</span>(tag_obj.attrs)soup = BeautifulSoup(response.read().decode(),<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="爬去星巴克菜单图片数据"><a href="#爬去星巴克菜单图片数据" class="headerlink" title="爬去星巴克菜单图片数据"></a>爬去星巴克菜单图片数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">menu_name_list,picture_url_list</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(menu_name_list)):</span><br><span class="line">        file_name = <span class="string">&#x27;./starbucks_menu_picture/&#x27;</span>+menu_name_list[i].get_text()+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        picture_url = <span class="string">&#x27;https://www.starbucks.com.cn&#x27;</span>+menu_picture_list[i].get(<span class="string">&#x27;style&#x27;</span>).split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            urllib.request.urlretrieve(picture_url,file_name)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            name = menu_name_list[i].get_text().replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            file_name = <span class="string">&#x27;./starbucks_menu_picture/&#x27;</span>+name+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            urllib.request.urlretrieve(picture_url, file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://www.starbucks.com.cn/menu/&#x27;</span></span><br><span class="line">    response = urllib.request.urlopen(url=url)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    menu_name_list = soup.select(<span class="string">&#x27;ul[class=&quot;grid padded-3 product&quot;] strong&#x27;</span>)</span><br><span class="line">    menu_picture_list = soup.select(<span class="string">&#x27;div[class=&quot;preview circle&quot;]&#x27;</span>)</span><br><span class="line">    down_load(menu_name_list,menu_picture_list)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> crawler </tag>
            
            <tag> robots.txt </tag>
            
            <tag> cookie </tag>
            
            <tag> Urllib </tag>
            
            <tag> xpath </tag>
            
            <tag> jsonpath </tag>
            
            <tag> bs4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫--Urllib</title>
      <link href="/2022/04/27/Python%E7%88%AC%E8%99%AB-Urllib/"/>
      <url>/2022/04/27/Python%E7%88%AC%E8%99%AB-Urllib/</url>
      
        <content type="html"><![CDATA[<h1 id="Urllib"><a href="#Urllib" class="headerlink" title="Urllib"></a>Urllib</h1><p><strong>Python urllib 库用于操作网页 URL，并对网页的内容进行抓取处理。</strong></p><h2 id="urllib库使用"><a href="#urllib库使用" class="headerlink" title="urllib库使用"></a>urllib库使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、定义url</span></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment"># 2、通过代码模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"><span class="comment"># 3、读取数据，一个字节一个字节的读取  read()方法返回的是字节形式的二进制，需要转换成utf-8</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="请求对象定制"><a href="#请求对象定制" class="headerlink" title="请求对象定制"></a>请求对象定制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><ul><li><h4 id="urllib-parse-quote"><a href="#urllib-parse-quote" class="headerlink" title="urllib.parse.quote()"></a>urllib.parse.quote()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request_parameters =<span class="string">&#x27;张学友&#x27;</span></span><br><span class="line">new_url = url+urllib.parse.quote(request_parameters)</span><br><span class="line">request = urllib.request.Request(url=new_url,headers=headers)</span><br><span class="line">response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><h4 id="urllib-parse-urlencode"><a href="#urllib-parse-urlencode" class="headerlink" title="urllib.parse.urlencode()"></a>urllib.parse.urlencode()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_webpage</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>:<span class="string">&#x27;中国香港&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 通过urlencode将参数进行unicode转码拼接</span></span><br><span class="line">    new_url = url + urllib.parse.urlencode(data)</span><br><span class="line">    <span class="comment"># 请求对象的定制</span></span><br><span class="line">    request = urllib.request.Request(url=new_url,headers=headers)</span><br><span class="line">    response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">    <span class="keyword">if</span> response.getcode() == <span class="number">200</span>:</span><br><span class="line">        content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;baidu.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Crawl failed ！&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,urllib.parse,ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ajax_doubantop20</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=24&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">    response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;doubantop20.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br></pre></td></tr></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,urllib.parse,ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">pageIndex</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: pageIndex,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    new_data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(url=url,data=new_data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">    <span class="keyword">return</span> response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;kfc_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br></pre></td></tr></table></figure><h2 id="URLError-HTTPError"><a href="#URLError-HTTPError" class="headerlink" title="URLError HTTPError"></a>URLError HTTPError</h2><ul><li>HTTPError类是URLError类的子类</li><li>导入urllib.error.HTTPError urllib.error.URLError</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,ssl,urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cnsd_article</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://blosdas.csdn.net/sugar_no1/article/details/883179501&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = get_cnsd_article()</span><br><span class="line">        content =response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;HTTPError!!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;please check up url !&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Cookie登录"><a href="#Cookie登录" class="headerlink" title="Cookie登录"></a>Cookie登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.gulixueyuan.com/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;UM_distinctid=17937a016be2721-113a6054-13c680-17937a01675fdc; CNZZDATA1264603569=531034137-1620133818-null%7C1631791587; online-uuid=DCDFF27A-C9-82FB28A78807; PHPSESSID=ftss7rtoujh5fevl4ccg8kpf57; REMEMBERME=Qml6XFVzZXJcQ3VycmVudFVzZXI6ZFhObGNsOW5ZVzlyT1RFeE1HUkFaV1IxYzI5b2J5NXVaWFE9OjE2NjMzMzY4MzY6MDIyNjNTzRmZTQ1ZDdkY2MyYWJlZmI3OTE5OGZlZGU5MA%3D%3D&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.gulixueyuan.com/login&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> urllib.request.urlopen(request,context=ssl.SSLContext()).read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;sgg.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br></pre></td></tr></table></figure><h2 id="Handler处理器"><a href="#Handler处理器" class="headerlink" title="Handler处理器"></a>Handler处理器</h2><h3 id="为什么要学习handler？"><a href="#为什么要学习handler？" class="headerlink" title="为什么要学习handler？"></a>为什么要学习handler？</h3><ul><li>urllib.request.urlopen(url) 不能定制请求头</li><li>urllib.request.Request(url,headers,data)</li><li>Handler 可以定制更高级的请求头</li></ul><h3 id="代理服务器（代理池）"><a href="#代理服务器（代理池）" class="headerlink" title="代理服务器（代理池）"></a>代理服务器（代理池）</h3><h4 id="代理的日常功能"><a href="#代理的日常功能" class="headerlink" title="代理的日常功能"></a>代理的日常功能</h4><ul><li>突破自身ip限制访问</li><li>访问一些单位或团体内部资源</li><li>提高访问速度</li><li>隐藏真实ip</li></ul><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><ul><li>创建Request对象</li><li>创建ProxyHandler对象</li><li>handler对象创建opener对象</li><li>opener.open发起请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl,urllib.request,random</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>:<span class="string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;tn=baidu&amp;wd=ip%E6%9F%A5%E8%AF%A2&amp;oq=ip%25E6%259F%25A5%25E8%25AF%25A2&amp;rsv_pq=93fa920200008ca9&amp;rsv_t=e38bd2devLnU2pnYyuiCFdtzwh3I3gTa0RM85dJNYYIowWwE%2BMJwdn%2FecFA&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_btype=t&amp;inputT=5&amp;rsv_sug3=9&amp;rsv_sug1=3&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_sug4=721&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">proxies_pool = [</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;58.243.29.180:4570&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;27.44.215.155:4513&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;58.243.29.58:4554&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;58.243.29.148:4570&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=random.choice(proxies_pool))</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ip_proxypool.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content)</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> crawler </tag>
            
            <tag> 反爬 </tag>
            
            <tag> robots.txt </tag>
            
            <tag> cookie </tag>
            
            <tag> Urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫--反爬</title>
      <link href="/2022/04/27/Python%E7%88%AC%E8%99%AB-%E5%8F%8D%E7%88%AC/"/>
      <url>/2022/04/27/Python%E7%88%AC%E8%99%AB-%E5%8F%8D%E7%88%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="常见反爬手段"><a href="#常见反爬手段" class="headerlink" title="常见反爬手段"></a>常见反爬手段</h1><h2 id="反爬的原因"><a href="#反爬的原因" class="headerlink" title="反爬的原因"></a>反爬的原因</h2><ul><li>爬虫占总PV（PV是指页面的访问次数，没打开或刷新一次页面，就算一个PV）比较高，浪费资源。</li><li>公司免费查询资源被批量爬取，丧失竞争力。</li><li>法律的灰色地带，状告爬虫成功机率小。</li><li>成型的商业对手</li></ul><h2 id="爬虫领域的概念"><a href="#爬虫领域的概念" class="headerlink" title="爬虫领域的概念"></a>爬虫领域的概念</h2><ul><li>爬虫：使用任何技术手段，批量获取网站信息的一种方式。</li><li>反爬虫：使用任何技术手段，阻止别人批量获取自己网站信息的一种方式。</li><li>误伤：在反爬虫的过程中，错误的将普通用户识别为爬虫。误伤率高的反爬虫策略，效果再好也不能用。</li><li>拦截：成功地阻止爬虫访问。这里会有拦截率的概念。通常来说，拦截率越高的反爬虫策略，误伤的可能性就越高，因此需要做个权衡。</li><li>资源：机器成本与人力成本的总和</li></ul><h2 id="反爬虫的三个方向"><a href="#反爬虫的三个方向" class="headerlink" title="反爬虫的三个方向"></a>反爬虫的三个方向</h2><ul><li>基于身份识别进行反爬</li><li>基于爬虫行为进行反爬</li><li>基于数据加密进行反爬</li></ul><h3 id="常见基于身份识别进行反爬"><a href="#常见基于身份识别进行反爬" class="headerlink" title="常见基于身份识别进行反爬"></a>常见基于身份识别进行反爬</h3><p>请求参数的获取方法有很多，向服务器发送请求，很多时候需要携带请求参数，通常服务器端可以通过检查请求参数是否正确来判断是否为爬虫</p><h4 id="通过headers中User-Agent字段反爬"><a href="#通过headers中User-Agent字段反爬" class="headerlink" title="通过headers中User-Agent字段反爬"></a>通过headers中User-Agent字段反爬</h4><ul><li>反爬原理：爬虫默认情况下没有User-Agent，而是使用模块默认设置 </li><li>解决办法：请求之前添加User-Agent</li></ul><h4 id="通过referer字段或其他字段发爬"><a href="#通过referer字段或其他字段发爬" class="headerlink" title="通过referer字段或其他字段发爬"></a>通过referer字段或其他字段发爬</h4><ul><li>反爬原理：爬虫默认情况不会带上referer字段，服务器端通过判断请求发起源头，判断请求是否合法 </li><li>解决办法：添加referer字段</li></ul><h4 id="通过cookie反爬"><a href="#通过cookie反爬" class="headerlink" title="通过cookie反爬"></a>通过cookie反爬</h4><ul><li>反爬原理：通过检查cookies来查看发起请求的用户是否具备响应权限，以此进行反爬</li><li>解决办法：进行模拟登录，成功获取cookies之后再进行数据爬取</li></ul><h4 id="通过html静态文件中获取请求数据"><a href="#通过html静态文件中获取请求数据" class="headerlink" title="通过html静态文件中获取请求数据"></a>通过html静态文件中获取请求数据</h4><ul><li>反爬原理：通过增加获取请求参数的难度进行反爬 </li><li>解决办法：仔细分析抓包得到的每一个包，搞清楚请求之间的联系</li></ul><h4 id="通过发送请求获取请求数据"><a href="#通过发送请求获取请求数据" class="headerlink" title="通过发送请求获取请求数据"></a>通过发送请求获取请求数据</h4><ul><li>反爬原理：通过增加获取请求参数的难度进行反爬</li><li>解决办法：仔细分析抓包得到的每一个包，搞清楚请求之间的联系，搞清楚请求参数的来源</li></ul><h4 id="通过js生成请求参数"><a href="#通过js生成请求参数" class="headerlink" title="通过js生成请求参数"></a>通过js生成请求参数</h4><ul><li>反爬原理：js生成了请求参数</li><li>解决办法：分析js、观察加密的实现过程，通过js2py获取js的执行结果，或者是selenium来实现</li></ul><h4 id="通过验证码来反爬"><a href="#通过验证码来反爬" class="headerlink" title="通过验证码来反爬"></a>通过验证码来反爬</h4><ul><li>反爬原理：对方服务器通过弹出验证码强制验证用户浏览行为</li><li>解决办法：打码平台或者机器学习的方法识别验证码</li></ul><h3 id="常见基于爬虫行为进行反爬"><a href="#常见基于爬虫行为进行反爬" class="headerlink" title="常见基于爬虫行为进行反爬"></a>常见基于爬虫行为进行反爬</h3><p>爬虫的行为与普通用户有着明显的区别，爬虫的请求频率与请求次数要远高于普通用户</p><h4 id="通过请求IP-x2F-账号单位时间内总请求数量进行反爬"><a href="#通过请求IP-x2F-账号单位时间内总请求数量进行反爬" class="headerlink" title="通过请求IP&#x2F;账号单位时间内总请求数量进行反爬"></a>通过请求IP&#x2F;账号单位时间内总请求数量进行反爬</h4><ul><li>反爬原理：正常浏览器请求网站，速度不会太快，同一个IP&#x2F;账号大量请求了对方服务器，有更大的可能性会被识别为爬虫</li><li>解决办法：对应的通过购买高质量的IP的方式能够解决问题&#x2F;购买多个账号</li></ul><h4 id="通过同一IP-x2F-账号请求之间的时间间隔进行反爬"><a href="#通过同一IP-x2F-账号请求之间的时间间隔进行反爬" class="headerlink" title="通过同一IP&#x2F;账号请求之间的时间间隔进行反爬"></a>通过同一IP&#x2F;账号请求之间的时间间隔进行反爬</h4><ul><li>反爬原理：正常人操作浏览器浏览网站，请求之间的时间间隔是随机，而爬虫前后两个请求之间时间间隔通常比较固定，同时时间间隔较短，因此可以用来做反爬</li><li>解决办法：请求之间进行随机等待，模拟真实用户操作，在添加时间间隔后，为了能够高速获取数据，尽量使用代理池，如果是账号，则将账号请求之间设置随机休眠</li></ul><h4 id="通过对请求IP-x2F-账号每天请求次数设置阈值进行反爬"><a href="#通过对请求IP-x2F-账号每天请求次数设置阈值进行反爬" class="headerlink" title="通过对请求IP&#x2F;账号每天请求次数设置阈值进行反爬"></a>通过对请求IP&#x2F;账号每天请求次数设置阈值进行反爬</h4><ul><li>反爬原理：正常的浏览行为，其一天的请求次数是有限的，通常超过某一个值，服务器就会拒绝响应</li><li>解决办法：对应的通过购买高质量的IP的方法&#x2F;多账号，同时设置请求间随机休眠</li></ul><h4 id="通过js实现跳转来反爬"><a href="#通过js实现跳转来反爬" class="headerlink" title="通过js实现跳转来反爬"></a>通过js实现跳转来反爬</h4><ul><li>反爬原理：js实现页面跳转，无法在源码中获取下一页url</li><li>解决办法：多次抓包获取条状url，分析规律</li></ul><h4 id="通过蜜罐（陷阱）获取爬虫IP（获取代理IP），进行反爬"><a href="#通过蜜罐（陷阱）获取爬虫IP（获取代理IP），进行反爬" class="headerlink" title="通过蜜罐（陷阱）获取爬虫IP（获取代理IP），进行反爬"></a>通过蜜罐（陷阱）获取爬虫IP（获取代理IP），进行反爬</h4><ul><li>反爬原理：在爬虫获取链接进行请求的过程中，爬虫会根据正则、xpath、css等方式进行后续链接的提取，此时服务器端可以设置一个陷阱url，会被提前规则获取，但是正常用户无法获取，这样就能有效的区分爬虫和正常用户</li><li>解决办法：完成爬虫的编写之后，使用代理批量爬取测试&#x2F;仔细分析响应内容结构，找出页面中存在的陷阱</li></ul><h4 id="通过假数据反爬"><a href="#通过假数据反爬" class="headerlink" title="通过假数据反爬"></a>通过假数据反爬</h4><ul><li>反爬原理：向返回的响应中添加假数据污染数据库，通常假数据不会被正常用户看到</li><li>解决办法：长期运行，核对数据库中数据同实际页面中数据对应情况，如果存在问题&#x2F;仔细分析响应内容</li></ul><h4 id="阻塞任务队列"><a href="#阻塞任务队列" class="headerlink" title="阻塞任务队列"></a>阻塞任务队列</h4><ul><li>反爬原理：通过生成大量垃圾url，从而阻塞任务队列，降低爬虫的实际工作效率</li><li>解决办法：观察运行过程中请求响应状态&#x2F;仔细分析源码获取垃圾url生成规则，对URL进行过滤</li></ul><h4 id="阻塞网络IO"><a href="#阻塞网络IO" class="headerlink" title="阻塞网络IO"></a>阻塞网络IO</h4><ul><li>反爬原理：发送请求获取响应的过程实际上就是下载的过程，在任务队列中混入一个大文件的url，当爬虫在进行该请求时将会占用网络IO，如果是有多线程则会占用线程</li><li>解决办法：观察爬虫运行状态&#x2F;多线程对请求线程计时&#x2F;发送请求线</li></ul><h4 id="运维平台综合审计"><a href="#运维平台综合审计" class="headerlink" title="运维平台综合审计"></a>运维平台综合审计</h4><ul><li>反爬原理：通过运维平台进行综合管理，通常采用复合型反爬虫策略，多种手段同时使用</li><li>解决办法：仔细观察分析，长期运行测试目标网站，检查数据采集速度，多方面处理</li></ul><h3 id="常见基于数据加密进行反爬"><a href="#常见基于数据加密进行反爬" class="headerlink" title="常见基于数据加密进行反爬"></a>常见基于数据加密进行反爬</h3><p>对响应中含有的数据进行特殊化处理,通常的特殊化处理主要指的就是css数据偏移&#x2F;自定义字体&#x2F;数据加密&#x2F;数据图片&#x2F;特殊编码格式等</p><h4 id="通过自定义字体来反爬，例如猫眼电影的评分"><a href="#通过自定义字体来反爬，例如猫眼电影的评分" class="headerlink" title="通过自定义字体来反爬，例如猫眼电影的评分"></a>通过自定义字体来反爬，例如猫眼电影的评分</h4><ul><li>反爬思路：使用自有字体文件</li><li>解决办法：切换到手机版&#x2F;解析字体文件进行翻译</li></ul><h4 id="通过css来反爬"><a href="#通过css来反爬" class="headerlink" title="通过css来反爬"></a>通过css来反爬</h4><ul><li>反爬思路：源码数据不为真正的数据，需要通过css位移才能产生真正的数据</li><li>解决办法：计算css的偏移</li></ul><h4 id="通过js动态生成数据进行反爬"><a href="#通过js动态生成数据进行反爬" class="headerlink" title="通过js动态生成数据进行反爬"></a>通过js动态生成数据进行反爬</h4><ul><li>反爬原理：通过js动态生成</li><li>解决办法：解析关键js，获得数据生成流程，模拟生成数据</li></ul><h4 id="通过数据图片化反爬"><a href="#通过数据图片化反爬" class="headerlink" title="通过数据图片化反爬"></a>通过数据图片化反爬</h4><ul><li>反爬原理：<a href="https://baise.58.com/duanzu/3801871883498x.shtml">58同城短租</a></li><li>解决办法：通过使用图片解析引擎从图片中解析数据</li></ul><h4 id="通过编码格式进行反爬"><a href="#通过编码格式进行反爬" class="headerlink" title="通过编码格式进行反爬"></a>通过编码格式进行反爬</h4><ul><li>反爬原理：不适用默认编码格式，在获取响应之后通常爬虫使用utf-8格式进行解码，此时解码结果将会是乱码或者报错</li><li>解决办法：根据源码进行多格式解码，或者真正的解码格式</li></ul><h3 id="robots-txt协议"><a href="#robots-txt协议" class="headerlink" title="robots.txt协议"></a>robots.txt协议</h3><p>robots.txt(小写)是一种存放与根目录下的ASCCI编码的文本文件，它通常搞忘网络蜘蛛，此网站中的**哪些内容是不应被网络蜘蛛爬取的，哪些是可以被网络蜘蛛爬取的。</p><p><img src="/static/imgs/crawler/robots.txt-file.png"></p><center >   <p style="color:#A8A8A8">       robots.txt协议并不是一个规范，而只是约定俗成的,所以并不能保证网站的隐私。    </p> </center> ]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> crawler </tag>
            
            <tag> 反爬 </tag>
            
            <tag> robots.txt </tag>
            
            <tag> cookie </tag>
            
            <tag> referer </tag>
            
            <tag> 验证码 </tag>
            
            <tag> 阻塞网络IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫--简介</title>
      <link href="/2022/04/27/Python%E7%88%AC%E8%99%AB-%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/04/27/Python%E7%88%AC%E8%99%AB-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><p>网络爬虫（又称为<strong>网页蜘蛛</strong>，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p><h2 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h2><h3 id="通用网络爬虫-Scalable-Web-Crawler"><a href="#通用网络爬虫-Scalable-Web-Crawler" class="headerlink" title="通用网络爬虫(Scalable Web Crawler)"></a>通用网络爬虫(Scalable Web Crawler)</h3><p>通用网络爬虫的结构大致可以分为<strong>页面爬行</strong>模块、<strong>页面分析</strong>模块、<strong>链接过滤</strong>模块、页面数据库、URL 队列、初始 URL 集合</p><ul><li>深度优先策略:按照深度又低到高的顺序，依次访问下一级网页链接，这种策略比较适合垂直搜索或站内搜索。</li><li>广度优先策略:按照网页内容目录层次深浅来爬行页面，处于较浅目录层次的页面首先被爬行。这种策略能够有效控制页面的爬行深度。</li></ul><h3 id="聚焦网络爬虫-Focused-Crawler"><a href="#聚焦网络爬虫-Focused-Crawler" class="headerlink" title="聚焦网络爬虫(Focused Crawler)"></a>聚焦网络爬虫(Focused Crawler)</h3><p>选择性爬行那些与预<strong>先定义好的主题相关页面</strong>的网络爬虫</p><ul><li>基于内容评价的爬行策略：将用户输入查询词作为主题，包含查询词的页面被视为与主题相关，起局限性在于无法评价页面与主题相关度的高低。</li><li>基于链接结构评价的爬行策略：通过计算每个已访问页面的Authority权重和Hub权重，并依次决定链接的访问顺序。</li><li>基于增强学习的爬行策略：Rennie 和 McCallum 将增强学习引入聚焦爬虫，利用贝叶斯分类器，根据整个网页文本和链接文本对超链接进行分类，为每个链接计算出重要性，从而决定链接的访问顺序。</li><li>基于语境图的爬行策略：通过建立语境图学习网页之间的相似度，训练一个机器学习系统，通过该系统可计算当前页面到相关Web页面的距离，距离越近的页面中的链接优先访问。</li></ul><h3 id="增量式网络爬虫-Incremental-Web-Carawler"><a href="#增量式网络爬虫-Incremental-Web-Carawler" class="headerlink" title="增量式网络爬虫(Incremental Web Carawler)"></a>增量式网络爬虫(Incremental Web Carawler)</h3><p>指对已下载网页采取增量式更新和只爬行新产生的或者已经发生变化网页的爬虫，它能够在一定程度上保证所爬行的页面尽可能新的页面。</p><p>常用的方法有：</p><ul><li>统一更新发</li><li>个体更新发</li><li>基于分类的更新法</li></ul><h3 id="Deep-Web爬虫-Surface-Web"><a href="#Deep-Web爬虫-Surface-Web" class="headerlink" title="Deep Web爬虫(Surface Web)"></a>Deep Web爬虫(Surface Web)</h3><p>Deep Web 是那些大部分内容不能通过<strong>静态链接获取</strong>的、<strong>隐藏在搜索表单后的</strong>，只有用户提交一些关键词才能获得的 Web 页面。</p><p>Deep Web 爬虫体系结构包含六个基本功能模块 （<strong>爬行控制器、解析器、表单分析器、表单处理器、响应分析器、LVS 控制器</strong>）和两个爬虫内部数据结构（URL 列表、LVS 表）。 其中 LVS（Label Value Set）表示标签&#x2F;数值集合，用来表示填充表单的数据源。</p><h4 id="Deep-Web爬虫爬行过程中表单填写类型："><a href="#Deep-Web爬虫爬行过程中表单填写类型：" class="headerlink" title="Deep Web爬虫爬行过程中表单填写类型："></a>Deep Web爬虫爬行过程中表单填写类型：</h4><ul><li>基于领域知识的表单填写</li><li>基于网页结构分析的表单填写</li></ul><h2 id="爬虫核心"><a href="#爬虫核心" class="headerlink" title="爬虫核心"></a>爬虫核心</h2><ul><li>爬取网页数据</li><li>解析数据</li><li>爬虫和反爬之间的博弈</li></ul><h2 id="爬虫用途"><a href="#爬虫用途" class="headerlink" title="爬虫用途"></a>爬虫用途</h2><p><img src="/static/imgs/crawler/spider-10.jpeg"></p><ul><li>数据分析&#x2F;数据源</li><li>社交软件冷启动</li><li>竞争对手监控</li><li>舆情监控</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> crawler </tag>
            
            <tag> 爬虫分类 </tag>
            
            <tag> Scalable Web Crawler </tag>
            
            <tag> Focused Crawler </tag>
            
            <tag> Incremental Web Carawler </tag>
            
            <tag> Surface Web </tag>
            
            <tag> 通用网络爬虫 </tag>
            
            <tag> 聚焦网络爬虫 </tag>
            
            <tag> 增量式网络爬虫 </tag>
            
            <tag> Deep Web爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/2022/04/27/Python%E7%88%AC%E8%99%AB-HTTP/"/>
      <url>/2022/04/27/Python%E7%88%AC%E8%99%AB-HTTP/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="HTTP简介："><a href="#HTTP简介：" class="headerlink" title="HTTP简介："></a>HTTP简介：</h2><p>HTTP（HyperText Transfer Protocol）即超文本传输协议，是一种详细规定了浏览器和万维网服务器之间互相通信的规则，它是万维网交换信息的基础，它允许将HTML（超文本标记语言）文档从Web服务器传送到Web浏览器。</p><p>HTTP协议目前最新版的版本是1.1，HTTP是一种无状态的协议，无状态是指Web浏览器与Web服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后Web服务器返回响应（Response），连接就被关闭了，在服务器端不保留连接的有关信息。也就是说，HTTP请求只能由客户端发起，而服务器不能主动向客户端发送数据。</p><p>HTTP是一个基于TCP&#x2F;IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><h2 id="HTTP工作原理："><a href="#HTTP工作原理：" class="headerlink" title="HTTP工作原理："></a>HTTP工作原理：</h2><ul><li>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</li><li>Web服务器有：Apache服务器，IIS服务器等</li><li>Web服务器根据接收到的请求后，向客户端发送响应信息</li><li>HTTP默认端口号80</li></ul><h2 id="HTTP请求头信息（request）"><a href="#HTTP请求头信息（request）" class="headerlink" title="HTTP请求头信息（request）"></a>HTTP请求头信息（request）</h2><p><strong>HTTP请求报文由3部门组成(请求行+请求头+请求体)</strong></p><p><img src="/static/imgs/crawler/http01.png"></p><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p><strong>请求URL地址（统一资源定位符）</strong></p><p><strong>协议名称版本号</strong></p><p><strong>报文头（服务端获取客户端信息key：value）</strong></p><p><strong>报文体（a&#x3D;1&amp;b&#x3D;2的键值对编码成一个格式字符串传递数值）</strong></p><h4 id="请求方法（Request-method）"><a href="#请求方法（Request-method）" class="headerlink" title="请求方法（Request method）"></a>请求方法（Request method）</h4><ul><li>GET</li><li>POST</li><li>HEAD</li><li>PUT</li></ul><h4 id="HTTP请求报文属性"><a href="#HTTP请求报文属性" class="headerlink" title="HTTP请求报文属性"></a>HTTP请求报文属性</h4><ul><li>Accpet：高数服务器客户端接受什么类型的响应</li><li>Referer：表示这个请求是从那个url进来的</li><li>Cache-Control：对缓存进行控制</li><li>Accept-Encoding：接收编码格式</li><li>Host：指定要请求资源所在主机和端口</li><li>User-Agent：浏览器版本信息</li></ul><h3 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h3><p><strong>响应报文由三个部分组成（相应行，响应头，响应体）</strong></p><p><img src="/static/imgs/crawler/http04.png"></p><ul><li><p>报文协议及版本；</p></li><li><p>状态码及状态描述；</p></li><li><p>响应报文头，也是由多个属性组成；</p></li><li><p>响应报文体，即我们要的数据。</p></li></ul><h3 id="HTTP相应状态码"><a href="#HTTP相应状态码" class="headerlink" title="HTTP相应状态码"></a>HTTP相应状态码</h3><p><img src="/static/imgs/crawler/status_code.png"></p><ul><li>200 OK 表示成功</li><li>303 重定向,把你重定向到其他页面</li><li>304 资源并未修改,可以直接使用本地的缓存</li><li>404 找不到页面(页面被删除或其他)</li><li>500 服务端错误</li></ul><h4 id="HTTP响应报文属性"><a href="#HTTP响应报文属性" class="headerlink" title="HTTP响应报文属性"></a>HTTP响应报文属性</h4><ul><li>Cache-Control：响应输出到客户端后，服务器通过该属性告诉客户端该怎么控制响应内容的缓存</li><li>ETag：表示你请求资源的版本，如果该资源发生变化，那么属性也会跟着变化</li><li>Location：在重定向中或者创建新资源时使用</li><li>Set-Cookie：服务端可以设置客户端cookie</li></ul><h3 id="一次完整的http请求过程"><a href="#一次完整的http请求过程" class="headerlink" title="一次完整的http请求过程"></a>一次完整的http请求过程</h3><p><strong>域名解析 –&gt; 建立连接 –&gt; 接受请求 –&gt; 处理请求 –&gt; 访问资源 –&gt; 构建相应报文 –&gt; 发送响应报文 –&gt; 记录日志</strong></p><p><img src="/static/imgs/crawler/http03.png"></p><h4 id="域名解析："><a href="#域名解析：" class="headerlink" title="域名解析："></a>域名解析：</h4><p>当用户在浏览器地址栏输入<a href="http://www.baidu.com/">http://www.baidu.com</a> 发起一个请求，首先会把该域名解析为ip地址。</p><p>DNS 的详细解析过程：<a href="http://vinsent.blog.51cto.com/13116656/1967876">http://vinsent.blog.51cto.com/13116656/1967876</a></p><h4 id="建立连接："><a href="#建立连接：" class="headerlink" title="建立连接："></a>建立连接：</h4><p>浏览器会开启一个随机端口向服务器的80端口发起tcp连接请求，经过3次握手后建立tcp连接，然后向服务器发起httpd请求。   </p><ul><li>TCP三次握手</li><li>TCP四次挥手</li></ul><p><a href="https://zhuanlan.zhihu.com/p/53374516"><img src="/static/imgs/crawler/tcp.png" alt="alt text" title="TCP三次握手，四次挥手”你真的懂吗？"></a></p><h4 id="接收请求："><a href="#接收请求：" class="headerlink" title="接收请求："></a>接收请求：</h4><p>接受请求所要完成的工作就是接收来自网络的请求报文中对某一资源的请求过程</p><ul><li><p>单进程I&#x2F;O模型</p></li><li><p>多进程I&#x2F;O模型</p></li><li><p>复用I&#x2F;O结构</p></li><li><p>复用多线程I&#x2F;O模型</p></li><li><p>处理请求：以Apache的prefork工作模式为例，管理进程在接受到请求报文后会选择一个工作进程来对该请求进行处理，得到其请求方法和资源URL等相关信息</p></li><li><p>访问资源：对请求处理时一般需要访问后端资源，执行代码得到请求结果，把结果返回给服务器</p></li><li><p>构建响应报文：在得到返回的请求结果后，开始构建响应报文</p><ul><li>永久重定向</li><li>零时重定向</li></ul></li><li><p>发送响应报文：响应报文构建完成后，发送响应报文</p></li><li><p>记录日志：最后，当事务结束时，web服务器会在日志文件中添加一个条目，来描述已执行的事务</p></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><strong>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息</strong></p><p><img src="/static/imgs/crawler/cookie.png"></p><ul><li><p>1、Cookie是一种在客户端保持HTTP状态信息的技术</p></li><li><p>2、Cookie是在浏览器访问WEB服务器的某个资源时，由WEB服务器在HTTP响应消息头中附带发送给浏览器的数据</p></li><li><p>3、一旦WEB浏览器保存了某个Cookie，那么它在以后每次访问该WEB服务器时，都应在HTTP请求头中将这个Cookie发送给WEB服务器</p></li></ul><h4 id="Cookie功能特点："><a href="#Cookie功能特点：" class="headerlink" title="Cookie功能特点："></a>Cookie功能特点：</h4><ul><li>存储于浏览器头部&#x2F;传输于HTTP头部</li><li>写时带属性，读时无属性</li><li>HTTP头中Cookie：user&#x3D;admin;pwd&#x3D;123;</li><li>属性name&#x2F;value&#x2F;expire&#x2F;domain&#x2F;path&#x2F;…..</li><li>由三元组[name,doman,path]确定唯一cookie</li></ul><h4 id="Cookie的安全属性："><a href="#Cookie的安全属性：" class="headerlink" title="Cookie的安全属性："></a>Cookie的安全属性：</h4><ul><li>secure属性：当设置为true时，表示创建的Cookie会被以安全的形式向服务器传输，也就是只能在HTTPS连接中被浏览器传递到服务器段进行会话验证，如果时HTTP连接则不会传递该信息，所以不能窃取到Cookie的具体内容。</li><li>HttpOnly属性：如果在Cookie中设置了”HttpOnly“属性，那么通过程序（JS脚本等）将无法读取到Cookie信息，这样能有效防止XSS攻击。</li></ul><p> secure属性是防止信息在传递的过程中被监听捕获后信息泄露，HttpOnly属性的目的是防止程序获取cookie后进行攻击</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p><strong>Session 是 用于保持状态的基于Web服务器的方法。Session允许通过将对象存储在Web服务器的内存中在整个用户会话过程中保持任何对象</strong></p><p><img src="/static/imgs/crawler/session2.png"></p><ul><li><p>使用Cookie和附加URL参数都可以将上次请求的状态信息传递到下次请求中，但是如果传递的状态信息较多，将极大降低网络传输效率和增大服务器端程序处理的难度。</p></li><li><p>Session是一种将会话状态保存在服务器端的技术。</p></li><li><p>客户端需要接收、记忆和发送Session的会话标识号，Session可以且通常是借助于Cookie来传递会话标识号。</p></li></ul><h3 id="利用Cookie实现Session跟踪"><a href="#利用Cookie实现Session跟踪" class="headerlink" title="利用Cookie实现Session跟踪"></a>利用Cookie实现Session跟踪</h3><ul><li>如果web服务器处理某个访问请求时创建了新的HttpSession对象，它将会把会话标识号作为一个Cookie项加入到响应消息中，通常情况下，浏览器在随后发出的访问请求中又将会话标识号以Cookie的形式回传给web服务器。</li><li>web服务器端程序依据回传的会话标识号就知道以前已经为该客户端创建了HttpSession对象，不必再为客户端创建新的HttpSession对象。而是直接使用与该会话标识号匹配的HttpSession对象，通过这种方式就实现了对同一个客户端的会话状态的跟踪。</li></ul><h3 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h3><p><img src="/static/imgs/crawler/session&cookie.png"></p><p><strong>session和cookie同样都是针对单独用户对象，不同的用户在访问网站时，都会拥有各种的session或者cookie，不同用户之间互不干扰。</strong></p><ul><li>存储位置</li><li>生命周期</li></ul><h3 id="cookie和session区别"><a href="#cookie和session区别" class="headerlink" title="cookie和session区别"></a>cookie和session区别</h3><ul><li>cookie数据存放在客户的浏览器，session数据存放在服务器。</li><li>cookie不是很安全，可以分析存放在本地COOKIE并进行COOKIE欺骗考虑安全应当使用session。</li><li>session会在一定时间内保存在服务器。当访问增多，会占用服务器性能。考虑减轻服务器性能方面，应当使用COOKIE。</li><li>单个cookie在客户端的限制时3k。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> crawler </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫</title>
      <link href="/2022/04/27/Python%E7%88%AC%E8%99%AB/"/>
      <url>/2022/04/27/Python%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="一、HTTP"><a href="#一、HTTP" class="headerlink" title="一、HTTP"></a><a href="/2022/04/27/Python%E7%88%AC%E8%99%AB-HTTP/">一、HTTP</a></h2><ul><li>HTTP简介</li><li>HTTP工作原理</li><li>HTTP请求头和响应头</li><li>HTTP响应报文</li><li>HTTP状态码</li><li>一次完整的http请求过程</li><li>Cookie</li><li>Session</li></ul><h2 id="二、爬虫"><a href="#二、爬虫" class="headerlink" title="二、爬虫"></a>二、爬虫</h2><h3 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h3><h3 id="爬虫核心"><a href="#爬虫核心" class="headerlink" title="爬虫核心"></a>爬虫核心</h3><h3 id="爬虫用途"><a href="#爬虫用途" class="headerlink" title="爬虫用途"></a>爬虫用途</h3><h3 id="常见反爬手段"><a href="#常见反爬手段" class="headerlink" title="常见反爬手段"></a>常见反爬手段</h3><h4 id="反爬的原因"><a href="#反爬的原因" class="headerlink" title="反爬的原因"></a>反爬的原因</h4><h4 id="常见基于身份识别进行反爬"><a href="#常见基于身份识别进行反爬" class="headerlink" title="常见基于身份识别进行反爬"></a>常见基于身份识别进行反爬</h4><h4 id="常见基于数据加密进行反爬"><a href="#常见基于数据加密进行反爬" class="headerlink" title="常见基于数据加密进行反爬"></a>常见基于数据加密进行反爬</h4><h4 id="robots-txt协议"><a href="#robots-txt协议" class="headerlink" title="robots.txt协议"></a>robots.txt协议</h4><h3 id="Urllib"><a href="#Urllib" class="headerlink" title="Urllib"></a>Urllib</h3><h3 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h3><h4 id="JsonPath"><a href="#JsonPath" class="headerlink" title="JsonPath"></a>JsonPath</h4><h4 id="BeautifulSoup（bs4）"><a href="#BeautifulSoup（bs4）" class="headerlink" title="BeautifulSoup（bs4）"></a>BeautifulSoup（bs4）</h4><h3 id="无头浏览器"><a href="#无头浏览器" class="headerlink" title="无头浏览器"></a>无头浏览器</h3><h4 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h4><h4 id="Phantomjs"><a href="#Phantomjs" class="headerlink" title="Phantomjs"></a>Phantomjs</h4><h4 id="Chrome-handless"><a href="#Chrome-handless" class="headerlink" title="Chrome handless"></a>Chrome handless</h4>]]></content>
      
      
      <categories>
          
          <category> Python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> crawler </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法进阶--动态规划(DP)</title>
      <link href="/2022/04/26/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP/"/>
      <url>/2022/04/26/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p><strong>动态规划（Dynamic Programming，DP）是运筹学的一个分支，是求解决策过程最优化的过程。20世纪50年代初，美国数学家贝尔曼（R.Bellman）等人在研究多阶段决策过程的优化问题时，提出了著名的最优化原理，从而创立了动态规划。动态规划的应用极其广泛，包括工程技术、经济、工业生产、军事以及自动化控制等领域，并在背包问题、生产经营问题、资金管理问题、资源分配问题、最短路径问题和复杂系统可靠性问题等中取得了显著的效果</strong></p><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>公元 1202 年，意大利数学家莱昂纳多·斐波那契提出了具备以下特征的数列：</p><ul><li>前两个数的值分别为 0 、1 或者 1、1；</li><li>从第 3 个数字开始，它的值是前两个数字的和；<br>为了纪念他，人们将满足以上两个特征的数列称为斐波那契数列。</li></ul><p>如下就是一个斐波那契数列：<br>1 1 2 3 5 8 13 21 34……</p><h3 id="递归速度问题-子问题重复计算"><a href="#递归速度问题-子问题重复计算" class="headerlink" title="递归速度问题-子问题重复计算"></a><strong>递归速度问题-子问题重复计算</strong></h3><p>递归是一种<strong>自顶向下</strong>的、很直观的编程方法，解释性强。但在写递归的时候，最关键的问题是怎样避免递归过程中可能产生的大量重复计算，即重叠子问题，否则，写出来的代码即便没有逻辑错误，也几乎会因为超时无法运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibnacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibnacci(n-<span class="number">1</span>) + fibnacci(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(5) = f(4)+f(3)</span><br><span class="line">f(4) = f(3)+f(2)</span><br><span class="line">f(3) = f(2)+f(1)</span><br><span class="line">f(2) = 1</span><br><span class="line">f(1) = 1</span><br></pre></td></tr></table></figure><h3 id="动态规划思想-x3D-最优子结构-x3D-递推式"><a href="#动态规划思想-x3D-最优子结构-x3D-递推式" class="headerlink" title="动态规划思想 &#x3D; 最优子结构 &#x3D; 递推式"></a><strong>动态规划思想 &#x3D; 最优子结构 &#x3D; 递推式</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibnacci_no_rec</span>(<span class="params">n</span>):</span><br><span class="line">    f = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">            num = f[-<span class="number">1</span>]+f[-<span class="number">2</span>]</span><br><span class="line">            f.append(num)</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure><h2 id="钢条切割问题"><a href="#钢条切割问题" class="headerlink" title="钢条切割问题"></a>钢条切割问题</h2><p><strong>钢条，价格与钢条长度之间的关系如下表：</strong></p><p><img src="/static/imgs/algorithm/cut_rod-1.png"></p><p><strong>现在有一段长度为n的钢条和价格表，求收益最大方案。</strong></p><ul><li>长度为4的钢条最优方案是c</li></ul><p><img src="/static/imgs/algorithm/cut_rod-2.png"></p><ul><li>钢条长度和价格最优关系表：</li></ul><p><img src="/static/imgs/algorithm/cut_rod-3.png"></p><h3 id="长度是n的钢条切割方案"><a href="#长度是n的钢条切割方案" class="headerlink" title="长度是n的钢条切割方案"></a>长度是n的钢条切割方案</h3><p><strong>递推式</strong></p><ul><li>设长度为n的钢条切割后最优收益值为rn，可以得出递推式：<ul><li><img src="/static/imgs/algorithm/cut-rod-4.png" alt="img.png"></li></ul></li><li>第一个参数pn表示不切割的价格</li><li>其他n-1个参数分别表示另外n-1种不同切割方案，对方案i&#x3D;1,2,…,n-1<ul><li>将钢条切割长度为i和n-i两段</li><li>方案i的最优收益为切割两段最优之和</li></ul></li><li>考察所有的i，选择其中收益最大的方案。</li></ul><p><strong>最优子结构</strong></p><p>可以将求解规模为n的原问题，划分为规模更小的子问题：</p><ul><li>钢条切割问题还存在更简单的递归求解方法<ul><li>从钢条的左边切割下长度为i的一段，只对右边剩下的一段继续进行切割，左边的不在切割</li><li>递推式简化为<img src="/static/imgs/algorithm/cut_rod-5.png" alt="img.png"></li><li>不做切割的方案就可以描述为：左边一段长度为n，收益为pn，剩余一段长度为0，收益为r0&#x3D;0</li></ul></li></ul><h4 id="自顶向下实现-–-O-2-n"><a href="#自顶向下实现-–-O-2-n" class="headerlink" title="自顶向下实现 – O(2^n)"></a>自顶向下实现 – O(2^n)</h4><p><img src="/static/imgs/algorithm/cut_rod_down.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">36</span>, <span class="number">39</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_rec</span>(<span class="params">p, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        res = <span class="built_in">max</span>(res, cut_rod_rec(p, i) + cut_rod_rec(p, n - i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_rec_2</span>(<span class="params">p, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        res = <span class="built_in">max</span>(res, p[i] + cut_rod_rec_2(p, n - i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="自底向上-–-O-n-2"><a href="#自底向上-–-O-n-2" class="headerlink" title="自底向上 – O(n^2)"></a>自底向上 – O(n^2)</h4><p><strong>由于每次都是直接取之前存好的值。</strong></p><p><img src="/static/imgs/algorithm/cut_rod_up.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_dp</span>(<span class="params">p ,n</span>):</span><br><span class="line">    r = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">max</span>(res, r[i-j]+p[j])</span><br><span class="line">        r.append(res)</span><br><span class="line">    <span class="keyword">return</span> r[n]</span><br></pre></td></tr></table></figure><h4 id="重构解"><a href="#重构解" class="headerlink" title="重构解"></a>重构解</h4><ul><li>输出最优切割方案</li></ul><p><img src="/static/imgs/algorithm/cut_rod-6.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_extent</span>(<span class="params">p, n</span>):</span><br><span class="line">    r = [<span class="number">0</span>]     <span class="comment"># 最优解</span></span><br><span class="line">    s = [<span class="number">0</span>]     <span class="comment"># 切割后左边的长度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        res_r = <span class="number">0</span></span><br><span class="line">        res_s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j] + r[i-j] &gt; res_r:</span><br><span class="line">                res_r = p[j] + r[i-j]</span><br><span class="line">                res_s = j</span><br><span class="line">        r.append(res_r)</span><br><span class="line">        s.append(res_s)</span><br><span class="line">    <span class="keyword">return</span> r[n], s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_solution</span>(<span class="params">p, n</span>):</span><br><span class="line">    r, s = cut_rod_extent(p, n)</span><br><span class="line">    end = []</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        end.append(s[n])</span><br><span class="line">        n -= s[n]</span><br><span class="line">    <span class="keyword">return</span> end</span><br></pre></td></tr></table></figure><h3 id="动态规划问题特征"><a href="#动态规划问题特征" class="headerlink" title="动态规划问题特征"></a>动态规划问题特征</h3><ul><li>最优子结构</li><li>重叠子问题</li></ul><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p><strong>一个序列的子序列是在该序列中删去若干元素后得到的序列。例如：“ABCD”和“BDF”都是“ABCDEFG”的子序列。</strong></p><p><strong>最长公共子序列（Longest Common Subsequence,简写LCS）问题：给定两个序列X和Y，求X和Y长度最大的公共子序列。例如：X&#x3D;“ABBCBDE”, Y&#x3D;”DBBCDB”, LCS(X,Y)&#x3D;”BBCD”</strong></p><h3 id="最优子结构原理"><a href="#最优子结构原理" class="headerlink" title="最优子结构原理"></a>最优子结构原理</h3><p>X&#x3D;&lt;x1,x2,…,xm&gt;和Y&#x3D;&lt;y1,y2,…,yn&gt;为两个序列，Z&#x3D;&lt;z1,z2,…,zk&gt;为X和Y的任意LCS。</p><ul><li>如果xm&#x3D;yn，则zk&#x3D;xm&#x3D;yn且Zk-1是Xm-1和Yn-1的一个LCS。</li><li>如果xm≠yn，那么zk≠xm意味着Z是Xm-1和Y的一个LCS。</li><li>如果xm≠yn，那么zk≠yn意味着Z是X和Yn-1的一个LCS。</li></ul><h3 id="递推式"><a href="#递推式" class="headerlink" title="递推式"></a>递推式</h3><p><img src="/static/imgs/algorithm/dp_lcs.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lcs_length</span>(<span class="params">x, y</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i-<span class="number">1</span>] == y[j-<span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = <span class="built_in">max</span>(c[i-<span class="number">1</span>][j],c[i][j-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> c:</span><br><span class="line">        <span class="built_in">print</span>(_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c[m][n]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcs</span>(<span class="params">x, y</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    b = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]  <span class="comment"># 左上方  上方  左方</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i - <span class="number">1</span>] == y[j - <span class="number">1</span>]:  <span class="comment"># i,j位置上的字符匹配的时候，来自于左上方+1</span></span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                b[i][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> c[i - <span class="number">1</span>][j] &gt;= c[i][j - <span class="number">1</span>]:  <span class="comment"># 来自于上方(这里把等于也偏向上)</span></span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j]</span><br><span class="line">                b[i][j] = <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 来自于左方</span></span><br><span class="line">                c[i][j] = c[i][j - <span class="number">1</span>]</span><br><span class="line">                b[i][j] = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> c[m][n], b</span><br><span class="line"></span><br><span class="line">c, b = lcs(<span class="string">&quot;ABCBDAB&quot;</span>, <span class="string">&quot;BDCABA&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> b:</span><br><span class="line">    <span class="built_in">print</span>(_)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcs_trackback</span>(<span class="params">x,y</span>):</span><br><span class="line">    c, b = lcs(x, y)</span><br><span class="line">    i = <span class="built_in">len</span>(x)</span><br><span class="line">    j = <span class="built_in">len</span>(y)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b[i][j] == <span class="number">1</span>:   <span class="comment"># 来自左上方 -- 匹配</span></span><br><span class="line">            res.append(x[i-<span class="number">1</span>])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> b[i][j] == <span class="number">2</span>:   <span class="comment"># 来自于上方 -- 不匹配</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:       <span class="comment"># ==3,来自左方 -- 不匹配</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>(res))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法进阶--贪心算法</title>
      <link href="/2022/04/26/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/26/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p><strong>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。</strong></p><p>贪心算法并不保证会得到最优解，但是在某些问题上贪心算法的解就是最优解。要判断一个问题能否用贪心算法来计算。</p><h2 id="一、找零问题"><a href="#一、找零问题" class="headerlink" title="一、找零问题"></a>一、找零问题</h2><p><strong>假设商店老板需要找零n元钱，钱币的面额有：100元、50元、20元、5元、1元，如何找零使得所需钱币的数量最小？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">t, n</span>):</span><br><span class="line">    m = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line">    <span class="keyword">for</span> i, money <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">        m[i] = n // money</span><br><span class="line">        n = n % money</span><br><span class="line">    <span class="keyword">return</span> m, n</span><br></pre></td></tr></table></figure><h2 id="二、背包问题"><a href="#二、背包问题" class="headerlink" title="二、背包问题"></a>二、背包问题</h2><p><strong>背包问题(Knapsack problem)是一种组合优化的NP完全问题。 问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。 问题的名称来源于如何选择最合适的物品放置于给定背包中。</strong></p><p>一个小偷在某个商店发现有n个商品，第i个商品价值vi元，重wi千克。他希望拿走的价值尽量高，但他的背包最多只能容纳W千克的东西。他应该拿走哪些商品？</p><ul><li><p>0-1背包</p><p>对于一个商品，小偷要么把它完整拿走，要么留下。不能只拿走一部分，或把一个商品拿走多次。</p></li><li><p>分数背包</p><p>对于一个商品，小偷可以拿走其中任意一部分。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">goods = [(<span class="number">60</span> ,<span class="number">10</span>) ,(<span class="number">100</span> ,<span class="number">20</span>) ,(<span class="number">120</span> ,<span class="number">30</span>)]    <span class="comment"># （价格，重量）</span></span><br><span class="line">goods.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]/x[<span class="number">1</span>] ,reverse = <span class="literal">True</span>)     <span class="comment"># 根据商品单价排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fraction_backpack</span>(<span class="params">goods, w</span>):</span><br><span class="line">    m =[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(goods))]</span><br><span class="line">    total_v = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,(price,weight) <span class="keyword">in</span> <span class="built_in">enumerate</span>(goods):</span><br><span class="line">        <span class="keyword">if</span> weight &lt; w:</span><br><span class="line">            m[i] = <span class="number">1</span></span><br><span class="line">            total_v += price</span><br><span class="line">            w -= weight</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m[i] = w / weight</span><br><span class="line">            total_v += price * m[i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> m ,total_v</span><br></pre></td></tr></table></figure><h2 id="三、拼接最大数字问题"><a href="#三、拼接最大数字问题" class="headerlink" title="三、拼接最大数字问题"></a>三、拼接最大数字问题</h2><p><strong>有n个非负整数，将其按照字符串拼接的方式拼接为一个整体。如何拼接可以使得得到的整数最大？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xy_cap</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x + y &lt; y + x:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x + y &gt; y + x:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number_join</span>(<span class="params">li</span>):</span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, li))</span><br><span class="line">    li.sort(key=cmp_to_key(xy_cap))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(li)</span><br></pre></td></tr></table></figure><h2 id="四、活动选择问题"><a href="#四、活动选择问题" class="headerlink" title="四、活动选择问题"></a>四、活动选择问题</h2><p>假设有n个活动，这些互动要占用同一片场地，而场地在某时刻只能供一个活动使用。</p><p>每个活动都有一个开始时间si和结束时间fi（题目中时间以整数表示），表示活动在[si, fi)（左闭右开）区间占用场地。</p><p>问：安排哪些活动能够使该场地举办的活动个数最多？</p><p><img src="/static/imgs/algorithm/Greedy_Algorithm_activity.png"></p><ul><li>贪心结论：<strong>最先结束的活动一定是最优解的一部分</strong>。</li><li>假设a是所有活动中最先结束的活动，b是最优解中最先结束的活动。<ul><li>如果a&#x3D;b,结论成立</li><li>如果a不等b，则b的结束时间一定晚于a的结束时间，则此时用a替换掉最优解中的b，一定不与最优解中的其他活动时间重叠，因此替换后的解也是最优解。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">activities = [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">6</span>), (<span class="number">5</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">9</span>), (<span class="number">5</span>, <span class="number">9</span>), (<span class="number">6</span>, <span class="number">10</span>), (<span class="number">8</span>, <span class="number">11</span>), (<span class="number">8</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">14</span>), (<span class="number">12</span>, <span class="number">16</span>)]</span><br><span class="line">activities.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])  <span class="comment"># 以结束时间排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">activities_seletion</span>(<span class="params">a</span>):</span><br><span class="line">    res = [a[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> res[-<span class="number">1</span>][<span class="number">1</span>] &lt; a[i][<span class="number">0</span>]:</span><br><span class="line">            res.append(a[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-树(Tree)</title>
      <link href="/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-Tree/"/>
      <url>/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h1><p><strong>树（Tree）是一种抽象数据类型，或是实现这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。一般由N个有限节点组合，具有层次关系。</strong></p><p><img src="/static/imgs/algorithm/tree.png"></p><p><strong>树是一种可以递归定义的数据结构</strong></p><p><strong>树是由n个节点组成的集合：</strong></p><ul><li>如果n&#x3D;0，那么这是一颗空树；</li><li>如果n&gt;0，那存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一棵树。</li></ul><h3 id="树具有的特点"><a href="#树具有的特点" class="headerlink" title="树具有的特点"></a>树具有的特点</h3><ul><li>每个节点有零个或多个<strong>子节点</strong></li><li>没有父节点的节点称为<strong>根</strong></li><li>每个非根节点有且只有一个<strong>父节点</strong></li><li>除了根节点以外，每个子节点又可以分为多个不相交的子树</li></ul><h2 id="二叉树（Binary-tree）"><a href="#二叉树（Binary-tree）" class="headerlink" title="二叉树（Binary tree）"></a>二叉树（Binary tree）</h2><p><strong>二叉树是指树中节点的度不大于2(两颗子树)的有序树</strong></p><p>基于二叉树，又可分为<strong>满二叉树</strong>和<strong>完全二叉树</strong></p><ul><li><p>满二叉树</p><p> 一个二叉树，如果每一个层的结点树都达到最大值，则这个二叉树就是二叉树</p></li><li><p>完全二叉树</p><p>若设二叉树的深度为h，除第h层外，其他各层（1～（h-1）层）的节点树都达到最大个数，第h层所有的节点都连续集中在最左边，这就是完全二叉树</p></li></ul><p><img src="/static/imgs/algorithm/tree-1.png"></p><h3 id="二叉树的存储方法（表示方式）"><a href="#二叉树的存储方法（表示方式）" class="headerlink" title="二叉树的存储方法（表示方式）"></a>二叉树的存储方法（表示方式）</h3><ul><li><p><strong>链式存储方式</strong></p></li><li><p><strong>顺序存储方式</strong></p></li></ul><p><img src="/static/imgs/algorithm/Figure-A7-Binary-tree-data-generating-structure-Note-that-the-tree-data-structure-is.png"></p><p>子节点和父节点的关系</p><ul><li>父节点计算左子节点：<strong>2i+1</strong></li><li>父节点计算右子节点：<strong>2i+2</strong></li><li>子节点计算父节点下标：<strong>（i-1）&#x2F;&#x2F;2</strong></li></ul><h3 id="树的实例：模拟文件系统"><a href="#树的实例：模拟文件系统" class="headerlink" title="树的实例：模拟文件系统"></a>树的实例：模拟文件系统</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">type</span>=<span class="string">&#x27;dir&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="built_in">type</span></span><br><span class="line">        self.children = []</span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystemTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = Node(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        self.pwd = self.root</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name[-<span class="number">1</span>] != <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            name += <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        node = Node(name)</span><br><span class="line">        node.parent = self.pwd</span><br><span class="line">        self.pwd.children.append(node)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cd</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;..&#x27;</span>:</span><br><span class="line">            self.pwd = self.pwd.parent</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> name[-<span class="number">1</span>] != <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            name += <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> self.pwd.children:</span><br><span class="line">            <span class="keyword">if</span> child.name == name:</span><br><span class="line">                self.pwd = child</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;找不到目录...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.pwd.children</span><br></pre></td></tr></table></figure><h3 id="链表实现二叉树"><a href="#链表实现二叉树" class="headerlink" title="链表实现二叉树"></a>链表实现二叉树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self ,data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">E = BinaryTreeNode(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">A = BinaryTreeNode(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">G = BinaryTreeNode(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">C = BinaryTreeNode(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">F = BinaryTreeNode(<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">B = BinaryTreeNode(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">D = BinaryTreeNode(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">root = E</span><br><span class="line">E.lchild = A</span><br><span class="line">E.rchild = G</span><br><span class="line">A.rchild = C</span><br><span class="line">C.rchild = D</span><br><span class="line">C.lchild = B</span><br><span class="line">G.rchild = F</span><br></pre></td></tr></table></figure><h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历:"></a><strong>前序遍历:</strong></h4><p>首先访问根节点，然后遍历左子树，最后遍历右子树。</p><p><img src="/static/imgs/algorithm/pre_order_traversal.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pre_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="built_in">print</span>(root.data,end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        pre_order(root.lchild)</span><br><span class="line">        pre_order(root.rchild)</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a><strong>中序遍历</strong></h4><p>先遍历左子树，然后访问根节点，然后遍历右子树。</p><p><img src="/static/imgs/algorithm/in_order_traversal.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">in_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">       in_order(root.lchild)</span><br><span class="line">       <span class="built_in">print</span>(root.data, end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">       in_order(root.rchild)</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a><strong>后序遍历</strong></h4><p>是先遍历左子树，然后遍历右子树，最后访问树的根节点。</p><p><img src="/static/imgs/algorithm/post_order_traversal.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        post_order(root.lchild)</span><br><span class="line">        post_order(root.rchild)</span><br><span class="line">        <span class="built_in">print</span>(root.data, end = <span class="string">&#x27;, &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a><strong>层次遍历</strong></h4><p>层序遍历就是逐层遍历树结构。</p><p><img src="/static/imgs/algorithm/level_order_traversal.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">level_order</span>(<span class="params">root</span>):</span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:   <span class="comment"># 只要队不空</span></span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        <span class="built_in">print</span>(node.data, end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> node.lchild:</span><br><span class="line">            queue.append(node.lchild)</span><br><span class="line">        <span class="keyword">if</span> node.rchild:</span><br><span class="line">            queue.append(node.rchild)</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p><strong>二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。二叉搜索树作为一种经典的数据结构，它既有链表的快速插入与删除操作的特点，又有数组快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。</strong></p><p><img src="/static/imgs/algorithm/bst.png"></p><h3 id="二叉搜索树-–-插入"><a href="#二叉搜索树-–-插入" class="headerlink" title="二叉搜索树 – 插入"></a>二叉搜索树 – 插入</h3><p>二叉搜索树中的新节点总是添加到叶子位置。执行搜索可以轻松找到新节点的位置。</p><p><img src="/static/imgs/algorithm/bst_insert.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, node, val</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node: </span><br><span class="line">        node = TreeNode(val)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">elif</span> node.data &lt; val: </span><br><span class="line">        node.rchild = self.insert(node.rchild, val)</span><br><span class="line">        node.rchild.parent = node</span><br><span class="line">    <span class="keyword">elif</span> node.data &gt; val: </span><br><span class="line">        node.lchild = self.insert(node.lchild, val)</span><br><span class="line">        node.lchild.parent = node</span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树-–-查询"><a href="#二叉搜索树-–-查询" class="headerlink" title="二叉搜索树 – 查询"></a>二叉搜索树 – 查询</h3><ul><li>从树的根节点开始</li><li>如果值小于当前节点，左移</li><li>如果值大于当前节点，向右移动</li></ul><p><img src="/static/imgs/algorithm/bst_query.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, node, val</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:    <span class="comment"># 判断空树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> node.data == val:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">elif</span> node.data &gt; val:</span><br><span class="line">        <span class="keyword">return</span> self.query(node.lchild, val)</span><br><span class="line">    <span class="keyword">elif</span> node.data &lt; val:</span><br><span class="line">        <span class="keyword">return</span> self.query(node.rchild, val)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="二叉搜索树-–-删除"><a href="#二叉搜索树-–-删除" class="headerlink" title="二叉搜索树 – 删除"></a>二叉搜索树 – 删除</h3><ul><li><p><strong>如果要删除的节点是叶子节点</strong></p><p> 操作方法：直接删除</p></li></ul><p><img src="/static/imgs/algorithm/bst_delete-01.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__remove_node_leaf</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="comment"># 情况1：node是叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.parent:  <span class="comment"># node为根节点</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> node.parent.lchild == node:  <span class="comment"># node是左孩子</span></span><br><span class="line">        node.parent.lchild = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># node是右孩子</span></span><br><span class="line">        node.parent.rchild = <span class="literal">None</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>如果要删除的节点只有一个孩子</strong></p><p> 操作方法：将此节点的父亲与孩子连接，然后删除该节点</p></li></ul><p>  <img src="/static/imgs/algorithm/bst_delete-02.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__remove_node_lchild</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="comment"># node只有一个左孩子</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.parent:  <span class="comment"># node是根节点</span></span><br><span class="line">        self.root = node.lchild</span><br><span class="line">    <span class="keyword">elif</span> node.parent.lchild == node:  <span class="comment"># node是左孩子</span></span><br><span class="line">        node.parent.lchild = node.lchild</span><br><span class="line">        node.lchile.parent = node.parent</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># node是右孩子</span></span><br><span class="line">        node.parent.rchild = node.lchild</span><br><span class="line">        node.lchile.parent = node.parent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__remove_node_rchild</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="comment"># node只有一个右孩子</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">        self.root = node.rchild</span><br><span class="line">    <span class="keyword">elif</span> node == node.parent.lchild:</span><br><span class="line">        node.parent.lchild = node.rchild</span><br><span class="line">        node.rchild.parent = node.parent</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node.parent.rchild = node.rchild</span><br><span class="line">        node.rchild.parent = node.parent</span><br></pre></td></tr></table></figure><ul><li><p><strong>如果要删除的节点有两个孩子</strong></p><p> 操作方法：将其右子树最小节点删除，替换到当前节点</p></li></ul><p>  <img src="/static/imgs/algorithm/bst_delete-03.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, val</span>):</span><br><span class="line">    <span class="keyword">if</span> self.root:  <span class="comment"># 树不空</span></span><br><span class="line">        node = self.query_no_rec(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.lchild <span class="keyword">and</span> <span class="keyword">not</span> node.rchild:     <span class="comment"># node是根节点</span></span><br><span class="line">            self.__remove_node_leaf(node)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> node.rchild:       <span class="comment"># node只有一个左孩子</span></span><br><span class="line">            self.__remove_node_lchild(node)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> node.lchild:       <span class="comment"># node只有一个右孩子</span></span><br><span class="line">            self.__remove_node_rchild(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            min_node = node.rchild</span><br><span class="line">            <span class="keyword">while</span> min_node.lchild:     <span class="comment"># 拿到右子树中最小的节点</span></span><br><span class="line">                min_node = min_node.lchild</span><br><span class="line">            node.data = min_node.data   <span class="comment"># 将右子树最小节点覆盖当前node</span></span><br><span class="line">            <span class="keyword">if</span> min_node.rchild:     <span class="comment"># 只有右孩子</span></span><br><span class="line">                self.__remove_node_rchild(min_node)</span><br><span class="line">            <span class="keyword">else</span>:   <span class="comment"># 叶子节点</span></span><br><span class="line">                self.__remove_node_leaf(min_node)</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树的效率"><a href="#二叉搜索树的效率" class="headerlink" title="二叉搜索树的效率"></a>二叉搜索树的效率</h2><ul><li>平均情况下，二叉搜索树进行搜索的时间复杂度（O(lgn)）。</li><li>最坏情况下，二叉搜索树可能非常偏斜</li><li>解决方案：<ul><li>随机优化插入</li><li>AVL树</li></ul></li></ul><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><p><strong>AVL树是一颗自平衡的二叉搜索树。</strong></p><p>AVL树具有一下性质：</p><ul><li><strong>根的左右子树的高度之差的绝对值不能超过1</strong></li><li><strong>根的左右子树都是平衡二叉树</strong></li></ul><p><img src="/static/imgs/algorithm/avl_tree.png"></p><h3 id="AVL树-–插入"><a href="#AVL树-–插入" class="headerlink" title="AVL树 –插入"></a>AVL树 –插入</h3><ul><li>插入一个节点可能会破坏AVL树的平衡，可以通过旋转操作来进行修正。</li><li>插入一个节点后，只有从插入节点到根节点的路径上的节点的平衡可能被改变。我们需要找出第一个破坏了平衡条件的节点，称之为K。k的两颗子树的高度差2.</li><li>不平衡的出现可能有4中情况</li></ul><h4 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h4><p>不平衡是由于对K的右孩子的右子树插入导致的：左旋</p><p><img src="/static/imgs/algorithm/avl_left.png"></p><h4 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h4><p>不平衡是由于对K的左孩子的左子树插入导致的：右旋</p><p><img src="/static/imgs/algorithm/avl_right.png"></p><h4 id="右旋-gt-左旋"><a href="#右旋-gt-左旋" class="headerlink" title="右旋-&gt;左旋"></a>右旋-&gt;左旋</h4><p>不平衡是由对K的右孩子的左子树插入导致的</p><p><img src="/static/imgs/algorithm/avl_right_left.png"></p><h4 id="左旋-gt-右旋"><a href="#左旋-gt-右旋" class="headerlink" title="左旋-&gt;右旋"></a>左旋-&gt;右旋</h4><p>不平衡是由于对K的左孩子的右子树插入导致的</p><p><img src="/static/imgs/algorithm/avl_left_right.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> Tree </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> AVL树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-哈希表(HashTable)</title>
      <link href="/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8-HashTable/"/>
      <url>/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8-HashTable/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>哈希表(Hash Table，又为散列表)，是一种线性表的存储结构。哈希表由一个顺序表(数组)和一个哈希函数组成。哈希函数h(k)将元素k作为自变量，返回元素的存储下标。</p><ul><li>假设有一个长度为7的数组，哈希函数h(k)&#x3D;k%7。元素集合{14,22,3,5}的存储方式如下图</li></ul><p><img src="/static/imgs/algorithm/hashtable_01.png"> </p><h2 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h2><p>由于哈希表的大小是有限的，而要存储的值的总数量是无限的，因此对于任何哈希函数，都会出现两个不同元素映射到同一个位置上的情况，这种情况叫做哈希冲突。</p><ul><li>比如h(k)&#x3D;k%7, h(0)&#x3D;h(7)&#x3D;h(14)&#x3D;…</li></ul><p><img src="/static/imgs/algorithm/hashtable_02.png"></p><h2 id="解决哈希冲突"><a href="#解决哈希冲突" class="headerlink" title="解决哈希冲突"></a>解决哈希冲突</h2><h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><p><strong>开放寻址法：如果哈希函数返回的位置已经有值，则可以向后探查新的位置来存储这个值。</strong></p><ul><li>线性探查：如果位置i被占用，则探查i+1, i+2,……</li><li>二次探查：如果位置i被占用，则探查i+12,i-12,i+22,i-22,……</li><li>二度哈希：有n个哈希函数，当使用第1个哈希函数h1发生冲突时，则尝试使用h2,h3,……</li></ul><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><p>拉链法：哈希表每个位置都连接一个链表，当冲突发生时，冲突的元素将被加到该位置链表的最后</p><p><img src="/static/imgs/algorithm/hashtable_03.png"></p><h2 id="常见哈希函数"><a href="#常见哈希函数" class="headerlink" title="常见哈希函数"></a>常见哈希函数</h2><ul><li>除法哈希法：h(k) &#x3D; k%m</li><li>乘法哈希法：h(k) &#x3D; floor(m*(A*key%1))</li><li>全域哈希法：ha,b(k) &#x3D; ((a*key + b) % p) % m   a,b&#x3D;1,2,…,p-1</li></ul><h2 id="通过链表实现哈希表"><a href="#通过链表实现哈希表" class="headerlink" title="通过链表实现哈希表"></a>通过链表实现哈希表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item</span>):</span><br><span class="line">            self.item = item</span><br><span class="line">            self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LinkListIterator</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, node</span>):</span><br><span class="line">            self.node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">if</span> self.node:</span><br><span class="line">                cur_node = self.node</span><br><span class="line">                self.node = cur_node.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> cur_node.item</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iterable=<span class="literal">None</span></span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> iterable:</span><br><span class="line">            self.extend(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, obj</span>):</span><br><span class="line">        s = LinkList.Node(obj)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            self.head = s</span><br><span class="line">            self.tail = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail.<span class="built_in">next</span> = s</span><br><span class="line">            self.tail = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self, iterable</span>):</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> iterable:</span><br><span class="line">            self.append(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">if</span> n == obj:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, value</span>):</span><br><span class="line">        node = self.head</span><br><span class="line">        tmp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.item == value:</span><br><span class="line">                tmp.<span class="built_in">next</span> = node.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            tmp = node</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.LinkListIterator(self.head)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【&quot;</span> + <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, self)) + <span class="string">&quot;】&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">10</span></span>):</span><br><span class="line">        self.size = size</span><br><span class="line">        self.T = [LinkList() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.size)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">return</span> k % self.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, k</span>):</span><br><span class="line">        i = self.<span class="built_in">hash</span>(k)</span><br><span class="line">        <span class="keyword">if</span> self.find(k):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;重复插入&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.T[i].append(k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, k</span>):</span><br><span class="line">        i = self.<span class="built_in">hash</span>(k)</span><br><span class="line">        <span class="keyword">return</span> self.T[i].delete(k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, k</span>):</span><br><span class="line">        i = self.<span class="built_in">hash</span>(k)</span><br><span class="line">        <span class="keyword">return</span> self.T[i].find(k)</span><br></pre></td></tr></table></figure><h2 id="哈希表在Python中的应用"><a href="#哈希表在Python中的应用" class="headerlink" title="哈希表在Python中的应用"></a>哈希表在Python中的应用</h2><ul><li>Python字典与集合都是通过哈希表实现的</li><li>md5算法</li><li>SHA2算法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
            <tag> Hash Table </tag>
            
            <tag> 散列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-链表(linked_list)</title>
      <link href="/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8-linked-list/"/>
      <url>/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8-linked-list/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><strong>链表是由一系列节点组成的元素集合。每个节点包含两部分，数据域item和指向下一个节点的指针next。通过节点之间的互相连接，最终串联成一个链表。</strong></p><p><img src="/static/imgs/algorithm/linked_list.png"></p><h3 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h3><ul><li><strong>头插法</strong></li></ul><p><img src="/static/imgs/algorithm/linklist_head.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_linklist_head</span>(<span class="params">li</span>):</span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        node.<span class="built_in">next</span> = head</span><br><span class="line">        head = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><ul><li><strong>尾插法</strong></li></ul><p><img src="/static/imgs/algorithm/linked_list_tail.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_linklist_tail</span>(<span class="params">li</span>):</span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        tail.<span class="built_in">next</span> = node</span><br><span class="line">        tail = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="链表的插入和删除"><a href="#链表的插入和删除" class="headerlink" title="链表的插入和删除"></a>链表的插入和删除</h3><p><img src="/static/imgs/algorithm/linked_list_insert.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找到链表中值的对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_node</span>(<span class="params">lk, value</span>):</span><br><span class="line">    <span class="keyword">while</span> lk:</span><br><span class="line">        <span class="keyword">if</span> lk.item == value:</span><br><span class="line">            <span class="keyword">return</span> lk</span><br><span class="line">        lk = lk.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向链表中插入新的对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_node</span>(<span class="params">val_lk, node</span>):</span><br><span class="line">    node.<span class="built_in">next</span> = val_lk.<span class="built_in">next</span></span><br><span class="line">    val_lk.<span class="built_in">next</span> = node</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/static/imgs/algorithm/linked_list_delete.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除链表中的对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_node</span>(<span class="params">lk, value</span>):</span><br><span class="line">    tmp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> lk:</span><br><span class="line">        <span class="keyword">if</span> lk.item == value:</span><br><span class="line">            tmp.<span class="built_in">next</span> = lk.<span class="built_in">next</span></span><br><span class="line">        tmp = lk</span><br><span class="line">        lk = lk.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><strong>双链表的每个节点有两个指针：一个指向后一个节点，另一个指向前一个节点。</strong></p><p><img src="/static/imgs/algorithm/double_linked_list.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.prior = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_linked_list</span>(<span class="params">li</span>):</span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        node.prior = tail</span><br><span class="line">        tail.<span class="built_in">next</span> = node</span><br><span class="line">        tail = tail.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 双向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列的应用--迷宫问题</title>
      <link href="/2022/04/26/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/26/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="栈和队列的应用–迷宫问题"><a href="#栈和队列的应用–迷宫问题" class="headerlink" title="栈和队列的应用–迷宫问题"></a>栈和队列的应用–迷宫问题</h2><p><strong>给一个二维列表，表示迷宫(0表示通道，1表示围墙)。给出算法，求出一条走出迷宫的路径。</strong></p><p><img src="/static/imgs/algorithm/Labyrinth.png"></p><h3 id="栈–深度优先搜索"><a href="#栈–深度优先搜索" class="headerlink" title="栈–深度优先搜索"></a>栈–深度优先搜索</h3><ul><li>回溯法</li><li>思路：从一个节点开始，任意找下一个能走的点，当找不到能走的点时，退回上一个点寻找是否有其他方向的点。</li><li>使用栈存储当前路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">maze = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x+<span class="number">1</span>,y),    <span class="comment"># 向上走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x-<span class="number">1</span>,y),    <span class="comment"># 向下走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y-<span class="number">1</span>),    <span class="comment"># 向左走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y+<span class="number">1</span>)     <span class="comment"># 向右走</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># (x1, y1)代表起点；(x2, y2)代表终点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maze_path</span>(<span class="params">x1 ,y1 ,x2 ,y2</span>):</span><br><span class="line">    stack = [(x1,y1)]</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(stack)) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = stack[-<span class="number">1</span>] <span class="comment">#把当前节点存起来</span></span><br><span class="line">        <span class="comment"># 如果当前节点的x，y 等于 终点节点x，y说明已经到达终点</span></span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] ==y2:</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> stack:</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">len</span>(stack))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>],curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="comment"># 如果下一个节点为0 说明可以走</span></span><br><span class="line">            <span class="keyword">if</span> maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                stack.append(nextNode)</span><br><span class="line">                maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span>  <span class="comment">#将走过的节点标识为2</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#当上下左右都走不通时，就往回走</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.pop() </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="队列–广度优先搜索"><a href="#队列–广度优先搜索" class="headerlink" title="队列–广度优先搜索"></a>队列–广度优先搜索</h3><ul><li>思路：从一个节点开始，寻找所有接下来能继续走的点，继续不断寻找，直到找到出口。</li><li>使用队列存储当前正在考虑的节点</li></ul><p><img src="/static/imgs/algorithm/deque_maze.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">maze = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x+<span class="number">1</span>,y),    <span class="comment"># 向上走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x-<span class="number">1</span>,y),    <span class="comment"># 向下走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y-<span class="number">1</span>),    <span class="comment"># 向左走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y+<span class="number">1</span>)     <span class="comment"># 向右走</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_r</span>(<span class="params">path</span>):</span><br><span class="line">    curNode = path[-<span class="number">1</span>]</span><br><span class="line">    realpath = []</span><br><span class="line">    <span class="keyword">while</span> curNode[<span class="number">2</span>] != -<span class="number">1</span>:</span><br><span class="line">        realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        curNode = path[curNode[<span class="number">2</span>]]</span><br><span class="line">    realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">    realpath.reverse()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> realpath:</span><br><span class="line">        <span class="built_in">print</span>(node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deque_maze_path</span>(<span class="params">x1 ,y1 ,x2 ,y2</span>):</span><br><span class="line">    queue = deque()     <span class="comment"># 创建队列</span></span><br><span class="line">    queue.append((x1,y1,-<span class="number">1</span>))    <span class="comment"># 先把起点放到队列中</span></span><br><span class="line">    path = []   <span class="comment"># 存放走的坐标</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = queue.popleft()</span><br><span class="line">        path.append(curNode)</span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == y2:</span><br><span class="line">            print_r(path)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:     <span class="comment">#判断是否可以走</span></span><br><span class="line">                queue.append((nextNode[<span class="number">0</span>],nextNode[<span class="number">1</span>],<span class="built_in">len</span>(path)-<span class="number">1</span>))    <span class="comment">#将可以走的位置加入到队列中</span></span><br><span class="line">                maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span>  <span class="comment"># 将走过的位置改为2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有路！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> Stack </tag>
            
            <tag> Queue </tag>
            
            <tag> 迷宫问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-队列(Queue)</title>
      <link href="/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97-Queue/"/>
      <url>/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97-Queue/</url>
      
        <content type="html"><![CDATA[<h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h1><p><strong>队列是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除。</strong></p><p><img src="/static/imgs/algorithm/queue.png"></p><ul><li>进行插入的一端称为队尾(rear)，插入动作称为进队或入队</li><li>进行删除的一端称为对头(front)，删除动作称为出队</li><li>队列的性质：先进先出(First-in，First-out)</li></ul><h2 id="队列的实现方式"><a href="#队列的实现方式" class="headerlink" title="队列的实现方式"></a>队列的实现方式</h2><h3 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a>环形队列</h3><p><img src="/static/imgs/algorithm/ring_queue.png"></p><p><strong>环形队列：当队尾指针front &#x3D;&#x3D; Maxsize+1时，再前进一个位置自动到0.</strong></p><ul><li>队首指针前进1：front &#x3D; (front + 1)%MaxSize</li><li>队尾指针前进1：rear &#x3D; (rear + 1)%MaxSize</li><li>队空条件：rear &#x3D;&#x3D; front</li><li>队满条件：(rear + 1)%MaxSize &#x3D;&#x3D; front</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">100</span></span>):</span><br><span class="line">        <span class="comment"># 创建一个队列</span></span><br><span class="line">        self.queue = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">        self.size = size</span><br><span class="line">        self.front = <span class="number">0</span>  <span class="comment">#队首指针</span></span><br><span class="line">        self.rear = <span class="number">0</span>   <span class="comment">#队尾指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向队列中插入数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="comment"># 是否为满队列</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_filled():</span><br><span class="line">            self.rear = (self.rear + <span class="number">1</span>) % self.size</span><br><span class="line">            self.queue[self.rear] = element</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Queue is filled.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除队列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 是否为空队列</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            self.front = (self.front + <span class="number">1</span>) % self.size</span><br><span class="line">            <span class="keyword">return</span> self.queue[self.front]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Queue is empty.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否空队列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.rear == self.front</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否满队列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_filled</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.front == (self.rear + <span class="number">1</span>) % self.size</span><br></pre></td></tr></table></figure><h3 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h3><p><strong>双向队列的两端都支持进队和出队操作</strong></p><h4 id="Python队列内置模块"><a href="#Python队列内置模块" class="headerlink" title="Python队列内置模块"></a>Python队列内置模块</h4><p>使用方法：from collections import deque </p><p><strong>双向队列的基本操作：</strong></p><ul><li>队首进队   append()</li><li>队首出队   popleft()</li><li>队尾进队   applendleft()</li><li>队尾出队   pop()</li></ul><h4 id="使用deque实现读取文件后n行"><a href="#使用deque实现读取文件后n行" class="headerlink" title="使用deque实现读取文件后n行"></a>使用deque实现读取文件后n行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tail</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tail.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        q = deque(f,n)</span><br><span class="line">        <span class="keyword">return</span> q</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> tail(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(line,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> Queue </tag>
            
            <tag> 环形队列 </tag>
            
            <tag> 双向队列 </tag>
            
            <tag> deque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-栈(Stack)</title>
      <link href="/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88-Stack/"/>
      <url>/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88-Stack/</url>
      
        <content type="html"><![CDATA[<h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><p><strong>栈是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。</strong></p><p><strong>栈的特点：后进先出LIFO(last-in,first-out)</strong></p><p><strong>栈的概念：栈顶、栈底</strong></p><h4 id="栈额基本操作："><a href="#栈额基本操作：" class="headerlink" title="栈额基本操作："></a>栈额基本操作：</h4><ul><li>进栈：push</li><li>出栈：pop</li><li>取栈顶：gettop</li></ul><h2 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h2><p><strong>使用一般的列表结构即可实现栈</strong></p><p><img src="/static/imgs/algorithm/stack.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        self.stack.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="栈的应用–括号匹配问题"><a href="#栈的应用–括号匹配问题" class="headerlink" title="栈的应用–括号匹配问题"></a>栈的应用–括号匹配问题</h2><p><strong>括号匹配问题：给一个字符串，其中包含小括号、中括号、大括号，求该字符串的括号是否匹配。</strong></p><p>例如：</p><ul><li>()()[]{}  匹配</li><li>([{])     不匹配</li><li>([{}])    匹配</li><li>]         不匹配</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,element</span>):</span><br><span class="line">        self.stack.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gettop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brackets_match</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    brackets = &#123;<span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;]&#x27;</span>:<span class="string">&quot;[&quot;</span>, <span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>&#125;</span><br><span class="line">    stack = Stack()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># 查看ch是否存在&#x27;(&#x27;,&#x27;[&#x27;,&#x27;&#123;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> &#123;<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>&#125;:</span><br><span class="line">            stack.push(ch)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> stack.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 拿栈顶和当前值比较</span></span><br><span class="line">            <span class="keyword">elif</span> stack.gettop() == brackets[ch]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:   <span class="comment">#if stack.pop() != brackets[ch]</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 如果列表为空返回true</span></span><br><span class="line">    <span class="keyword">if</span> stack.is_empty():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-其他排序</title>
      <link href="/2022/04/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%85%B6%E4%BB%96%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/04/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%85%B6%E4%BB%96%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><strong>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。</strong></p><p><strong>希尔排序的基本思想是</strong>：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”<strong>基本有序</strong>“时，再对全体记录进行依次直接插入排序。</p><p><img src="/static/imgs/algorithm/shell_sort.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> cal_time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort_gap</span>(<span class="params">li ,gap</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,<span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - gap</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j+gap] = li[j]</span><br><span class="line">            j -= gap</span><br><span class="line">        li[j+gap] = tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">li</span>):</span><br><span class="line">    d =<span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insertion_sort_gap(li,d)</span><br><span class="line">        d //= <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p><strong>计数排序是一个非基于比较的排序算法，该算法于1954年由 Harold H. Seward 提出。它的优势在于在对一定范围内的整数排序时，它的复杂度为Ο(n+k)（其中k是整数的范围），快于任何比较排序算法。 [1]  当然这是一种牺牲空间换取时间的做法，而且当O(k)&gt;O(n<em>log(n))的时候其效率反而不如基于比较的排序（基于比较的排序的时间复杂度在理论上的下限是O(n</em>log(n)), 如归并排序，堆排序）</strong></p><p><img src="/static/imgs/algorithm/count_sort.jpeg"></p><h4 id="对列表进行排序，已知列表中的数范围都在0-100之间；设计时间复杂度为o-n-的算法。"><a href="#对列表进行排序，已知列表中的数范围都在0-100之间；设计时间复杂度为o-n-的算法。" class="headerlink" title="对列表进行排序，已知列表中的数范围都在0-100之间；设计时间复杂度为o(n)的算法。"></a>对列表进行排序，已知列表中的数范围都在0-100之间；设计时间复杂度为o(n)的算法。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">li,max_count=<span class="number">100</span></span>):</span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_count+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count[val] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> i ,val <span class="keyword">in</span> <span class="built_in">enumerate</span> (count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(i)</span><br></pre></td></tr></table></figure><h2 id="桶排序（Bucket-Sort）"><a href="#桶排序（Bucket-Sort）" class="headerlink" title="桶排序（Bucket Sort）"></a>桶排序（Bucket Sort）</h2><p><strong>桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。</strong></p><p><img src="/static/imgs/algorithm/bucket_sort.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">li ,n=<span class="number">100</span> ,max_num=<span class="number">10000</span></span>):</span><br><span class="line">    buckets=[[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment">#创建桶</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">        i = <span class="built_in">min</span>(var//(max_num//n),n-<span class="number">1</span>)</span><br><span class="line">        buckets[i].append(var) <span class="comment">#往对应的桶添加数据</span></span><br><span class="line">        <span class="comment"># 保持桶里的顺序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i])-<span class="number">1</span> ,<span class="number">0</span> ,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="number">1</span>]:</span><br><span class="line">                buckets[i][j-<span class="number">1</span>],buckets[i][j] = buckets[i][j],buckets[i][j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    sort_li = []</span><br><span class="line">    <span class="comment"># 将所有桶放到sort_li 列表</span></span><br><span class="line">    <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">        sort_li.extend(buc) <span class="comment">#将这个列表数据添加到sort_li列表中</span></span><br><span class="line">    <span class="keyword">return</span> sort_li</span><br></pre></td></tr></table></figure><h2 id="基数排序-Radix-sort"><a href="#基数排序-Radix-sort" class="headerlink" title="基数排序(Radix sort)"></a>基数排序(Radix sort)</h2><p><strong>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</strong></p><p>它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p><p>基数排序的方式可以采用LSD（Least significant digital）或MSD（Most significant digital），LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。</p><p><img src="/static/imgs/algorithm/radix_sort.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">li</span>):</span><br><span class="line">    max_num = <span class="built_in">max</span>(li)</span><br><span class="line">    it =<span class="number">0</span></span><br><span class="line">    <span class="comment"># 10的it次方</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">10</span> ** it &lt;= max_num:</span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        <span class="comment"># 1、把对应的数据放到对应的桶</span></span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">            <span class="comment"># max_num = 974；取十位，it=1，974//10 --&gt; 97 % 10 --&gt;7</span></span><br><span class="line">            digit = (var//<span class="number">10</span> ** it) % <span class="number">10</span></span><br><span class="line">            buckets[digit].append(var)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2、将原来的li列表清空</span></span><br><span class="line">        li.clear()</span><br><span class="line">        <span class="comment"># 3、将新的列表放回li列表</span></span><br><span class="line">        <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">            li.extend(buc)</span><br><span class="line">        it += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查找排序练习"><a href="#查找排序练习" class="headerlink" title="查找排序练习"></a>查找排序练习</h2><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></h3><p><strong>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</strong></p><p><strong>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</strong></p><p><strong>你可以按任意顺序返回答案。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">two_Sum</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        li =[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[j]+nums[i] == target:</span><br><span class="line">                    li.append(j)</span><br><span class="line">                    li.append(i)</span><br><span class="line">                    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 希尔排序 </tag>
            
            <tag> 计数排序 </tag>
            
            <tag> 基数排序 </tag>
            
            <tag> 桶排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-NB三人组</title>
      <link href="/2022/04/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-NB%E4%B8%89%E4%BA%BA%E7%BB%84/"/>
      <url>/2022/04/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-NB%E4%B8%89%E4%BA%BA%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序-Quicksort-时间复杂度：o-N-logN"><a href="#快速排序-Quicksort-时间复杂度：o-N-logN" class="headerlink" title="快速排序(Quicksort) 时间复杂度：o(N*logN)"></a>快速排序(Quicksort) 时间复杂度：o(N*logN)</h2><p><strong>快速排序，又称划分交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序n个项目要O(n log2 n)次比较。在最坏状况下则需要 O(n^2)次比较，但这种状况并不常见。事实上，快速排序 (n log n)通常明显比其他算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地达成。</strong></p><p><img src="/static/imgs/algorithm/Quicksort_img.gif"></p><h3 id="快速排序思路："><a href="#快速排序思路：" class="headerlink" title="快速排序思路："></a>快速排序思路：</h3><ul><li>取一个元素p(第一个元素)，使元素p归位</li><li>列表被p分成两部分，左边都比p小，右边都比p大</li><li>递归完成排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    tmp = li[left]</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:    <span class="comment">#从右边开始找比tmp小的数</span></span><br><span class="line">            right -= <span class="number">1</span>  <span class="comment">#向左走一步</span></span><br><span class="line">        li[left] = li[right]    <span class="comment">#把右边小于tmp的值写到左边空位上</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:     <span class="comment">#从左边开始找比tmp大的数</span></span><br><span class="line">            left += <span class="number">1</span>  <span class="comment">#向右走一步</span></span><br><span class="line">        li[right] = li[left]    <span class="comment">#把左边大于tmp的值写到左边空位上</span></span><br><span class="line">    li[left] = tmp  <span class="comment">#将tmp归位</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = partition(li,left,right)</span><br><span class="line">        quick_sort(li, left, mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(li, mid+<span class="number">1</span>,right)</span><br></pre></td></tr></table></figure><p><img src="/static/imgs/algorithm/quick_sort2.png"></p><h3 id="快速排序的最坏情况"><a href="#快速排序的最坏情况" class="headerlink" title="快速排序的最坏情况"></a>快速排序的最坏情况</h3><ul><li>列表已按相同顺序排序</li><li>列表已按相反顺序排序</li><li>所有元素都相同（情况1和情况2的特例）</li></ul><p><strong>解决办法：随机选取中心轴下标。</strong></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><strong>堆排序（英语:Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点</strong></p><h3 id="什么是堆（heap）"><a href="#什么是堆（heap）" class="headerlink" title="什么是堆（heap）"></a>什么是堆（heap）</h3><p><strong>堆：一种特殊的完全二叉树结构</strong></p><ul><li>大根堆：一颗完全二叉树，满足任一节点都比其孩子节点大</li><li>小根堆：一颗完全二叉树，满足任一节点都比其孩子节点小</li></ul><p><img src="/static/imgs/algorithm/heap.png"></p><h3 id="堆的向下调整"><a href="#堆的向下调整" class="headerlink" title="堆的向下调整"></a>堆的向下调整</h3><p><strong>根节点的左右子树都是堆，根节点所在的树自身不是堆。可以通过一次向下调整变成一个堆。</strong></p><ul><li>若想将其调整为小堆，那么根结点的左右子树必须都为小堆。</li><li>若想将其调整为大堆，那么根结点的左右子树必须都为大堆。</li></ul><p><img src="/static/imgs/algorithm/heap-down.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li,low,high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param li: 列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点位置</span></span><br><span class="line"><span class="string">    :param high: 堆最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low <span class="comment">#i最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>   <span class="comment">#j是左孩子</span></span><br><span class="line">    tmp = li[low]     <span class="comment">#将堆顶的值存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:    <span class="comment">#j的值不能超过堆的最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &gt; li[j]: <span class="comment">#如果有右孩子并且比左孩子大，就把j指向右孩子</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp: <span class="comment">#如果孩子大于堆顶，就交换他们的位置</span></span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j       <span class="comment">#将i指向新的堆顶，向下看一层</span></span><br><span class="line">            j = <span class="number">2</span> * i +<span class="number">1</span>    <span class="comment">#根据堆顶求出左孩子</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    li[i] = tmp <span class="comment">#如果j超过了high，或者孩子小于堆顶，就把tmp放回原位置</span></span><br></pre></td></tr></table></figure><h3 id="堆排序的实现-时间复杂度o（nlogn）"><a href="#堆排序的实现-时间复杂度o（nlogn）" class="headerlink" title="堆排序的实现 时间复杂度o（nlogn）"></a>堆排序的实现 时间复杂度o（nlogn）</h3><ul><li>将最后一个元素和堆顶交换位置，每次将最后一个元素向前移动一位</li><li>做堆的向下调整</li></ul><p><img src="/static/imgs/algorithm/heap_sort.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">li</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="comment"># 构建堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n-<span class="number">2</span>)//<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>): <span class="comment">#i表示建堆时部分根下标</span></span><br><span class="line">        sift(li,i,n-<span class="number">1</span>)  <span class="comment">#将堆的最后一个元素作为high</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span> ,-<span class="number">1</span> ,-<span class="number">1</span>):    <span class="comment">#i指当前堆的最后一个元素</span></span><br><span class="line">        li[i] ,li[<span class="number">0</span>] = li[<span class="number">0</span>] ,li[i] <span class="comment">#把当前堆顶和堆的最后一个元素交换位置</span></span><br><span class="line">        sift(li ,<span class="number">0</span> ,i - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="堆排序的应用（topk-）"><a href="#堆排序的应用（topk-）" class="headerlink" title="堆排序的应用（topk ）"></a>堆排序的应用（topk ）</h3><h4 id="现在有n个数，设计算法得到前k大的数？（k-lt-n）"><a href="#现在有n个数，设计算法得到前k大的数？（k-lt-n）" class="headerlink" title="现在有n个数，设计算法得到前k大的数？（k&lt;n）"></a>现在有n个数，设计算法得到前k大的数？（k&lt;n）</h4><p><strong>解决思路：</strong></p><ul><li>排序后切片       o(nlogn)</li><li>排序LowB三人组   o(kn)</li><li>堆排序          o(nlogk)<ul><li>取列表前k个元素建立一个小根堆。堆顶就是目前第k大的数；</li><li>依次向后遍历原列表，对于列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行依次调整；</li><li>遍历列表所有元素后，倒序弹出堆顶</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建小根堆</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li,low,high</span>):</span><br><span class="line">    i = low</span><br><span class="line">    j = <span class="number">2</span> * i +<span class="number">1</span></span><br><span class="line">    tmp = li[i]</span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &lt; li[j]:</span><br><span class="line">            j +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &lt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j</span><br><span class="line">            j = <span class="number">2</span>*i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    li[i] = tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_topk</span>(<span class="params">li,k</span>):</span><br><span class="line">    heap = li[<span class="number">0</span>:k]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((k-<span class="number">2</span>)//<span class="number">2</span> ,-<span class="number">1</span> ,-<span class="number">1</span>):</span><br><span class="line">        sift(heap ,i ,k-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1、构建堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k ,<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> li[i] &gt; heap[<span class="number">0</span>]:</span><br><span class="line">            heap[<span class="number">0</span>] = li[i]</span><br><span class="line">            sift(heap,<span class="number">0</span>,k-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#2、遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span> ,-<span class="number">1</span> ,-<span class="number">1</span>):</span><br><span class="line">        heap[<span class="number">0</span>] ,heap[i] = heap[i] ,heap[<span class="number">0</span>]</span><br><span class="line">        sift(heap ,<span class="number">0</span> ,i-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 出数</span></span><br><span class="line">    <span class="keyword">return</span> heap</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><strong>归并排序（英语：Merge sort，或mergesort），是创建在归并操作上的一种有效的排序算法。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</strong></p><ul><li>时间复杂度o(n*logn) </li><li>空间复杂度o(n)</li></ul><p><strong>归并排序思路：</strong></p><ul><li>分解</li><li>排序</li><li>归并</li></ul><h3 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h3><p><strong>将两个有序列表，归并成一个有序的列表</strong></p><p><img src="/static/imgs/algorithm/merge.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li ,low ,mid ,high</span>):</span><br><span class="line">    i = low</span><br><span class="line">    j = mid+<span class="number">1</span></span><br><span class="line">    ltmp = []   <span class="comment"># 用于临时存放排序好的列表</span></span><br><span class="line">    <span class="comment"># 左右两边都有数</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:   <span class="comment"># 如果左边部分小于mid并且右边部分小于high</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:   <span class="comment"># 选出左右两边小的值</span></span><br><span class="line">            ltmp.append(li[i])  <span class="comment"># 将左边值添加到新的列表</span></span><br><span class="line">            i += <span class="number">1</span>  <span class="comment"># 将下标往后移动</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 有可能右边没数，但左边还有数</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 有可能左边没数，但右边还有数</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = ltmp</span><br></pre></td></tr></table></figure><h3 id="归并排序实现"><a href="#归并排序实现" class="headerlink" title="归并排序实现"></a>归并排序实现</h3><p><strong>归并排序的核心思想其实很简单，如果要排序一个列表，我们先把列表从中间分成前后两部分，然后分别对前后两部分进行排序，再将排好序的两部分数据合并在一起就可以了。</strong></p><p><img src="/static/imgs/algorithm/merge_sort.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">li ,low ,high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:      <span class="comment">#至少有两个数</span></span><br><span class="line">        mid = (low + high)//<span class="number">2</span></span><br><span class="line">        merge_sort(li,low,mid)</span><br><span class="line">        merge_sort(li,mid+<span class="number">1</span>,high)</span><br><span class="line">        merge(li ,low ,mid ,high)</span><br></pre></td></tr></table></figure><h2 id="NB三人组总结"><a href="#NB三人组总结" class="headerlink" title="NB三人组总结"></a>NB三人组总结</h2><p><strong>三种排序算法的时间复杂度都是O(nlogn)</strong></p><p><strong>一般情况下，就运行时间而言：</strong></p><ul><li>快速 &lt; 归并 &lt; 堆排序</li></ul><p><strong>三种排序算法的缺点：</strong></p><ul><li>快速排序：极端情况下排序效率低</li><li>归并排序：需要额外的内存开销</li><li>堆排序：在快的排序算法中相对较慢</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 快速排序 </tag>
            
            <tag> 堆排序 </tag>
            
            <tag> 对并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法-LowB三人组</title>
      <link href="/2022/04/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-LowB%E4%B8%89%E4%BA%BA%E7%BB%84/"/>
      <url>/2022/04/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-LowB%E4%B8%89%E4%BA%BA%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p><strong>排序也称排序算法(Sort Algorithm)，排序是将一组数据，依指定的顺序进行排列的过程。</strong></p><h2 id="冒泡排序（Bubble-Sort-时间复杂度：o-n-2"><a href="#冒泡排序（Bubble-Sort-时间复杂度：o-n-2" class="headerlink" title="冒泡排序（Bubble Sort) 时间复杂度：o(n^2)"></a>冒泡排序（Bubble Sort) 时间复杂度：o(n^2)</h2><p><strong>比较相邻的元素。如果第一个比第二个大，就交换他们的位置。</strong></p><p><img src="/static/imgs/algorithm/bubblesort.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):    <span class="comment">#第i躺</span></span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - i -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j],li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>],li[j]   <span class="comment">#交换位置</span></span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="选择排序（Selection-sort）时间复杂度：O-n-2"><a href="#选择排序（Selection-sort）时间复杂度：O-n-2" class="headerlink" title="选择排序（Selection sort）时间复杂度：O(n^2)"></a>选择排序（Selection sort）时间复杂度：O(n^2)</h2><p><strong>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</strong></p><p><img src="/static/imgs/algorithm/selection-sort.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):    <span class="comment">#第i趟</span></span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j     <span class="comment">#将最小值赋值给min_loc</span></span><br><span class="line">        li[min_loc] , li[i] = li[i] , li[min_loc]   <span class="comment">#待排序区域最小值放到元素开始下标</span></span><br></pre></td></tr></table></figure><h2 id="插入排序（Insertion-sort）-时间复杂度：o-n-2"><a href="#插入排序（Insertion-sort）-时间复杂度：o-n-2" class="headerlink" title="插入排序（Insertion sort） 时间复杂度：o(n^2)"></a>插入排序（Insertion sort） 时间复杂度：o(n^2)</h2><p><strong>假设你在玩扑克牌，你要把牌按从小到大排列。当你拿到第一张牌，那它就是最小的，把它放在第一个位置上。当你拿到第二张牌，你和第一张牌做比较，如果它大于第一张牌，则把它放到第一张牌的右边，反之则放到左边。当你拿到第三张牌，你拿它和第二个位置上的牌比较，然后如有必要需要和第一个位置上的牌比较。然后是第四张牌……最后，一手牌就按从小到大的顺序排好了。这就是插入排序。 在其实现过程使用双层循环，外层循环对除了第一个元素之外的所有元素，内层循环对当前元素前面有序表进行待插入位置查找，并进行移动</strong></p><p><img src="/static/imgs/algorithm/insertion_sort.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(li)):  <span class="comment">#i为发到手上的牌</span></span><br><span class="line">        tmp = li[i] </span><br><span class="line">        j = i - <span class="number">1</span>   <span class="comment">#手上的牌</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:   <span class="comment">#将大的牌向右移</span></span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[j+<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 冒泡排序 </tag>
            
            <tag> 插入排序 </tag>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用查找算法</title>
      <link href="/2022/04/26/%E5%B8%B8%E7%94%A8%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
      <url>/2022/04/26/%E5%B8%B8%E7%94%A8%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="常用查找算法"><a href="#常用查找算法" class="headerlink" title="常用查找算法"></a>常用查找算法</h1><h2 id="顺序查找-Linear-Search-时间复杂度：o-n"><a href="#顺序查找-Linear-Search-时间复杂度：o-n" class="headerlink" title="顺序查找(Linear Search)  时间复杂度：o(n)"></a>顺序查找(Linear Search)  时间复杂度：o(n)</h2><p><strong>顺序查找也叫线性查找，从列表第一个元素开始，顺序进行搜索，知道找到元素或搜索到列表最后一个元素为止。</strong></p><p><img src="/static/imgs/algorithm/linear_search.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_search</span>(<span class="params">li,val</span>):</span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">        <span class="keyword">if</span> v == val:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="二分查找法（binary-search）-时间复杂度：O（log2n）"><a href="#二分查找法（binary-search）-时间复杂度：O（log2n）" class="headerlink" title="二分查找法（binary_search） 时间复杂度：O（log2n）"></a>二分查找法（binary_search） 时间复杂度：O（log2n）</h2><p><strong>在一个已知有序队列中找出与给定关键字相同的数的具体位置。原理是分别定义三个指针low、high、mid分别指向待查元素所在范围的下界和上界以及区间的中间位置，即mid＝（low＋high）&#x2F;2，让关键字与mid所指的数比较，若等则查找成功并返回mid，若关键字小于mid所指的数则high&#x3D;mid-1，否则low&#x3D;mid+1，然后继续循环直到找出或找不到为止。</strong></p><p><img src="/static/imgs/algorithm/binary_search.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">li,val</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> right &gt;= left:    <span class="comment">#候选区有值</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:  <span class="comment">#候选区在mid左边</span></span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment">#li[mid] &lt; val 候选区在mid右边</span></span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 顺序查找 </tag>
            
            <tag> 二分查找法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2022/04/26/%E9%80%92%E5%BD%92/"/>
      <url>/2022/04/26/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p><strong>程序调用自身的编程技巧称为递归（ recursion）。递归作为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。</strong></p><p><img src="/static/imgs/algorithm/recursion2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">recursion</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        recursion(i-<span class="number">1</span>)</span><br><span class="line">recursion(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出结果：1、2、3</span></span><br></pre></td></tr></table></figure><p><img src="/static/imgs/algorithm/recursion.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">recursion2</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        recursion2(i-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># 输出结果：3、2、1</span></span><br></pre></td></tr></table></figure><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><p><strong>法国数学家爱德华·卢卡斯曾编写过一个印度的古老传说：在世界中心贝拿勒斯（在印度北部）的圣庙里，一块黄铜板上插着三根宝石针。印度教的主神梵天在创造世界的时候，在其中一根针上从下到上地穿好了由大到小的64片金片，这就是所谓的汉诺塔。不论白天黑夜，总有一个僧侣在按照下面的法则移动这些金片：一次只移动一片，不管在哪根针上，小片必须在大片上面。僧侣们预言，当所有的金片都从梵天穿好的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，而梵塔、庙宇和众生也都将同归于尽。</strong></p><p><img src="/static/imgs/algorithm/hanoi2.gif"></p><ul><li>1、把n-1个盘子从a通过c移动到b</li><li>2、把第n个盘从a移动到c</li><li>3、把n-1个盘子从b通过a移动到c</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hanoi</span>(<span class="params">n,a,b,c</span>):</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        hanoi(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">        <span class="built_in">print</span>((<span class="string">&#x27;moving %s from %s&#x27;</span>),(a,c))</span><br><span class="line">        hanoi(n-<span class="number">1</span>,b,a,c)</span><br><span class="line"></span><br><span class="line">hanoi(<span class="number">3</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构&amp;算法简介</title>
      <link href="/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p><strong>算法是一组完成任务的指令。</strong></p><p><img src="/static/imgs/algorithm/o.png"></p><ul><li><p>时间复杂度（Time complexity)</p><p>在计算机科学中，算法的时间复杂度是一个函数，它定性描述该算法的运行时间。</p></li><li><p>空间复杂度(Space Complexity)</p><p>在计算机科学中，一个算法或程序的空间复杂度定性地描述该算法或程序运行所需要的存储空间大小。</p></li></ul><h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><ul><li><strong>检索：</strong>检索就是在数据结构里查找满足一定条件的节点。一般是给定一个某字段的值，找具有该字段值的节点。</li><li><strong>插入：</strong>往数据结构中增加新的节点。</li><li><strong>删除：</strong>把指定的结点从数据结构中去掉。</li><li><strong>更新：</strong>改变指定节点的一个或多个字段的值。</li><li><strong>排序：</strong>把节点按某种指定的顺序重新排列。例如递增或递减。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><strong>数据结构是指相互之间存在着一种或多种关系的数据元素的集合和该集合中数据元素之间的关系组成。</strong></p><p>简单的来说，数据结构就是设计数据以任何一种方式组织并存储在计算机中。比如：列表、集合与字典等都是一种数据结构。</p><p><strong>N.Wirth：”程序&#x3D;数据结构+算法”</strong></p><h3 id="数据结构的分类"><a href="#数据结构的分类" class="headerlink" title="数据结构的分类"></a>数据结构的分类</h3><p><strong>数据结构按照其逻辑结构可分为线性结构、树结构、图结构</strong></p><ul><li>线性结构：数据结构中的元素存在一对一的互相关系</li><li>树结构：数据结构的元素存在一对多的相互关系</li><li>图结构：数据结构中的元素存在多对多的相互关系</li></ul><h3 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h3><ul><li><strong>栈（Stack）：</strong>栈是一种特殊的线性表，它只能在一个表的一个固定端进行数据结点的插入和删除操作。</li><li><strong>队列（Queue）：</strong>队列和栈类似，也是一种特殊的线性表。和栈不同的是，队列只允许在表的一端进行插入操作，而在另一端进行删除操作。</li><li><strong>数组（Array）：</strong>数组是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。</li><li><strong>链表（Linked List）：</strong>链表是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。</li><li><strong>树（Tree）：</strong>树是典型的非线性结构，它是包括，2 个结点的有穷集合 K。</li><li><strong>图（Graph）：</strong>图是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。</li><li><strong>堆（Heap）：</strong>堆是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。</li><li><strong>散列表（Hash table）：</strong>散列表源自于散列函数(Hash function)，其思想是如果在结构中存在关键字和T相等的记录，那么必定在F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行为型模式</title>
      <link href="/2022/04/25/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/25/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><p><strong>行为模式负责对象间的高效沟通和职责委派。</strong></p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p><strong>亦称：</strong> 职责链模式、命令链、CoR、Chain of Command、Chain of Responsibility</p><p><img src="/static/imgs/design_patterns/chain-of-responsibility-comic-1.png"></p><center ><p style="color:#A8A8A8">给技术支持打电话时你可能得应对多名接听人员</p> </center> <ul><li>内容：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，知道有一个对象处理它为止。</li><li>角色：<ul><li>抽象处理者（Handler）</li><li>具体处理者（Concrete Handler）</li><li>客户端（Client）</li></ul></li><li>适用场景：<ul><li>有多个对象可以处理一个请求，哪个对象处理由运行是决定</li><li>在不明确接收者的情况下，向多个对象中的一个提交一个请求</li></ul></li><li>优点：<ul><li>降低耦合度：一个对象无需知道是其他哪一个对象处理其请求</li></ul></li></ul><p>​<strong>责任链模式结构</strong></p><p><img src="/static/imgs/design_patterns/CoR_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象处理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_leave</span>(<span class="params">self, day</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体处理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneralManager</span>(<span class="title class_ inherited__">Handler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_leave</span>(<span class="params">self, day</span>):</span><br><span class="line">        <span class="keyword">if</span> day &lt;= <span class="number">10</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;总经理准假%d天&#x27;</span> % day)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;你还是辞职吧！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DepartmentManager</span>(<span class="title class_ inherited__">Handler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__<span class="built_in">next</span> = GeneralManager()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_leave</span>(<span class="params">self, day</span>):</span><br><span class="line">        <span class="keyword">if</span> day &lt;= <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;部门经理准假%d天&#x27;</span> % day)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__<span class="built_in">next</span>.handle_leave(day)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProjectDirector</span>(<span class="title class_ inherited__">Handler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__<span class="built_in">next</span> = DepartmentManager()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_leave</span>(<span class="params">self, day</span>):</span><br><span class="line">        <span class="keyword">if</span> day &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;项目主管准假%d天&#x27;</span> % day)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__<span class="built_in">next</span>.handle_leave(day)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">handler = ProjectDirector()</span><br><span class="line">handler.handle_leave(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p><strong>亦称：</strong> 事件订阅者、监听者、Event-Subscriber、Listener、Observer</p><p><img src="/static/imgs/design_patterns/observer-comic.png"></p><center ><p style="color:#A8A8A8">杂志和报纸订阅</p> </center><ul><li>内容：定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都得到通知并被自动更新。观察者模式又称“发布-订阅”模式</li><li>角色：<ul><li>抽象主题（Subject）</li><li>具体主题（Concrete Subject） — 发布者</li><li>抽象观察者（Observer）</li><li>具体观察者（Concrete Observer）—订阅者</li></ul></li><li>适用场景：<ul><li>当一个抽象模型有两方面，其中一个方面依赖于另一个方面。将这两者封装在独立对象中以使它们可以各自独立地改变和复用。</li><li>当一个对象的改变需要同时改变其它对象，而不知道具体有多少对象有待改变。</li><li>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之，你不希望这些对象是紧密耦合的。</li></ul></li><li>优点：<ul><li>目标和观察者之间的抽象耦合最小</li><li>支持广播通信</li></ul></li></ul><p><strong>观察者模式结构</strong></p><p><img src="/static/imgs/design_patterns/observer-comic-structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象订阅者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="comment"># notice是一个Notice类的对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, notice</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象发布者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Notice</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.observer = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attach</span>(<span class="params">self, obs</span>):</span><br><span class="line">        self.observer.append(obs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detach</span>(<span class="params">self, obs</span>):</span><br><span class="line">        self.observer.remove(obs)</span><br><span class="line">    <span class="comment"># 推送</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> obs <span class="keyword">in</span> self.observer:</span><br><span class="line">            obs.update(self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体发布者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StaffNotice</span>(<span class="title class_ inherited__">Notice</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, company_info = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.__company_info = company_info</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">company_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__company_info</span><br><span class="line"></span><br><span class="line"><span class="meta">    @company_info.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">company_info</span>(<span class="params">self, info</span>):</span><br><span class="line">        self.__company_info = info</span><br><span class="line">        <span class="comment"># 推送</span></span><br><span class="line">        self.notify()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体订阅者        </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Staff</span>(<span class="title class_ inherited__">Observer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.company_info = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, notice</span>):</span><br><span class="line">        self.company_info = notice.company_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">notice = StaffNotice(<span class="string">&quot;初始化公司&quot;</span>)</span><br><span class="line">s1 = Staff()</span><br><span class="line">s2 = Staff()</span><br><span class="line">notice.attach(s1)</span><br><span class="line">notice.attach(s2)</span><br><span class="line">notice.company_info = <span class="string">&#x27;明天公司放假！！！&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1.company_info)</span><br><span class="line"><span class="built_in">print</span>(s2.company_info)</span><br></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p><strong>亦称：</strong> Strategy</p><p><img src="/static/imgs/design_patterns/strategy-comic-1.png"></p><center ><p style="color:#A8A8A8">各种前往机场的出行策略</p> </center> <ul><li>内容：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</li><li>角色：<ul><li>抽象策略（Strategy）</li><li>具体策略（Concrete Strategy ）</li><li>上下文（Context）</li></ul></li><li>优点：<ul><li>定义了一系列可重用的算法和行为</li><li>消除了一些条件语句</li><li>可以提供相同行为的不同实现</li></ul></li><li>缺点：<ul><li>客户必须了解不同的策略</li></ul></li></ul><p><strong>策略模式结构</strong></p><p><img src="/static/imgs/design_patterns/strategy_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象策略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Strategy</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体策略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FastStrategy</span>(<span class="title class_ inherited__">Strategy</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用较快的策略处理%s&quot;</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SlowStrategy</span>(<span class="title class_ inherited__">Strategy</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用较慢的策略处理%s&quot;</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, strategy, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.strategy = strategy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_strategy</span>(<span class="params">self, strategy</span>):</span><br><span class="line">        self.strategy = strategy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_strategy</span>(<span class="params">self</span>):</span><br><span class="line">        self.strategy.execute(self.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">data = <span class="string">&#x27;[...]&#x27;</span></span><br><span class="line">s1 = FastStrategy()</span><br><span class="line">s2= SlowStrategy()</span><br><span class="line"></span><br><span class="line">context = Context(s1,data)</span><br><span class="line">context.do_strategy()</span><br><span class="line">context.set_strategy(s2)</span><br><span class="line">context.do_strategy()</span><br></pre></td></tr></table></figure><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p><strong>亦称：</strong> Template Method</p><p><img src="/static/imgs/design_patterns/Template_Method.png"></p><center ><p style="color:#A8A8A8">可对典型的建筑方案进行微调以更好地满足客户需求</p> </center> <ul><li>内容：定义一个操作中的算法的骨干，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li><li>角色：<ul><li>抽象类（Abstract Class）：定义抽象的原子操作（钩子操作）；实现一个模板方法作为算法的骨架。</li><li>具体类（Concrete Class）：实现原子操作</li></ul></li><li>适用场景：<ul><li>一次性实现一个算法的不变的部分</li><li>各个子类中的公共行为应该被提取出来并集中到一个公共父类中以避免代码重复</li><li>控制子类扩展</li></ul></li></ul><p><strong>模板方法模式结构</strong></p><p><img src="/static/imgs/design_patterns/template_method_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">repaint</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>): <span class="comment"># 原子操作/钩子操作</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):  <span class="comment"># 模板方法</span></span><br><span class="line">        self.start()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.repaint()</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">Window</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg</span>):</span><br><span class="line">        self.msg = msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;窗口开始运行&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;窗口结束运行&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">repaint</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端        </span></span><br><span class="line">MyWindow(<span class="string">&quot;Hello...&quot;</span>).run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构型模式</title>
      <link href="/2022/04/24/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/24/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="结构型模式（Structural-Patterns）"><a href="#结构型模式（Structural-Patterns）" class="headerlink" title="结构型模式（Structural Patterns）"></a>结构型模式（Structural Patterns）</h1><p><strong>结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。</strong></p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p><strong>亦称：</strong> 封装器模式、Wrapper、Adapter</p><p><img src="/static/imgs/design_patterns/adapter.png"></p><ul><li>内容：将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li><li>两种实现方式：<ul><li>类适配器：使用多继承</li><li>对象适配器：使用组合</li></ul></li><li>角色：<ul><li>目标接口（Target）</li><li>待适配的类（Adaptee）</li><li>适配器（Adapter）</li></ul></li><li>适用场景：<ul><li>想使用一个已经存在的类，而它的接口不符合你的要求。</li><li>（对象适配器）想使用一些已经存在的子类，但不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</li></ul></li></ul><p><strong>适配器模式结构</strong></p><p><img src="/static/imgs/design_patterns/adapter_structure.png"></p><p><strong>类适配器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WechatPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 待适配的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankPay</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;银联支付%d&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类适配器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewBankPay</span>(Payment,BankPay):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        self.cost(money)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;银联支付%d&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line">p = NewBankPay()</span><br><span class="line">p.pay(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p><strong>对象适配器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WechatPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 待适配器的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankPay</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;银联支付%d&#x27;</span> % money)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 待适配器的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplePay</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;苹果支付了%d&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象适配器        </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentAdapter</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, payment</span>):</span><br><span class="line">        self.payment = payment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        self.payment.cost(money)</span><br><span class="line"></span><br><span class="line">p = PaymentAdapter(BankPay())</span><br><span class="line">p.pay(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="桥模式"><a href="#桥模式" class="headerlink" title="桥模式"></a>桥模式</h2><p><strong>亦称：</strong> Bridge</p><p><img src="/static/imgs/design_patterns/bridge.png"></p><center ><p style="color:#A8A8A8">创建跨平台应用程序的一种方法</p> </center> <ul><li>内容：将一个事物的两个维度分离，使其都可以独立地变化。</li><li>角色：<ul><li>抽象（Abstraction）</li><li>细化抽象（Refined Abstraction）</li><li>实现者（Implementor）</li><li>具体实现者（Concrete Implementor）</li></ul></li><li>应用场景：<ul><li>当事物有两个维度上的表现，两个维度都可能扩展时。</li></ul></li><li>优点：<ul><li>抽象和实现相分离</li><li>优秀的扩展能力</li></ul></li></ul><p><strong>桥模式结构</strong></p><p><img src="/static/imgs/design_patterns/structure.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color</span>):</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 细化抽象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    name = <span class="string">&#x27;长方形&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 长方形的具体逻辑 ....</span></span><br><span class="line">        self.color.paint(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    name = <span class="string">&#x27;圆形&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 圆形的具体逻辑 ....</span></span><br><span class="line">        self.color.paint(self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体实现者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Red</span>(<span class="title class_ inherited__">Color</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self, shape</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;红色的&#x27;</span> + shape.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Blue</span>(<span class="title class_ inherited__">Color</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self, shape</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;蓝色的&#x27;</span> + shape.name)</span><br><span class="line"></span><br><span class="line">Rectangle(Red()).draw()</span><br><span class="line">Circle(Blue()).draw()</span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p><strong>亦称：</strong> 对象树、Object Tree、Composite</p><p><img src="/static/imgs/design_patterns/composite.png"></p><center ><p style="color:#A8A8A8">组合模式以递归方式处理对象树中的所有项目</p> </center> <ul><li>内容：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对组合对象的使用具有一致性。</li><li>角色：<ul><li>抽象组件（Component）</li><li>叶子组件（Leaf）</li><li>复合组件（Composite）</li><li>客户端（Client）</li></ul></li><li>适用场景：<ul><li>表示对象的“部分-整体”层次结构（特别是结构是递归的）</li><li>希望用户忽略组合对象与单个对象的不同，用户统一地使用组合结构中的所有对象</li></ul></li><li>优点：<ul><li>定义了包含基本对象和组合对象的类层次结构</li><li>简化客户端代码，即客户端可以一致地使用组合对象和单个对象</li><li>更容易增加新类型的组件</li></ul></li></ul><p><strong>组合模式结构</strong></p><p><img src="/static/imgs/design_patterns/composite_structure.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graphic</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 叶子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">Graphic</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;点(%s, %s)&#x27;</span> % (self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(self))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 叶子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>(<span class="title class_ inherited__">Graphic</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p1, p2</span>):</span><br><span class="line">        self.p1 = p1</span><br><span class="line">        self.p2 = p2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线段[%s, %s]&quot;</span> % (self.p1, self.p2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(self))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复合组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pitcture</span>(<span class="title class_ inherited__">Graphic</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iterable</span>):</span><br><span class="line">        self.children = []</span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> iterable:</span><br><span class="line">            self.add(g)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, graphic</span>):</span><br><span class="line">        self.children.append(graphic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---- 复合图形 ----&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> self.children:</span><br><span class="line">            g.draw()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---- 复合图形 ----&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">Point(<span class="number">1</span>,<span class="number">1</span>).draw()</span><br><span class="line">Line((<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">7</span>)).draw()</span><br><span class="line">Pitcture([Line((<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">7</span>)),Point(<span class="number">1</span>,<span class="number">1</span>)]).draw()</span><br></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p><strong>亦称：</strong> Facade</p><p><img src="/static/imgs/design_patterns/facade.png"></p><center ><p style="color:#A8A8A8">电话购物</p> </center> <ul><li>内容：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高级层接口，这个接口使得这一子系统更加容易使用。</li><li>角色：<ul><li>外观（facade）</li><li>子系统类（subsystem classes）</li></ul></li><li>优点：<ul><li>减少系统相互依赖</li><li>提高了灵活性</li><li>提高了安全性</li></ul></li></ul><p><strong>外观模式结构</strong></p><p><img src="/static/imgs/design_patterns/facade_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类系统</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cpu</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;CPU开始运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;CPU停止运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disk</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;硬盘开始运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;硬盘停止运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;内存开始工作&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;内存停止工作&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外观</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.cpu = Cpu()</span><br><span class="line">        self.disk = Disk()</span><br><span class="line">        self.memory = Memory()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.cpu.run()</span><br><span class="line">        self.disk.run()</span><br><span class="line">        self.memory.run()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        self.cpu.stop()</span><br><span class="line">        self.disk.stop()</span><br><span class="line">        self.memory.stop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">computer = Computer()</span><br><span class="line">computer.run()</span><br><span class="line">computer.stop()</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p><strong>亦称：</strong> Proxy</p><p><img src="/static/imgs/design_patterns/proxy_solution.png"></p><center ><p style="color:#A8A8A8">代理将自己伪装成数据库对象， 可在客户端或实际数据库对象不知情的情况下处理延迟初始化和缓存查询结果的工作。</p> </center> <ul><li>内容：为其他对象提供一种代理以控制对这个对象的访问。</li><li>应用场景：<ul><li>远程代理：为远程对象提供代理</li><li>虚代理：根据需要创建很大的对像</li><li>保护代理：控制对原始对象的访问，用于对象有不同访问权限时</li></ul></li><li>角色：<ul><li>抽象实体（Subject）</li><li>实体（RealSubject）</li><li>代理（Proxy）</li></ul></li><li>优点：<ul><li>远程代理：可以隐藏对象位于远程地址空间的事实</li><li>虚代理：可以进行优化，例如根据要求创建对象</li><li>保护代理：允许在访问一个对象时有一些附加的内部处理</li></ul></li></ul><p><strong>代理模式结构</strong></p><p><img src="/static/imgs/design_patterns/proxy_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象实体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span>(<span class="title class_ inherited__">Subject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;初始化RealSubject class.&#x27;</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        f = <span class="built_in">open</span>(self.filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VirtualProxy</span>(<span class="title class_ inherited__">Subject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.subj = <span class="literal">None</span></span><br><span class="line">        self.filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.subj:</span><br><span class="line">            self.subj = RealSubject(self.filename)</span><br><span class="line">        <span class="keyword">return</span> self.subj.get_content()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.subj:</span><br><span class="line">            self.subj = RealSubject(self.filename)</span><br><span class="line">        <span class="keyword">return</span> self.subj.set_content(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保护代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProtectedProxy</span>(<span class="title class_ inherited__">Subject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.subj = RealSubject(filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.subj.get_content()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">&#x27;无写入权限&#x27;</span>)</span><br><span class="line"></span><br><span class="line">virtual = VirtualProxy(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = virtual.get_content()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line">virtual.set_content(<span class="string">&#x27;你好世界！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">protected = ProtectedProxy(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = protected.get_content()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line">protected.set_content(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建型模式</title>
      <link href="/2022/04/21/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/21/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="创建型模式（Creational-Design-Patterns）"><a href="#创建型模式（Creational-Design-Patterns）" class="headerlink" title="创建型模式（Creational Design Patterns）"></a>创建型模式（Creational Design Patterns）</h1><p><strong>创建型模式提供创建对象的机制，增加已有代码的灵活性和可复用性。</strong></p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li><p>内容：结构不直接向客户端暴露对象创建的实现细节，而是通过一个工厂类负责创建产品类的实列。</p></li><li><p>角色：</p><ul><li><p>工厂角色（Creator）</p></li><li><p>抽象产品角色（Product）</p></li><li><p>具体产品角色（Concrete Product）</p></li></ul></li><li><p>优点</p><ul><li>隐藏了对象创建的实现细节</li><li>客户端不需要修改代码</li></ul></li><li><p>缺点</p><ul><li>违反了单一职责原则，将创建逻辑集中到一个工厂类里面</li><li>当添加新产品时，需要修改工厂类代码，违反了开闭原则</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 具体产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, isHuabei = <span class="literal">False</span></span>):</span><br><span class="line">        self.isHuabei = isHuabei</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">if</span> self.isHuabei:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝花呗支付了%d元&#x27;</span> % money)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self,payment_method</span>):</span><br><span class="line">        <span class="keyword">if</span> payment_method == <span class="string">&#x27;Alipay&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Alipay()</span><br><span class="line">        <span class="keyword">elif</span> payment_method == <span class="string">&#x27;Wechatpay&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Wechatpay()</span><br><span class="line">        <span class="keyword">elif</span> payment_method == <span class="string">&#x27;Huabei&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Alipay(isHuabei=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;No such payment named % s&#x27;</span> % payment_method)</span><br><span class="line"></span><br><span class="line">PaymentFactory().create_payment(<span class="string">&#x27;Huabei&#x27;</span>).pay(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><strong>亦称：</strong> 虚拟构造函数、Virtual Constructor、Factory Method</p><p><img src="/static/imgs/design_patterns/factory_method1.png"></p><ul><li>内容：定义一个用于创建对象的接口（工厂接口），让子类决定实例化哪一个产品类。</li><li>角色：<ul><li>抽象工厂角色（Creator）</li><li>具体工厂角色（Concrete Creator）</li><li>抽象产品角色（Product）</li><li>具体产品角色（Concrete Product）</li></ul></li><li>优点：<ul><li>每个具体产品都对应一个具体工厂类，不需要修改工厂类的代码</li><li>隐藏了对象创建的实现细节</li></ul></li><li>缺点<ul><li>每增加一个具体产品类，就必须增加一个相应的具体工厂类</li></ul></li></ul><p><strong>工厂方法结构</strong></p><p><img src="/static/imgs/design_patterns/factory_method.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 具体产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, isHuabei = <span class="literal">False</span></span>):</span><br><span class="line">        self.isHuabei = isHuabei</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">if</span> self.isHuabei:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝花呗支付了%d元&#x27;</span> % money)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentFactory</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 具体工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlipayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Alipay()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WechatpayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Wechatpay()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuabeipayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Alipay(isHuabei=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">pay = WechatpayFactory().create_payment()</span><br><span class="line">pay.pay(<span class="number">500</span>)</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>亦称：</strong> Abstract Factory</p><p><img src="/static/imgs/design_patterns/abstract-factory.png"></p><ul><li>内容：定义一个工厂类接口，让工厂子类来创建一系列相关或相互依赖的对象</li><li>例如：生产一部手机，需要手机壳、CPU、操作系统三类对象进行组装，其中每类对象都有不同的种类。对每个具体工厂，分别生产一部手机所需要的三个对象。</li><li>相比工厂方法模式，抽象工厂模式中的每个具体工厂都生产一套产品。</li><li>优点：<ul><li>将客户端与类的具体实现相分离</li><li>每个工厂创建了一个完整的产品系列，使得易于交换产品系列</li><li>有利于产品的一致性（即产品之间的约束关系）</li></ul></li><li>缺点：<ul><li>难以支持新种类的（抽象）产品</li></ul></li></ul><p><strong>抽象工厂结构</strong></p><p><img src="/static/imgs/design_patterns/abstract_factory_method.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----抽象产品----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneShell</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneCPU</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneOS</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----具体的产品----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;普通小手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BigShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;普通大手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;苹果手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnapDragonCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;骁龙CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuaweiCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;华为CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;苹果CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndroidOS</span>(<span class="title class_ inherited__">PhoneOS</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;安卓系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleOS</span>(<span class="title class_ inherited__">PhoneOS</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ios系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- 抽象工厂----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneFactory</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----具体工厂----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleFactory</span>(<span class="title class_ inherited__">PhoneFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleShell()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleCPU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleOS()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuaweiFactory</span>(<span class="title class_ inherited__">PhoneFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> BigShell()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> HuaweiCPU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AndroidOS()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shell, cpu, os</span>):</span><br><span class="line">        self.shell = shell</span><br><span class="line">        self.cpu = cpu</span><br><span class="line">        self.os = os</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_phone_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Phone INFO：&#x27;</span>)</span><br><span class="line">        self.shell.show_shell()</span><br><span class="line">        self.cpu.show_cpu()</span><br><span class="line">        self.os.show_os()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_phone</span>(<span class="params">factory</span>):</span><br><span class="line">    shell = factory.make_shell()</span><br><span class="line">    cpu = factory.make_cpu()</span><br><span class="line">    os = factory.make_os()</span><br><span class="line">    <span class="keyword">return</span> Phone(shell, cpu, os)</span><br><span class="line"></span><br><span class="line">apple = make_phone(AppleFactory())</span><br><span class="line">apple.show_phone_info()</span><br></pre></td></tr></table></figure><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p><strong>亦称：</strong> 生成器模式、Builder</p><p><img src="/static/imgs/design_patterns/Builder01.png"></p><ul><li>内容：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li><li>角色：<ul><li>抽象建造者（Builder）</li><li>具体建造者（Concrete Builder）</li><li>指挥者（Director）</li><li>产品（Product）</li></ul></li><li>建造者模式与抽象工厂模式相似，也用来创建复杂对象。主要区别是建造者模式着重一步步构建一个复杂对象，而抽象工厂模式着重于多个系列的产品对象。</li><li>优点：<ul><li>隐藏了一个产品的内部结构和装配过程</li><li>将构造代码与表示代码分开</li><li>可以对构造过程进行更精细的控制</li></ul></li></ul><p><strong>建造者模式结构</strong></p><p><img src="/static/imgs/design_patterns/builder.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, body=<span class="literal">None</span>, face=<span class="literal">None</span>, arm=<span class="literal">None</span>, leg=<span class="literal">None</span></span>):</span><br><span class="line">        self.body = body</span><br><span class="line">        self.face = face</span><br><span class="line">        self.arm = arm</span><br><span class="line">        self.leg = leg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s,%s,%s,%s&#x27;</span> % (self.body,self.face,self.arm,self.leg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayerBuilder</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_body</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_face</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_arm</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_leg</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlBuilder</span>(<span class="title class_ inherited__">PlayerBuilder</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.player = Player()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_body</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.body(<span class="string">&#x27;苗条的身材&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_face</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.face(<span class="string">&#x27;漂亮的脸蛋&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_arm</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.arm(<span class="string">&#x27;细细的手臂&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_leg</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.leg(<span class="string">&#x27;大长腿&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonsterBuilder</span>(<span class="title class_ inherited__">PlayerBuilder</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.player = Player()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_body</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.body = <span class="string">&#x27;魁梧的身材&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_face</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.face = <span class="string">&#x27;猴脸&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_arm</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.arm= <span class="string">&#x27;肥大&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_leg</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.leg= <span class="string">&#x27;粗壮&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指挥者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Playerdirector</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">builder_player</span>(<span class="params">self, builder</span>):</span><br><span class="line">        builder.build_body()</span><br><span class="line">        builder.build_face()</span><br><span class="line">        builder.build_leg()</span><br><span class="line">        builder.build_arm()</span><br><span class="line">        <span class="keyword">return</span> builder.player</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">builder = MonsterBuilder()</span><br><span class="line">director = Playerdirector()</span><br><span class="line">p = director.builder_player(builder)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><img src="/static/imgs/design_patterns/singleton-comic.png"></p><center ><p style="color:#A8A8A8">客户端甚至可能没有意识到它们一直都在使用同一个对象</p> </center> <ul><li>内容：保证一个类只有一个实例，并提供一个访问它的全局访问点。</li><li>角色：<ul><li>单列（Singleton）</li></ul></li><li>优点：<ul><li>对唯一实列的受控访问</li><li>单列相当于全局变量，但防止了命名空间被污染</li></ul></li></ul><p><strong>单例模式结构</strong></p><p><img src="/static/imgs/design_patterns/singleton.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            cls._instance = <span class="built_in">super</span>(Singleton, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a</span>):</span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line">A = MyClass(<span class="number">10</span>)</span><br><span class="line">B = MyClass(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(A.a, B.a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(A),<span class="built_in">id</span>(B))</span><br></pre></td></tr></table></figure><h2 id="创建型模式小结"><a href="#创建型模式小结" class="headerlink" title="创建型模式小结"></a>创建型模式小结</h2><ul><li>抽象工厂模式和建造者模式相比于简单工厂模式和工厂方法模式而言更灵活也更加复杂。</li><li>通常情况下、设计以简单工厂模式或工厂方法模式开始，当你发现设计需要更大的灵活性时，则像更复杂的设计模式演化。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式-Design-Patterns"><a href="#设计模式-Design-Patterns" class="headerlink" title="设计模式(Design Patterns)"></a>设计模式(Design Patterns)</h2><ul><li><p>设计模式：对<strong>软件设计</strong>中普遍存在（反复出现）的各种问题，所提出的解决方案。每一个设计模式系统的命名、解释和评价了<strong>面向对象系统</strong>中一个重要的和重复出现的设计。</p></li><li><p>”四人帮“（Gan of Four, GoF）：</p><ul><li>Erich Gamma,Richard Helm,Ralph Johnson,John Vlissides</li></ul></li><li><p>《设计模式：可复用面向对象软件的基础》</p></li></ul><h2 id="面向对象-Object-Oriented-Programming"><a href="#面向对象-Object-Oriented-Programming" class="headerlink" title="面向对象(Object Oriented Programming)"></a>面向对象(Object Oriented Programming)</h2><h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><ul><li>封装：在Class内部，可以有属性和方法，二外部代码可以通过直接调用实列变量的方法来操作数据，隐藏内部的复杂逻辑。</li><li>继承：在OOP程序设计中，定义一个class的时候，可以从某个现有的class继承，新的class称为子类，而被继承的class称为父类、基类。</li><li>多态：当子类和父类存在相同的方法时，子类的方法覆盖父类的方法，在代码运行时，总是会调用子类的方法。</li></ul><h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h3><p>接口：若干抽象方法的集合。</p><ul><li>作用：限制实现接口的类必须按照接口给定的调用方法实现，这些方法；对高层模块隐藏了类的内部实现。</li></ul><p><strong>继承实现接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><p><strong>抽象类(abstract)实现接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="comment"># abstract class </span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><h3 id="组合优于继承"><a href="#组合优于继承" class="headerlink" title="组合优于继承"></a>组合优于继承</h3><p>继承可能是类之间最明显、最简单的代码复用方式。不过继承这件事通常只有在程序中已包含大量类,且修改任何东西都非常困难时才会引起关注。</p><ul><li>子类不能减少超类的接口</li><li>在重写方法时，需要确保新行为与其基类中的版本兼容</li><li>继承打破了超类的封装</li><li>子类与超类紧密耦合</li><li>通过继承复用代码可能导致平行继承体系的产生</li></ul><p><img src="/static/imgs/design_patterns/combination_inherit.png"></p><p><strong>继承：在多个维度上扩展一个类可能会导致子类组合的数量暴增。</strong></p><p><img src="/static/imgs/design_patterns/combination_inherit2.png"></p><p><strong>组合：将不同“维度”的功能抽取到各自的类层次结构中。</strong></p><h2 id="面向对象设计SOLID原则"><a href="#面向对象设计SOLID原则" class="headerlink" title="面向对象设计SOLID原则"></a>面向对象设计SOLID原则</h2><h3 id="开放封闭原则（Open-Closed-Principle）"><a href="#开放封闭原则（Open-Closed-Principle）" class="headerlink" title="开放封闭原则（Open Closed Principle）"></a>开放封闭原则（Open Closed Principle）</h3><p>一个软件实体如类、模块和函数应该<strong>对扩展开放，对修改闭合</strong>。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><h3 id="里氏替换原则（Liskov-Substitution-principle）"><a href="#里氏替换原则（Liskov-Substitution-principle）" class="headerlink" title="里氏替换原则（Liskov Substitution principle）"></a>里氏替换原则（Liskov Substitution principle）</h3><p>所有引用父类的地方必须能<strong>透明地使用其子类的对象</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类和父类方法内部实现逻辑可能不同，但参数和返回值类型都是一致的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_name</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPUser</span>(<span class="title class_ inherited__">User</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_name</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><h3 id="依赖倒置原则（Dependence-Inversion-Principle）"><a href="#依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependence Inversion Principle）"></a>依赖倒置原则（Dependence Inversion Principle）</h3><p>高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，<strong>要面向接口编程，而不是面向实现编程</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="comment"># abstract class </span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 细节</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><h3 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h3><p>使用多个专门的接口，而不使用单一的总接口，即<strong>客户端不应该依赖那些它不需要的接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LandAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaterAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SkyAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>(<span class="title class_ inherited__">LandAnimal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;老虎在走路...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frag</span>(LandAnimal,WaterAnimal):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;青蛙在走路...&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;青蛙在游泳...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">frag = Frag()</span><br><span class="line">frag.swim()</span><br><span class="line">frag.walk()</span><br></pre></td></tr></table></figure><h3 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h3><p>不要存在多于一个导致类变更的原因。通俗的说，即<strong>一个类只负责一项职责</strong>。</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p><strong>提供创建对象的机制，增加已有代码的灵活性和可复用性。</strong></p><ul><li>工厂方法模式</li><li>抽象工厂模式</li><li>创建者模式</li><li>原型模式</li><li>单列模式</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p><strong>如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。</strong></p><ul><li>适配器模式</li><li>桥模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p><strong>负责对象间高效沟通和职责委派。</strong></p><ul><li>解释器模式</li><li>责任链模式</li><li>命令模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>访问者模式</li><li>模板方法模式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python文件操作</title>
      <link href="/2022/04/18/Python%E6%96%87%E4%BB%B6/"/>
      <url>/2022/04/18/Python%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/imgs/python/python_file_operation2.jpg"></p><p>读写文件是最常见IO操作。Python内置了读写文件的函数。</p><p>在磁盘上读写文件的功能都是由操作系统提供的接口，操作系统是不允许普通的程序直接操作磁盘，所以读写文件就是请求操作系统打开一个文件对象，然后通过系统提供的接口从这个文件对像中读写操作。</p><h2 id="文件操作流程"><a href="#文件操作流程" class="headerlink" title="文件操作流程"></a>文件操作流程</h2><ul><li><p>1、获取操作系统文件对象</p></li><li><p>2、读写操作</p></li><li><p>3、关闭操作系统文件对象</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">res = f.read()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="open函数"><a href="#open函数" class="headerlink" title="open函数"></a>open函数</h3><p>open()是python内置函数，它会返回一个操作系统文件对象，这个对象提供了 <code>read()</code>、<code>write()</code>、<code>close()</code>等方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;文件路径&#x27;</span>,<span class="string">&#x27;文件模式&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 打开操作系统文件对象</span></span><br></pre></td></tr></table></figure><h3 id="mode模式"><a href="#mode模式" class="headerlink" title="mode模式"></a>mode模式</h3><ul><li><p>t（默认）：文本模式，只能针对文本文件，读写都是<code>str</code>为单位的，必须指定<code>encoding</code>参数</p><ul><li><p>rt ：只能读取；文件不存在报错；光标移动到行首</p></li><li><p>wt ：只能写入；文件不存在会创建文件，文件存在会清空文件，光标移动到行首</p></li><li><p>at ：追加写入；光标移动到末尾</p></li></ul></li><li><p>b：二进制模式，读写以<code>bytes</code>，可以针对所有文件，不能指定<code>encoding</code>参数</p><ul><li>rb</li><li>wb</li><li>ab</li></ul></li><li><p>+：不能单独使用，必须配合r、w、a</p></li></ul><h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><p>打开文件处理完毕后，需要关闭文件对象；<code>f.close()</code>用来关闭文件并立即释放它占用的所有系统资源。如果没有关闭文件，python的垃圾回收机制最终将销毁该对象并关闭打开文件，但这个文件可能会持续打开一段时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><h3 id="with关键字"><a href="#with关键字" class="headerlink" title="with关键字"></a>with关键字</h3><p>当子句结束后会自动关闭&#x2F;<code>f.close()</code>，即使发生了异常。支持读取多个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f,<span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p><code>f.read()</code> 读取文件数据，文本模式下以<code>str</code>返回，字节模式下返回字节对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><p>f.readline()读取一行数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.readline().decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># b模式读取需要将二进制解码</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><p>写入方法，将字符串写入到文件里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;你好，世界！！&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="writelines"><a href="#writelines" class="headerlink" title="writelines"></a>writelines</h3><p>将一个list写入文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;e.txt&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    li = [</span><br><span class="line">        <span class="string">&#x27;hello\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="comment"># b模式写入需要将字符串按指定字符集转码</span></span><br><span class="line">        <span class="string">&#x27;你好\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">    f.writelines(li)</span><br></pre></td></tr></table></figure><h3 id="案列：使用文件实现数据持久化"><a href="#案列：使用文件实现数据持久化" class="headerlink" title="案列：使用文件实现数据持久化"></a>案列：使用文件实现数据持久化</h3><ul><li><strong>用户注册</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">register_user</span>(<span class="params">name, pwd</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(name+<span class="string">&#x27;:&#x27;</span>+pwd+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>登录功能</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">input_name, input_pwd</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            name,pwd = i.strip().split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> input_name == name <span class="keyword">and</span> input_pwd == pwd:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Login successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Login erro&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入用户名：admin</span><br><span class="line">请输入密码：123</span><br><span class="line">Login successful</span><br></pre></td></tr></table></figure><h3 id="文件指针移动"><a href="#文件指针移动" class="headerlink" title="文件指针移动"></a>文件指针移动</h3><p><strong>字符和字母占1个字节，中文“你好”各占3个字节</strong></p><h4 id="f-read-n"><a href="#f-read-n" class="headerlink" title="f.read(n)"></a>f.read(n)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read(<span class="number">3</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment"># 读取3个字节（bytes）</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode = <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read(<span class="number">3</span>)<span class="comment"># 读取3个字符</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="f-tell"><a href="#f-tell" class="headerlink" title="f.tell()"></a>f.tell()</h4><p>获取当前指针位置</p><h4 id="0模式"><a href="#0模式" class="headerlink" title="0模式"></a>0模式</h4><p><strong>参照文件开头位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode = <span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">0</span>)<span class="comment"># 以行首为参照物向后移动三个字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 好世界hello world!!!</span></span><br></pre></td></tr></table></figure><h4 id="1模式"><a href="#1模式" class="headerlink" title="1模式"></a>1模式</h4><p><strong>参照文件当前位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">1</span>)<span class="comment"># 以当前位置向后移动指针</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 好世界hello world!!!</span></span><br></pre></td></tr></table></figure><h4 id="2模式"><a href="#2模式" class="headerlink" title="2模式"></a>2模式</h4><p><strong>参照文件末尾位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.seek(-<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 23</span></span><br><span class="line"><span class="comment"># !!!</span></span><br></pre></td></tr></table></figure><h3 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;user.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> rf,\</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;user.txt.swap&#x27;</span>, mode = <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> wf:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> rf:</span><br><span class="line">        wf.write(line.replace(<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python简介</title>
      <link href="/2022/04/16/Python%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/04/16/Python%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.python.org/">Python</a>由荷兰数学和计算机科学研究学会的吉多·范罗苏姆 于1990 年代初设计，作为一门叫做ABC语言的替代品。 Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言， 随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。例如YouTube、豆瓣等。</p><p><img src="/static/imgs/python/python_top.png"></p><blockquote><p>Python是著名的“龟叔”Guido van Rossum在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。</p></blockquote><h3 id="Python语言优点"><a href="#Python语言优点" class="headerlink" title="Python语言优点"></a>Python语言优点</h3><p>简单、易学、免费开源、 面向对象、可扩展性、可嵌入性、丰富的库、规范的代码、高级编程语言。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub Pages搭建博客</title>
      <link href="/2022/04/12/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/04/12/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是hexo？"><a href="#什么是hexo？" class="headerlink" title="什么是hexo？"></a>什么是hexo？</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p><a href="http://nodejs.org/">Node.js</a>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p><ul><li><p>修改淘宝npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry==https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="http://git-scm.com/">Git</a></p></li></ul><p>安装Hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><ul><li>初始化博客</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;bolg-site&gt;</span><br></pre></td></tr></table></figure><ul><li>运行博客</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>浏览器输入localhost:4000</li></ul><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>网站的配置信息</p><p><strong>package.json</strong></p><p>应用程序的信息</p><p><strong>scaffolds</strong></p><p>模板文件夹</p><p><strong>source</strong></p><p>资源文件夹存放用户资源的地方</p><p><strong>themes</strong></p><p>主题文件夹</p><h5 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h5><ul><li>下载主题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;bolg-site&gt;</span><br><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure><ul><li>主题配置（更新_config_yml）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h5 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h5><ul><li>安装deploy插件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><ul><li>清除缓存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><ul><li>自动部署</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Html </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
