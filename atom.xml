<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stephen Liu</title>
  
  <subtitle>网络日志</subtitle>
  <link href="https://sqlsafe.github.io/atom.xml" rel="self"/>
  
  <link href="https://sqlsafe.github.io/"/>
  <updated>2022-04-25T16:04:19.849Z</updated>
  <id>https://sqlsafe.github.io/</id>
  
  <author>
    <name>Stephen Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>行为型模式</title>
    <link href="https://sqlsafe.github.io/2022/04/25/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://sqlsafe.github.io/2022/04/25/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-25T14:26:48.000Z</published>
    <updated>2022-04-25T16:04:19.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><p><strong>行为模式负责对象间的高效沟通和职责委派。</strong></p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p><strong>亦称：</strong> 职责链模式、命令链、CoR、Chain of Command、Chain of Responsibility</p><p><img src="/img/design_patterns/chain-of-responsibility-comic-1.png" title="给技术支持打电话时你可能得应对多名接听人员。"></p><ul><li>内容：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，知道有一个对象处理它为止。</li><li>角色：<ul><li>抽象处理者（Handler）</li><li>具体处理者（Concrete Handler）</li><li>客户端（Client）</li></ul></li><li>适用场景：<ul><li>有多个对象可以处理一个请求，哪个对象处理由运行是决定</li><li>在不明确接收者的情况下，向多个对象中的一个提交一个请求</li></ul></li><li>优点：<ul><li>降低耦合度：一个对象无需知道是其他哪一个对象处理其请求</li></ul></li></ul><p>​<strong>责任链模式结构</strong></p><p><img src="/img/design_patterns/CoR_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象处理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_leave</span>(<span class="params">self, day</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体处理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneralManager</span>(<span class="title class_ inherited__">Handler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_leave</span>(<span class="params">self, day</span>):</span><br><span class="line">        <span class="keyword">if</span> day &lt;= <span class="number">10</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;总经理准假%d天&#x27;</span> % day)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;你还是辞职吧！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DepartmentManager</span>(<span class="title class_ inherited__">Handler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__<span class="built_in">next</span> = GeneralManager()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_leave</span>(<span class="params">self, day</span>):</span><br><span class="line">        <span class="keyword">if</span> day &lt;= <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;部门经理准假%d天&#x27;</span> % day)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__<span class="built_in">next</span>.handle_leave(day)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProjectDirector</span>(<span class="title class_ inherited__">Handler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__<span class="built_in">next</span> = DepartmentManager()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_leave</span>(<span class="params">self, day</span>):</span><br><span class="line">        <span class="keyword">if</span> day &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;项目主管准假%d天&#x27;</span> % day)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__<span class="built_in">next</span>.handle_leave(day)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">handler = ProjectDirector()</span><br><span class="line">handler.handle_leave(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p><strong>亦称：</strong> 事件订阅者、监听者、Event-Subscriber、Listener、Observer</p><p><img src="/img/design_patterns/observer-comic.png" title="杂志和报纸订阅"></p><ul><li>内容：定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都得到通知并被自动更新。观察者模式又称“发布-订阅”模式</li><li>角色：<ul><li>抽象主题（Subject）</li><li>具体主题（Concrete Subject） — 发布者</li><li>抽象观察者（Observer）</li><li>具体观察者（Concrete Observer）—订阅者</li></ul></li><li>适用场景：<ul><li>当一个抽象模型有两方面，其中一个方面依赖于另一个方面。将这两者封装在独立对象中以使它们可以各自独立地改变和复用。</li><li>当一个对象的改变需要同时改变其它对象，而不知道具体有多少对象有待改变。</li><li>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之，你不希望这些对象是紧密耦合的。</li></ul></li><li>优点：<ul><li>目标和观察者之间的抽象耦合最小</li><li>支持广播通信</li></ul></li></ul><p><strong>观察者模式结构</strong></p><p><img src="/img/design_patterns/observer-comic-structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象订阅者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="comment"># notice是一个Notice类的对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, notice</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象发布者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Notice</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.observer = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attach</span>(<span class="params">self, obs</span>):</span><br><span class="line">        self.observer.append(obs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detach</span>(<span class="params">self, obs</span>):</span><br><span class="line">        self.observer.remove(obs)</span><br><span class="line">    <span class="comment"># 推送</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> obs <span class="keyword">in</span> self.observer:</span><br><span class="line">            obs.update(self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体发布者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StaffNotice</span>(<span class="title class_ inherited__">Notice</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, company_info = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.__company_info = company_info</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">company_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__company_info</span><br><span class="line"></span><br><span class="line"><span class="meta">    @company_info.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">company_info</span>(<span class="params">self, info</span>):</span><br><span class="line">        self.__company_info = info</span><br><span class="line">        <span class="comment"># 推送</span></span><br><span class="line">        self.notify()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体订阅者        </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Staff</span>(<span class="title class_ inherited__">Observer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.company_info = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, notice</span>):</span><br><span class="line">        self.company_info = notice.company_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">notice = StaffNotice(<span class="string">&quot;初始化公司&quot;</span>)</span><br><span class="line">s1 = Staff()</span><br><span class="line">s2 = Staff()</span><br><span class="line">notice.attach(s1)</span><br><span class="line">notice.attach(s2)</span><br><span class="line">notice.company_info = <span class="string">&#x27;明天公司放假！！！&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1.company_info)</span><br><span class="line"><span class="built_in">print</span>(s2.company_info)</span><br></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p><strong>亦称：</strong> Strategy</p><p><img src="/img/design_patterns/strategy-comic-1.png" title="各种前往机场的出行策略"></p><ul><li>内容：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</li><li>角色：<ul><li>抽象策略（Strategy）</li><li>具体策略（Concrete Strategy ）</li><li>上下文（Context）</li></ul></li><li>优点：<ul><li>定义了一系列可重用的算法和行为</li><li>消除了一些条件语句</li><li>可以提供相同行为的不同实现</li></ul></li><li>缺点：<ul><li>客户必须了解不同的策略</li></ul></li></ul><p><strong>策略模式结构</strong></p><p><img src="/img/design_patterns/strategy_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象策略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Strategy</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体策略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FastStrategy</span>(<span class="title class_ inherited__">Strategy</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用较快的策略处理%s&quot;</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SlowStrategy</span>(<span class="title class_ inherited__">Strategy</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用较慢的策略处理%s&quot;</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, strategy, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.strategy = strategy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_strategy</span>(<span class="params">self, strategy</span>):</span><br><span class="line">        self.strategy = strategy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_strategy</span>(<span class="params">self</span>):</span><br><span class="line">        self.strategy.execute(self.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">data = <span class="string">&#x27;[...]&#x27;</span></span><br><span class="line">s1 = FastStrategy()</span><br><span class="line">s2= SlowStrategy()</span><br><span class="line"></span><br><span class="line">context = Context(s1,data)</span><br><span class="line">context.do_strategy()</span><br><span class="line">context.set_strategy(s2)</span><br><span class="line">context.do_strategy()</span><br></pre></td></tr></table></figure><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p><strong>亦称：</strong> Template Method</p><p><img src="/img/design_patterns/Template_Method.png" title="可对典型的建筑方案进行微调以更好地满足客户需求。"></p><ul><li>内容：定义一个操作中的算法的骨干，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li><li>角色：<ul><li>抽象类（Abstract Class）：定义抽象的原子操作（钩子操作）；实现一个模板方法作为算法的骨架。</li><li>具体类（Concrete Class）：实现原子操作</li></ul></li><li>适用场景：<ul><li>一次性实现一个算法的不变的部分</li><li>各个子类中的公共行为应该被提取出来并集中到一个公共父类中以避免代码重复</li><li>控制子类扩展</li></ul></li></ul><p><strong>模板方法模式结构</strong></p><p><img src="/img/design_patterns/template_method_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">repaint</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>): <span class="comment"># 原子操作/钩子操作</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):  <span class="comment"># 模板方法</span></span><br><span class="line">        self.start()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.repaint()</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">Window</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg</span>):</span><br><span class="line">        self.msg = msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;窗口开始运行&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;窗口结束运行&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">repaint</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端        </span></span><br><span class="line">MyWindow(<span class="string">&quot;Hello...&quot;</span>).run()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;行为型模式&quot;&gt;&lt;a href=&quot;#行为型模式&quot; class=&quot;headerlink&quot; title=&quot;行为型模式&quot;&gt;&lt;/a&gt;行为型模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;行为模式负责对象间的高效沟通和职责委派。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;责任链模式&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="行为型模式" scheme="https://sqlsafe.github.io/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>结构型模式</title>
    <link href="https://sqlsafe.github.io/2022/04/24/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://sqlsafe.github.io/2022/04/24/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-24T14:31:41.000Z</published>
    <updated>2022-04-25T15:55:53.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构型模式（Structural-Patterns）"><a href="#结构型模式（Structural-Patterns）" class="headerlink" title="结构型模式（Structural Patterns）"></a>结构型模式（Structural Patterns）</h1><p><strong>结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。</strong></p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p><strong>亦称：</strong> 封装器模式、Wrapper、Adapter</p><p><img src="/img/design_patterns/adapter.png"></p><ul><li>内容：将一个类的接口转换成客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li><li>两种实现方式：<ul><li>类适配器：使用多继承</li><li>对象适配器：使用组合</li></ul></li><li>角色：<ul><li>目标接口（Target）</li><li>待适配的类（Adaptee）</li><li>适配器（Adapter）</li></ul></li><li>适用场景：<ul><li>想使用一个已经存在的类，而它的接口不符合你的要求。</li><li>（对象适配器）想使用一些已经存在的子类，但不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</li></ul></li></ul><p><strong>适配器模式结构</strong></p><p><img src="/img/design_patterns/adapter_structure.png"></p><p><strong>类适配器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WechatPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 待适配的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankPay</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;银联支付%d&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类适配器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewBankPay</span>(Payment,BankPay):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        self.cost(money)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;银联支付%d&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line">p = NewBankPay()</span><br><span class="line">p.pay(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p><strong>对象适配器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目标接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WechatPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 待适配器的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankPay</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;银联支付%d&#x27;</span> % money)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 待适配器的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplePay</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;苹果支付了%d&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象适配器        </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentAdapter</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, payment</span>):</span><br><span class="line">        self.payment = payment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        self.payment.cost(money)</span><br><span class="line"></span><br><span class="line">p = PaymentAdapter(BankPay())</span><br><span class="line">p.pay(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="桥模式"><a href="#桥模式" class="headerlink" title="桥模式"></a>桥模式</h2><p><strong>亦称：</strong> Bridge</p><p><img src="/img/design_patterns/bridge.png" title="创建跨平台应用程序的一种方法"></p><ul><li>内容：将一个事物的两个维度分离，使其都可以独立地变化。</li><li>角色：<ul><li>抽象（Abstraction）</li><li>细化抽象（Refined Abstraction）</li><li>实现者（Implementor）</li><li>具体实现者（Concrete Implementor）</li></ul></li><li>应用场景：<ul><li>当事物有两个维度上的表现，两个维度都可能扩展时。</li></ul></li><li>优点：<ul><li>抽象和实现相分离</li><li>优秀的扩展能力</li></ul></li></ul><p><strong>适配器模式结构</strong></p><p><img src="/img/design_patterns/structure.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color</span>):</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 细化抽象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    name = <span class="string">&#x27;长方形&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 长方形的具体逻辑 ....</span></span><br><span class="line">        self.color.paint(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    name = <span class="string">&#x27;圆形&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 圆形的具体逻辑 ....</span></span><br><span class="line">        self.color.paint(self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体实现者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Red</span>(<span class="title class_ inherited__">Color</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self, shape</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;红色的&#x27;</span> + shape.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Blue</span>(<span class="title class_ inherited__">Color</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paint</span>(<span class="params">self, shape</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;蓝色的&#x27;</span> + shape.name)</span><br><span class="line"></span><br><span class="line">Rectangle(Red()).draw()</span><br><span class="line">Circle(Blue()).draw()</span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p><strong>亦称：</strong> 对象树、Object Tree、Composite</p><p><img src="/img/design_patterns/composite.png" title="组合模式以递归方式处理对象树中的所有项目"></p><ul><li>内容：将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对组合对象的使用具有一致性。</li><li>角色：<ul><li>抽象组件（Component）</li><li>叶子组件（Leaf）</li><li>复合组件（Composite）</li><li>客户端（Client）</li></ul></li><li>适用场景：<ul><li>表示对象的“部分-整体”层次结构（特别是结构是递归的）</li><li>希望用户忽略组合对象与单个对象的不同，用户统一地使用组合结构中的所有对象</li></ul></li><li>优点：<ul><li>定义了包含基本对象和组合对象的类层次结构</li><li>简化客户端代码，即客户端可以一致地使用组合对象和单个对象</li><li>更容易增加新类型的组件</li></ul></li></ul><p><strong>组合模式结构</strong></p><p><img src="/img/design_patterns/composite_structure.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graphic</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 叶子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="title class_ inherited__">Graphic</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;点(%s, %s)&#x27;</span> % (self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(self))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 叶子组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>(<span class="title class_ inherited__">Graphic</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p1, p2</span>):</span><br><span class="line">        self.p1 = p1</span><br><span class="line">        self.p2 = p2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线段[%s, %s]&quot;</span> % (self.p1, self.p2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(self))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复合组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pitcture</span>(<span class="title class_ inherited__">Graphic</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iterable</span>):</span><br><span class="line">        self.children = []</span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> iterable:</span><br><span class="line">            self.add(g)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, graphic</span>):</span><br><span class="line">        self.children.append(graphic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---- 复合图形 ----&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> self.children:</span><br><span class="line">            g.draw()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---- 复合图形 ----&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">Point(<span class="number">1</span>,<span class="number">1</span>).draw()</span><br><span class="line">Line((<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">7</span>)).draw()</span><br><span class="line">Pitcture([Line((<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">7</span>)),Point(<span class="number">1</span>,<span class="number">1</span>)]).draw()</span><br></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p><strong>亦称：</strong> Facade</p><p><img src="/img/design_patterns/facade.png" title="电话购物"></p><ul><li>内容：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高级层接口，这个接口使得这一子系统更加容易使用。</li><li>角色：<ul><li>外观（facade）</li><li>子系统类（subsystem classes）</li></ul></li><li>优点：<ul><li>减少系统相互依赖</li><li>提高了灵活性</li><li>提高了安全性</li></ul></li></ul><p><strong>外观模式结构</strong></p><p><img src="/img/design_patterns/facade_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类系统</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cpu</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;CPU开始运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;CPU停止运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disk</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;硬盘开始运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;硬盘停止运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;内存开始工作&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;内存停止工作&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外观</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.cpu = Cpu()</span><br><span class="line">        self.disk = Disk()</span><br><span class="line">        self.memory = Memory()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.cpu.run()</span><br><span class="line">        self.disk.run()</span><br><span class="line">        self.memory.run()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        self.cpu.stop()</span><br><span class="line">        self.disk.stop()</span><br><span class="line">        self.memory.stop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Client</span></span><br><span class="line">computer = Computer()</span><br><span class="line">computer.run()</span><br><span class="line">computer.stop()</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p><strong>亦称：</strong> Proxy</p><p><img src="/img/design_patterns/proxy_solution.png" title="代理将自己伪装成数据库对象， 可在客户端或实际数据库对象不知情的情况下处理延迟初始化和缓存查询结果的工作。"></p><ul><li>内容：为其他对象提供一种代理以控制对这个对象的访问。</li><li>应用场景：<ul><li>远程代理：为远程对象提供代理</li><li>虚代理：根据需要创建很大的对像</li><li>保护代理：控制对原始对象的访问，用于对象有不同访问权限时</li></ul></li><li>角色：<ul><li>抽象实体（Subject）</li><li>实体（RealSubject）</li><li>代理（Proxy）</li></ul></li><li>优点：<ul><li>远程代理：可以隐藏对象位于远程地址空间的事实</li><li>虚代理：可以进行优化，例如根据要求创建对象</li><li>保护代理：允许在访问一个对象时有一些附加的内部处理</li></ul></li></ul><p><strong>代理模式结构</strong></p><p><img src="/img/design_patterns/proxy_structure-indexed.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象实体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span>(<span class="title class_ inherited__">Subject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;初始化RealSubject class.&#x27;</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        f = <span class="built_in">open</span>(self.filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VirtualProxy</span>(<span class="title class_ inherited__">Subject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.subj = <span class="literal">None</span></span><br><span class="line">        self.filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.subj:</span><br><span class="line">            self.subj = RealSubject(self.filename)</span><br><span class="line">        <span class="keyword">return</span> self.subj.get_content()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.subj:</span><br><span class="line">            self.subj = RealSubject(self.filename)</span><br><span class="line">        <span class="keyword">return</span> self.subj.set_content(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保护代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProtectedProxy</span>(<span class="title class_ inherited__">Subject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.subj = RealSubject(filename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.subj.get_content()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_content</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">&#x27;无写入权限&#x27;</span>)</span><br><span class="line"></span><br><span class="line">virtual = VirtualProxy(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = virtual.get_content()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line">virtual.set_content(<span class="string">&#x27;你好世界！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">protected = ProtectedProxy(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">content = protected.get_content()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line">protected.set_content(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;结构型模式（Structural-Patterns）&quot;&gt;&lt;a href=&quot;#结构型模式（Structural-Patterns）&quot; class=&quot;headerlink&quot; title=&quot;结构型模式（Structural Patterns）&quot;&gt;&lt;/a&gt;结构型模式（St</summary>
      
    
    
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="结构型模式" scheme="https://sqlsafe.github.io/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>创建型模式</title>
    <link href="https://sqlsafe.github.io/2022/04/21/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://sqlsafe.github.io/2022/04/21/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-21T15:12:51.000Z</published>
    <updated>2022-04-25T15:59:26.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式（Creational-Design-Patterns）"><a href="#创建型模式（Creational-Design-Patterns）" class="headerlink" title="创建型模式（Creational Design Patterns）"></a>创建型模式（Creational Design Patterns）</h1><p><strong>创建型模式提供创建对象的机制，增加已有代码的灵活性和可复用性。</strong></p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li><p>内容：结构不直接向客户端暴露对象创建的实现细节，而是通过一个工厂类负责创建产品类的实列。</p></li><li><p>角色：</p><ul><li><p>工厂角色（Creator）</p></li><li><p>抽象产品角色（Product）</p></li><li><p>具体产品角色（Concrete Product）</p></li></ul></li><li><p>优点</p><ul><li>隐藏了对象创建的实现细节</li><li>客户端不需要修改代码</li></ul></li><li><p>缺点</p><ul><li>违反了单一职责原则，将创建逻辑集中到一个工厂类里面</li><li>当添加新产品时，需要修改工厂类代码，违反了开闭原则</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 具体产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, isHuabei = <span class="literal">False</span></span>):</span><br><span class="line">        self.isHuabei = isHuabei</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">if</span> self.isHuabei:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝花呗支付了%d元&#x27;</span> % money)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self,payment_method</span>):</span><br><span class="line">        <span class="keyword">if</span> payment_method == <span class="string">&#x27;Alipay&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Alipay()</span><br><span class="line">        <span class="keyword">elif</span> payment_method == <span class="string">&#x27;Wechatpay&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Wechatpay()</span><br><span class="line">        <span class="keyword">elif</span> payment_method == <span class="string">&#x27;Huabei&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Alipay(isHuabei=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;No such payment named % s&#x27;</span> % payment_method)</span><br><span class="line"></span><br><span class="line">PaymentFactory().create_payment(<span class="string">&#x27;Huabei&#x27;</span>).pay(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><strong>亦称：</strong> 虚拟构造函数、Virtual Constructor、Factory Method</p><p><img src="/img/design_patterns/factory_method1.png"></p><ul><li>内容：定义一个用于创建对象的接口（工厂接口），让子类决定实例化哪一个产品类。</li><li>角色：<ul><li>抽象工厂角色（Creator）</li><li>具体工厂角色（Concrete Creator）</li><li>抽象产品角色（Product）</li><li>具体产品角色（Concrete Product）</li></ul></li><li>优点：<ul><li>每个具体产品都对应一个具体工厂类，不需要修改工厂类的代码</li><li>隐藏了对象创建的实现细节</li></ul></li><li>缺点<ul><li>每增加一个具体产品类，就必须增加一个相应的具体工厂类</li></ul></li></ul><p><strong>工厂方法结构</strong></p><p><img src="/img/design_patterns/factory_method.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 具体产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, isHuabei = <span class="literal">False</span></span>):</span><br><span class="line">        self.isHuabei = isHuabei</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">if</span> self.isHuabei:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝花呗支付了%d元&#x27;</span> % money)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentFactory</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 具体工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlipayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Alipay()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WechatpayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Wechatpay()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuabeipayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Alipay(isHuabei=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">pay = WechatpayFactory().create_payment()</span><br><span class="line">pay.pay(<span class="number">500</span>)</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>亦称：</strong> Abstract Factory</p><p><img src="/img/design_patterns/abstract-factory.png"></p><ul><li>内容：定义一个工厂类接口，让工厂子类来创建一系列相关或相互依赖的对象</li><li>例如：生产一部手机，需要手机壳、CPU、操作系统三类对象进行组装，其中每类对象都有不同的种类。对每个具体工厂，分别生产一部手机所需要的三个对象。</li><li>相比工厂方法模式，抽象工厂模式中的每个具体工厂都生产一套产品。</li><li>优点：<ul><li>将客户端与类的具体实现相分离</li><li>每个工厂创建了一个完整的产品系列，使得易于交换产品系列</li><li>有利于产品的一致性（即产品之间的约束关系）</li></ul></li><li>缺点：<ul><li>难以支持新种类的（抽象）产品</li></ul></li></ul><p><strong>抽象工厂结构</strong></p><p><img src="/img/design_patterns/abstract_factory_method.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----抽象产品----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneShell</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneCPU</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneOS</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----具体的产品----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;普通小手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BigShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;普通大手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;苹果手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnapDragonCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;骁龙CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuaweiCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;华为CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;苹果CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndroidOS</span>(<span class="title class_ inherited__">PhoneOS</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;安卓系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleOS</span>(<span class="title class_ inherited__">PhoneOS</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ios系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- 抽象工厂----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneFactory</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----具体工厂----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleFactory</span>(<span class="title class_ inherited__">PhoneFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleShell()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleCPU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleOS()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuaweiFactory</span>(<span class="title class_ inherited__">PhoneFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> BigShell()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> HuaweiCPU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AndroidOS()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shell, cpu, os</span>):</span><br><span class="line">        self.shell = shell</span><br><span class="line">        self.cpu = cpu</span><br><span class="line">        self.os = os</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_phone_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Phone INFO：&#x27;</span>)</span><br><span class="line">        self.shell.show_shell()</span><br><span class="line">        self.cpu.show_cpu()</span><br><span class="line">        self.os.show_os()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_phone</span>(<span class="params">factory</span>):</span><br><span class="line">    shell = factory.make_shell()</span><br><span class="line">    cpu = factory.make_cpu()</span><br><span class="line">    os = factory.make_os()</span><br><span class="line">    <span class="keyword">return</span> Phone(shell, cpu, os)</span><br><span class="line"></span><br><span class="line">apple = make_phone(AppleFactory())</span><br><span class="line">apple.show_phone_info()</span><br></pre></td></tr></table></figure><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p><strong>亦称：</strong> 生成器模式、Builder</p><p><img src="/img/design_patterns/Builder01.png"></p><ul><li>内容：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li><li>角色：<ul><li>抽象建造者（Builder）</li><li>具体建造者（Concrete Builder）</li><li>指挥者（Director）</li><li>产品（Product）</li></ul></li><li>建造者模式与抽象工厂模式相似，也用来创建复杂对象。主要区别是建造者模式着重一步步构建一个复杂对象，而抽象工厂模式着重于多个系列的产品对象。</li><li>优点：<ul><li>隐藏了一个产品的内部结构和装配过程</li><li>将构造代码与表示代码分开</li><li>可以对构造过程进行更精细的控制</li></ul></li></ul><p><strong>建造者模式结构</strong></p><p><img src="/img/design_patterns/builder.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, body=<span class="literal">None</span>, face=<span class="literal">None</span>, arm=<span class="literal">None</span>, leg=<span class="literal">None</span></span>):</span><br><span class="line">        self.body = body</span><br><span class="line">        self.face = face</span><br><span class="line">        self.arm = arm</span><br><span class="line">        self.leg = leg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s,%s,%s,%s&#x27;</span> % (self.body,self.face,self.arm,self.leg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayerBuilder</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_body</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_face</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_arm</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_leg</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlBuilder</span>(<span class="title class_ inherited__">PlayerBuilder</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.player = Player()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_body</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.body(<span class="string">&#x27;苗条的身材&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_face</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.face(<span class="string">&#x27;漂亮的脸蛋&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_arm</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.arm(<span class="string">&#x27;细细的手臂&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_leg</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.leg(<span class="string">&#x27;大长腿&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonsterBuilder</span>(<span class="title class_ inherited__">PlayerBuilder</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.player = Player()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_body</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.body = <span class="string">&#x27;魁梧的身材&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_face</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.face = <span class="string">&#x27;猴脸&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_arm</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.arm= <span class="string">&#x27;肥大&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_leg</span>(<span class="params">self</span>):</span><br><span class="line">        self.player.leg= <span class="string">&#x27;粗壮&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指挥者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Playerdirector</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">builder_player</span>(<span class="params">self, builder</span>):</span><br><span class="line">        builder.build_body()</span><br><span class="line">        builder.build_face()</span><br><span class="line">        builder.build_leg()</span><br><span class="line">        builder.build_arm()</span><br><span class="line">        <span class="keyword">return</span> builder.player</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line">builder = MonsterBuilder()</span><br><span class="line">director = Playerdirector()</span><br><span class="line">p = director.builder_player(builder)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><img src="/img/design_patterns/singleton-comic.png" title="客户端甚至可能没有意识到它们一直都在使用同一个对象。"></p><ul><li>内容：保证一个类只有一个实例，并提供一个访问它的全局访问点。</li><li>角色：<ul><li>单列（Singleton）</li></ul></li><li>优点：<ul><li>对唯一实列的受控访问</li><li>单列相当于全局变量，但防止了命名空间被污染</li></ul></li></ul><p><strong>单例模式结构</strong></p><p><img src="/img/design_patterns/singleton.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            cls._instance = <span class="built_in">super</span>(Singleton, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a</span>):</span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line">A = MyClass(<span class="number">10</span>)</span><br><span class="line">B = MyClass(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(A.a, B.a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(A),<span class="built_in">id</span>(B))</span><br></pre></td></tr></table></figure><h2 id="创建型模式小结"><a href="#创建型模式小结" class="headerlink" title="创建型模式小结"></a>创建型模式小结</h2><ul><li>抽象工厂模式和建造者模式相比于简单工厂模式和工厂方法模式而言更灵活也更加复杂。</li><li>通常情况下、设计以简单工厂模式或工厂方法模式开始，当你发现设计需要更大的灵活性时，则像更复杂的设计模式演化。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建型模式（Creational-Design-Patterns）&quot;&gt;&lt;a href=&quot;#创建型模式（Creational-Design-Patterns）&quot; class=&quot;headerlink&quot; title=&quot;创建型模式（Creational Design Pa</summary>
      
    
    
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="创建型模式" scheme="https://sqlsafe.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://sqlsafe.github.io/2022/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://sqlsafe.github.io/2022/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-21T13:11:30.000Z</published>
    <updated>2022-04-25T11:12:40.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式-Design-Patterns"><a href="#设计模式-Design-Patterns" class="headerlink" title="设计模式(Design Patterns)"></a>设计模式(Design Patterns)</h2><ul><li><p>设计模式：对<strong>软件设计</strong>中普遍存在（反复出现）的各种问题，所提出的解决方案。每一个设计模式系统的命名、解释和评价了<strong>面向对象系统</strong>中一个重要的和重复出现的设计。</p></li><li><p>”四人帮“（Gan of Four, GoF）：</p><ul><li>Erich Gamma,Richard Helm,Ralph Johnson,John Vlissides</li></ul></li><li><p>《设计模式：可复用面向对象软件的基础》</p></li></ul><h2 id="面向对象-Object-Oriented-Programming"><a href="#面向对象-Object-Oriented-Programming" class="headerlink" title="面向对象(Object Oriented Programming)"></a>面向对象(Object Oriented Programming)</h2><h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><ul><li>封装：在Class内部，可以有属性和方法，二外部代码可以通过直接调用实列变量的方法来操作数据，隐藏内部的复杂逻辑。</li><li>继承：在OOP程序设计中，定义一个class的时候，可以从某个现有的class继承，新的class称为子类，而被继承的class称为父类、基类。</li><li>多态：当子类和父类存在相同的方法时，子类的方法覆盖父类的方法，在代码运行时，总是会调用子类的方法。</li></ul><h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h3><p>接口：若干抽象方法的集合。</p><ul><li>作用：限制实现接口的类必须按照接口给定的调用方法实现，这些方法；对高层模块隐藏了类的内部实现。</li></ul><p><strong>继承实现接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><p><strong>抽象类(abstract)实现接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="comment"># abstract class </span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><h3 id="组合优于继承"><a href="#组合优于继承" class="headerlink" title="组合优于继承"></a>组合优于继承</h3><p>继承可能是类之间最明显、最简单的代码复用方式。不过继承这件事通常只有在程序中已包含大量类,且修改任何东西都非常困难时才会引起关注。</p><ul><li>子类不能减少超类的接口</li><li>在重写方法时，需要确保新行为与其基类中的版本兼容</li><li>继承打破了超类的封装</li><li>子类与超类紧密耦合</li><li>通过继承复用代码可能导致平行继承体系的产生</li></ul><p><img src="/img/design_patterns/combination_inherit.png"></p><p><strong>继承：在多个维度上扩展一个类可能会导致子类组合的数量暴增。</strong></p><p><img src="/img/design_patterns/combination_inherit2.png"></p><p><strong>组合：将不同“维度”的功能抽取到各自的类层次结构中。</strong></p><h2 id="面向对象设计SOLID原则"><a href="#面向对象设计SOLID原则" class="headerlink" title="面向对象设计SOLID原则"></a>面向对象设计SOLID原则</h2><h3 id="开放封闭原则（Open-Closed-Principle）"><a href="#开放封闭原则（Open-Closed-Principle）" class="headerlink" title="开放封闭原则（Open Closed Principle）"></a>开放封闭原则（Open Closed Principle）</h3><p>一个软件实体如类、模块和函数应该<strong>对扩展开放，对修改闭合</strong>。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><h3 id="里氏替换原则（Liskov-Substitution-principle）"><a href="#里氏替换原则（Liskov-Substitution-principle）" class="headerlink" title="里氏替换原则（Liskov Substitution principle）"></a>里氏替换原则（Liskov Substitution principle）</h3><p>所有引用父类的地方必须能<strong>透明地使用其子类的对象</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类和父类方法内部实现逻辑可能不同，但参数和返回值类型都是一致的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_name</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPUser</span>(<span class="title class_ inherited__">User</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_name</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><h3 id="依赖倒置原则（Dependence-Inversion-Principle）"><a href="#依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependence Inversion Principle）"></a>依赖倒置原则（Dependence Inversion Principle）</h3><p>高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，<strong>要面向接口编程，而不是面向实现编程</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="comment"># abstract class </span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 细节</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><h3 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h3><p>使用多个专门的接口，而不使用单一的总接口，即<strong>客户端不应该依赖那些它不需要的接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LandAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaterAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SkyAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>(<span class="title class_ inherited__">LandAnimal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;老虎在走路...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frag</span>(LandAnimal,WaterAnimal):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;青蛙在走路...&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;青蛙在游泳...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">frag = Frag()</span><br><span class="line">frag.swim()</span><br><span class="line">frag.walk()</span><br></pre></td></tr></table></figure><h3 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h3><p>不要存在多于一个导致类变更的原因。通俗的说，即<strong>一个类只负责一项职责</strong>。</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p><strong>提供创建对象的机制，增加已有代码的灵活性和可复用性。</strong></p><ul><li>工厂方法模式</li><li>抽象工厂模式</li><li>创建者模式</li><li>原型模式</li><li>单列模式</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p><strong>如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。</strong></p><ul><li>适配器模式</li><li>桥模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p><strong>负责对象间高效沟通和职责委派。</strong></p><ul><li>解释器模式</li><li>责任链模式</li><li>命令模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>访问者模式</li><li>模板方法模式</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式-Design-Patterns&quot;&gt;&lt;a href=&quot;#设计模式-Design-Patterns&quot; class=&quot;headerlink&quot; title=&quot;设计模式(Design Patterns)&quot;&gt;&lt;/a&gt;设计模式(Design Patterns)&lt;/h2</summary>
      
    
    
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python文件操作</title>
    <link href="https://sqlsafe.github.io/2022/04/18/Python%E6%96%87%E4%BB%B6/"/>
    <id>https://sqlsafe.github.io/2022/04/18/Python%E6%96%87%E4%BB%B6/</id>
    <published>2022-04-18T13:05:52.000Z</published>
    <updated>2022-04-19T14:59:01.126Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/python/python_file_operation2.jpg"></p><p>读写文件是最常见IO操作。Python内置了读写文件的函数。</p><p>在磁盘上读写文件的功能都是由操作系统提供的接口，操作系统是不允许普通的程序直接操作磁盘，所以读写文件就是请求操作系统打开一个文件对象，然后通过系统提供的接口从这个文件对像中读写操作。</p><h2 id="文件操作流程"><a href="#文件操作流程" class="headerlink" title="文件操作流程"></a>文件操作流程</h2><ul><li><p>1、获取操作系统文件对象</p></li><li><p>2、读写操作</p></li><li><p>3、关闭操作系统文件对象</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">res = f.read()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="open函数"><a href="#open函数" class="headerlink" title="open函数"></a>open函数</h3><p>open()是python内置函数，它会返回一个操作系统文件对象，这个对象提供了 <code>read()</code>、<code>write()</code>、<code>close()</code>等方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;文件路径&#x27;</span>,<span class="string">&#x27;文件模式&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 打开操作系统文件对象</span></span><br></pre></td></tr></table></figure><h3 id="mode模式"><a href="#mode模式" class="headerlink" title="mode模式"></a>mode模式</h3><ul><li><p>t（默认）：文本模式，只能针对文本文件，读写都是<code>str</code>为单位的，必须指定<code>encoding</code>参数</p><ul><li><p>rt ：只能读取；文件不存在报错；光标移动到行首</p></li><li><p>wt ：只能写入；文件不存在会创建文件，文件存在会清空文件，光标移动到行首</p></li><li><p>at ：追加写入；光标移动到末尾</p></li></ul></li><li><p>b：二进制模式，读写以<code>bytes</code>，可以针对所有文件，不能指定<code>encoding</code>参数</p><ul><li>rb</li><li>wb</li><li>ab</li></ul></li><li><p>+：不能单独使用，必须配合r、w、a</p></li></ul><h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><p>打开文件处理完毕后，需要关闭文件对象；<code>f.close()</code>用来关闭文件并立即释放它占用的所有系统资源。如果没有关闭文件，python的垃圾回收机制最终将销毁该对象并关闭打开文件，但这个文件可能会持续打开一段时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><h3 id="with关键字"><a href="#with关键字" class="headerlink" title="with关键字"></a>with关键字</h3><p>当子句结束后会自动关闭&#x2F;<code>f.close()</code>，即使发生了异常。支持读取多个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f,<span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p><code>f.read()</code> 读取文件数据，文本模式下以<code>str</code>返回，字节模式下返回字节对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><p>f.readline()读取一行数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.readline().decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># b模式读取需要将二进制解码</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><p>写入方法，将字符串写入到文件里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;你好，世界！！&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="writelines"><a href="#writelines" class="headerlink" title="writelines"></a>writelines</h3><p>将一个list写入文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;e.txt&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    li = [</span><br><span class="line">        <span class="string">&#x27;hello\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="comment"># b模式写入需要将字符串按指定字符集转码</span></span><br><span class="line">        <span class="string">&#x27;你好\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">    f.writelines(li)</span><br></pre></td></tr></table></figure><h3 id="案列：使用文件实现数据持久化"><a href="#案列：使用文件实现数据持久化" class="headerlink" title="案列：使用文件实现数据持久化"></a>案列：使用文件实现数据持久化</h3><ul><li><strong>用户注册</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">register_user</span>(<span class="params">name, pwd</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(name+<span class="string">&#x27;:&#x27;</span>+pwd+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>登录功能</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">input_name, input_pwd</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            name,pwd = i.strip().split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> input_name == name <span class="keyword">and</span> input_pwd == pwd:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Login successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Login erro&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入用户名：admin</span><br><span class="line">请输入密码：123</span><br><span class="line">Login successful</span><br></pre></td></tr></table></figure><h3 id="文件指针移动"><a href="#文件指针移动" class="headerlink" title="文件指针移动"></a>文件指针移动</h3><p><strong>字符和字母占1个字节，中文“你好”各占3个字节</strong></p><h4 id="f-read-n"><a href="#f-read-n" class="headerlink" title="f.read(n)"></a>f.read(n)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read(<span class="number">3</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment"># 读取3个字节（bytes）</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode = <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read(<span class="number">3</span>)<span class="comment"># 读取3个字符</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="f-tell"><a href="#f-tell" class="headerlink" title="f.tell()"></a>f.tell()</h4><p>获取当前指针位置</p><h4 id="0模式"><a href="#0模式" class="headerlink" title="0模式"></a>0模式</h4><p><strong>参照文件开头位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode = <span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">0</span>)<span class="comment"># 以行首为参照物向后移动三个字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 好世界hello world!!!</span></span><br></pre></td></tr></table></figure><h4 id="1模式"><a href="#1模式" class="headerlink" title="1模式"></a>1模式</h4><p><strong>参照文件当前位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">1</span>)<span class="comment"># 以当前位置向后移动指针</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 好世界hello world!!!</span></span><br></pre></td></tr></table></figure><h4 id="2模式"><a href="#2模式" class="headerlink" title="2模式"></a>2模式</h4><p><strong>参照文件末尾位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.seek(-<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 23</span></span><br><span class="line"><span class="comment"># !!!</span></span><br></pre></td></tr></table></figure><h3 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;user.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> rf,\</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;user.txt.swap&#x27;</span>, mode = <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> wf:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> rf:</span><br><span class="line">        wf.write(line.replace(<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/python/python_file_operation2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;读写文件是最常见IO操作。Python内置了读写文件的函数。&lt;/p&gt;
&lt;p&gt;在磁盘上读写文件的功能都是由操作系统提供的接口，操作系统是不允许普通的程序直接操作</summary>
      
    
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="文件操作" scheme="https://sqlsafe.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python简介</title>
    <link href="https://sqlsafe.github.io/2022/04/16/Python%E7%AE%80%E4%BB%8B/"/>
    <id>https://sqlsafe.github.io/2022/04/16/Python%E7%AE%80%E4%BB%8B/</id>
    <published>2022-04-16T14:34:23.000Z</published>
    <updated>2022-04-19T15:03:26.318Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.python.org/">Python</a>由荷兰数学和计算机科学研究学会的吉多·范罗苏姆 于1990 年代初设计，作为一门叫做ABC语言的替代品。 Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言， 随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。例如YouTube、豆瓣等。</p><p><img src="/img/python/python_top.png"></p><blockquote><p>Python是著名的“龟叔”Guido van Rossum在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。</p></blockquote><h3 id="Python语言优点"><a href="#Python语言优点" class="headerlink" title="Python语言优点"></a>Python语言优点</h3><p>简单、易学、免费开源、 面向对象、可扩展性、可嵌入性、丰富的库、规范的代码、高级编程语言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;由荷兰数学和计算机科学研究学会的吉多·范罗苏姆 于1990 年代初设计，作为一门叫做ABC语言的替代品。 Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语</summary>
      
    
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="markdown" scheme="https://sqlsafe.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub Pages搭建博客</title>
    <link href="https://sqlsafe.github.io/2022/04/12/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://sqlsafe.github.io/2022/04/12/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-04-12T15:51:46.000Z</published>
    <updated>2022-04-19T14:32:54.618Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是hexo？"><a href="#什么是hexo？" class="headerlink" title="什么是hexo？"></a>什么是hexo？</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p><a href="http://nodejs.org/">Node.js</a>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p><ul><li><p>修改淘宝npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry==https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="http://git-scm.com/">Git</a></p></li></ul><p>安装Hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><ul><li>初始化博客</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;bolg-site&gt;</span><br></pre></td></tr></table></figure><ul><li>运行博客</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>浏览器输入localhost:4000</li></ul><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>网站的配置信息</p><p><strong>package.json</strong></p><p>应用程序的信息</p><p><strong>scaffolds</strong></p><p>模板文件夹</p><p><strong>source</strong></p><p>资源文件夹存放用户资源的地方</p><p><strong>themes</strong></p><p>主题文件夹</p><h5 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h5><ul><li>下载主题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;bolg-site&gt;</span><br><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure><ul><li>主题配置（更新_config_yml）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h5 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h5><ul><li>安装deploy插件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><ul><li>清除缓存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><ul><li>自动部署</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是hexo？&quot;&gt;&lt;a href=&quot;#什么是hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是hexo？&quot;&gt;&lt;/a&gt;什么是hexo？&lt;/h4&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://</summary>
      
    
    
    
    <category term="Docs文档" scheme="https://sqlsafe.github.io/categories/Docs%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Hexo" scheme="https://sqlsafe.github.io/tags/Hexo/"/>
    
    <category term="Html" scheme="https://sqlsafe.github.io/tags/Html/"/>
    
    <category term="Github Pages" scheme="https://sqlsafe.github.io/tags/Github-Pages/"/>
    
  </entry>
  
</feed>
