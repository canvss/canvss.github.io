<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stephen Liu</title>
  
  
  <link href="https://sqlsafe.github.io/atom.xml" rel="self"/>
  
  <link href="https://sqlsafe.github.io/"/>
  <updated>2022-04-23T07:04:13.614Z</updated>
  <id>https://sqlsafe.github.io/</id>
  
  <author>
    <name>Stephen Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建型模式</title>
    <link href="https://sqlsafe.github.io/2022/04/21/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://sqlsafe.github.io/2022/04/21/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-21T15:12:51.000Z</published>
    <updated>2022-04-23T07:04:13.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建型模式（Creational-Design-Patterns）"><a href="#创建型模式（Creational-Design-Patterns）" class="headerlink" title="创建型模式（Creational Design Patterns）"></a>创建型模式（Creational Design Patterns）</h1><p><strong>提供创建对象的机制，增加已有代码的灵活性和可复用性。</strong></p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li><p>内容：结构不直接向客户端暴露对象创建的实现细节，而是通过一个工厂类负责创建产品类的实列。</p></li><li><p>角色：</p><ul><li><p>工厂角色（Creator）</p></li><li><p>抽象产品角色（Product）</p></li><li><p>具体产品角色（Concrete Product）</p></li></ul></li><li><p>优点</p><ul><li>隐藏了对象创建的实现细节</li><li>客户端不需要修改代码</li></ul></li><li><p>缺点</p><ul><li>违反了单一职责原则，将创建逻辑集中到一个工厂类里面</li><li>当添加新产品时，需要修改工厂类代码，违反了开闭原则</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 具体产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, isHuabei = <span class="literal">False</span></span>):</span><br><span class="line">        self.isHuabei = isHuabei</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">if</span> self.isHuabei:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝花呗支付了%d元&#x27;</span> % money)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentFactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self,payment_method</span>):</span><br><span class="line">        <span class="keyword">if</span> payment_method == <span class="string">&#x27;Alipay&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Alipay()</span><br><span class="line">        <span class="keyword">elif</span> payment_method == <span class="string">&#x27;Wechatpay&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Wechatpay()</span><br><span class="line">        <span class="keyword">elif</span> payment_method == <span class="string">&#x27;Huabei&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Alipay(isHuabei=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;No such payment named % s&#x27;</span> % payment_method)</span><br><span class="line"></span><br><span class="line">PaymentFactory().create_payment(<span class="string">&#x27;Huabei&#x27;</span>).pay(<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul><li>内容：定义一个用于创建对象的接口（工厂接口），让子类决定实例化哪一个产品类。</li><li>角色：<ul><li>抽象工厂角色（Creator）</li><li>具体工厂角色（Concrete Creator）</li><li>抽象产品角色（Product）</li><li>具体产品角色（Concrete Product）</li></ul></li><li>优点：<ul><li>每个具体产品都对应一个具体工厂类，不需要修改工厂类的代码</li><li>隐藏了对象创建的实现细节</li></ul></li><li>缺点<ul><li>每增加一个具体产品类，就必须增加一个相应的具体工厂类</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 具体产品角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, isHuabei = <span class="literal">False</span></span>):</span><br><span class="line">        self.isHuabei = isHuabei</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">if</span> self.isHuabei:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝花呗支付了%d元&#x27;</span> % money)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentFactory</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 具体工厂角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlipayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Alipay()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WechatpayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Wechatpay()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuabeipayFactory</span>(<span class="title class_ inherited__">PaymentFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_payment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Alipay(isHuabei=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">pay = WechatpayFactory().create_payment()</span><br><span class="line">pay.pay(<span class="number">500</span>)</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul><li>内容：定义一个工厂类接口，让工厂子类来创建一系列相关或相互依赖的对象</li><li>例如：生产一部手机，需要手机壳、CPU、操作系统三类对象进行组装，其中每类对象都有不同的种类。对每个具体工厂，分别生产一部手机所需要的三个对象。</li><li>相比工厂方法模式，抽象工厂模式中的每个具体工厂都生产一套产品。</li><li>优点：<ul><li>将客户端与类的具体实现相分离</li><li>每个工厂创建了一个完整的产品系列，使得易于交换产品系列</li><li>有利于产品的一致性（即产品之间的约束关系）</li></ul></li><li>缺点：<ul><li>难以支持新种类的（抽象）产品</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----抽象产品----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneShell</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneCPU</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneOS</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----具体的产品----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmallShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;普通小手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BigShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;普通大手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleShell</span>(<span class="title class_ inherited__">PhoneShell</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;苹果手机壳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SnapDragonCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;骁龙CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuaweiCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;华为CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleCPU</span>(<span class="title class_ inherited__">PhoneCPU</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;苹果CPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AndroidOS</span>(<span class="title class_ inherited__">PhoneOS</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;安卓系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleOS</span>(<span class="title class_ inherited__">PhoneOS</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ios系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- 抽象工厂----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneFactory</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----具体工厂----</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppleFactory</span>(<span class="title class_ inherited__">PhoneFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleShell()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleCPU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AppleOS()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuaweiFactory</span>(<span class="title class_ inherited__">PhoneFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_shell</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> BigShell()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cpu</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> HuaweiCPU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_os</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> AndroidOS()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shell, cpu, os</span>):</span><br><span class="line">        self.shell = shell</span><br><span class="line">        self.cpu = cpu</span><br><span class="line">        self.os = os</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_phone_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Phone INFO：&#x27;</span>)</span><br><span class="line">        self.shell.show_shell()</span><br><span class="line">        self.cpu.show_cpu()</span><br><span class="line">        self.os.show_os()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_phone</span>(<span class="params">factory</span>):</span><br><span class="line">    shell = factory.make_shell()</span><br><span class="line">    cpu = factory.make_cpu()</span><br><span class="line">    os = factory.make_os()</span><br><span class="line">    <span class="keyword">return</span> Phone(shell, cpu, os)</span><br><span class="line"></span><br><span class="line">apple = make_phone(AppleFactory())</span><br><span class="line">apple.show_phone_info()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建型模式（Creational-Design-Patterns）&quot;&gt;&lt;a href=&quot;#创建型模式（Creational-Design-Patterns）&quot; class=&quot;headerlink&quot; title=&quot;创建型模式（Creational Design Pa</summary>
      
    
    
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="创建型模式" scheme="https://sqlsafe.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://sqlsafe.github.io/2022/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://sqlsafe.github.io/2022/04/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-04-21T13:11:30.000Z</published>
    <updated>2022-04-21T16:52:55.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式-Design-Patterns"><a href="#设计模式-Design-Patterns" class="headerlink" title="设计模式(Design Patterns)"></a>设计模式(Design Patterns)</h2><ul><li><p>设计模式：对<strong>软件设计</strong>中普遍存在（反复出现）的各种问题，所提出的解决方案。每一个设计模式系统的命名、解释和评价了<strong>面向对象系统</strong>中一个重要的和重复出现的设计。</p></li><li><p>”四人帮“（Gan of Four, GoF）：</p><ul><li>Erich Gamma,Richard Helm,Ralph Johnson,John Vlissides</li></ul></li><li><p>《设计模式：可复用面向对象软件的基础》</p></li></ul><h2 id="面向对象-Object-Oriented-Programming"><a href="#面向对象-Object-Oriented-Programming" class="headerlink" title="面向对象(Object Oriented Programming)"></a>面向对象(Object Oriented Programming)</h2><h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><ul><li>封装：在Class内部，可以有属性和方法，二外部代码可以通过直接调用实列变量的方法来操作数据，隐藏内部的复杂逻辑。</li><li>继承：在OOP程序设计中，定义一个class的时候，可以从某个现有的class继承，新的class称为子类，而被继承的class称为父类、基类。</li><li>多态：当子类和父类存在相同的方法时，子类的方法覆盖父类的方法，在代码运行时，总是会调用子类的方法。</li></ul><h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h3><p>接口：若干抽象方法的集合。</p><ul><li>作用：限制实现接口的类必须按照接口给定的调用方法实现，这些方法；对高层模块隐藏了类的内部实现。</li></ul><p><strong>继承实现接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><p><strong>抽象类(abstract)实现接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="comment"># abstract class </span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self,money</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><h2 id="面向对象设计SOLID原则"><a href="#面向对象设计SOLID原则" class="headerlink" title="面向对象设计SOLID原则"></a>面向对象设计SOLID原则</h2><h3 id="开放封闭原则（Open-Closed-Principle）"><a href="#开放封闭原则（Open-Closed-Principle）" class="headerlink" title="开放封闭原则（Open Closed Principle）"></a>开放封闭原则（Open Closed Principle）</h3><p>一个软件实体如类、模块和函数应该<strong>对扩展开放，对修改闭合</strong>。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p><h3 id="里氏替换原则（Liskov-Substitution-principle）"><a href="#里氏替换原则（Liskov-Substitution-principle）" class="headerlink" title="里氏替换原则（Liskov Substitution principle）"></a>里氏替换原则（Liskov Substitution principle）</h3><p>所有引用父类的地方必须能<strong>透明地使用其子类的对象</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类和父类方法内部实现逻辑可能不同，但参数和返回值类型都是一致的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_name</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIPUser</span>(<span class="title class_ inherited__">User</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_name</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><h3 id="依赖倒置原则（Dependence-Inversion-Principle）"><a href="#依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependence Inversion Principle）"></a>依赖倒置原则（Dependence Inversion Principle）</h3><p>高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。换言之，<strong>要面向接口编程，而不是面向实现编程</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):</span><br><span class="line">    <span class="comment"># abstract class </span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 细节</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alipay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;支付宝支付了%d元&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechatpay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;微信支付了%d元&#x27;</span> % money)</span><br></pre></td></tr></table></figure><h3 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h3><p>使用多个专门的接口，而不使用单一的总接口，即<strong>客户端不应该依赖那些它不需要的接口</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LandAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaterAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SkyAnimal</span>(metaclass=ABCMeta):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>(<span class="title class_ inherited__">LandAnimal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;老虎在走路...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frag</span>(LandAnimal,WaterAnimal):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;青蛙在走路...&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;青蛙在游泳...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">frag = Frag()</span><br><span class="line">frag.swim()</span><br><span class="line">frag.walk()</span><br></pre></td></tr></table></figure><h3 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a>单一职责原则（Single Responsibility Principle）</h3><p>不要存在多于一个导致类变更的原因。通俗的说，即<strong>一个类只负责一项职责</strong>。</p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p><strong>提供创建对象的机制，增加已有代码的灵活性和可复用性。</strong></p><ul><li>工厂方法模式</li><li>抽象工厂模式</li><li>创建者模式</li><li>原型模式</li><li>单列模式</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p><strong>如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。</strong></p><ul><li>适配器模式</li><li>桥模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p><strong>负责对象间高效沟通和职责委派。</strong></p><ul><li>解释器模式</li><li>责任链模式</li><li>命令模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>访问者模式</li><li>模板方法模式</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计模式-Design-Patterns&quot;&gt;&lt;a href=&quot;#设计模式-Design-Patterns&quot; class=&quot;headerlink&quot; title=&quot;设计模式(Design Patterns)&quot;&gt;&lt;/a&gt;设计模式(Design Patterns)&lt;/h2</summary>
      
    
    
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="设计模式" scheme="https://sqlsafe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python文件操作</title>
    <link href="https://sqlsafe.github.io/2022/04/18/Python%E6%96%87%E4%BB%B6/"/>
    <id>https://sqlsafe.github.io/2022/04/18/Python%E6%96%87%E4%BB%B6/</id>
    <published>2022-04-18T13:05:52.000Z</published>
    <updated>2022-04-19T14:59:01.126Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/python/python_file_operation2.jpg"></p><p>读写文件是最常见IO操作。Python内置了读写文件的函数。</p><p>在磁盘上读写文件的功能都是由操作系统提供的接口，操作系统是不允许普通的程序直接操作磁盘，所以读写文件就是请求操作系统打开一个文件对象，然后通过系统提供的接口从这个文件对像中读写操作。</p><h2 id="文件操作流程"><a href="#文件操作流程" class="headerlink" title="文件操作流程"></a>文件操作流程</h2><ul><li><p>1、获取操作系统文件对象</p></li><li><p>2、读写操作</p></li><li><p>3、关闭操作系统文件对象</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">res = f.read()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="open函数"><a href="#open函数" class="headerlink" title="open函数"></a>open函数</h3><p>open()是python内置函数，它会返回一个操作系统文件对象，这个对象提供了 <code>read()</code>、<code>write()</code>、<code>close()</code>等方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;文件路径&#x27;</span>,<span class="string">&#x27;文件模式&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 打开操作系统文件对象</span></span><br></pre></td></tr></table></figure><h3 id="mode模式"><a href="#mode模式" class="headerlink" title="mode模式"></a>mode模式</h3><ul><li><p>t（默认）：文本模式，只能针对文本文件，读写都是<code>str</code>为单位的，必须指定<code>encoding</code>参数</p><ul><li><p>rt ：只能读取；文件不存在报错；光标移动到行首</p></li><li><p>wt ：只能写入；文件不存在会创建文件，文件存在会清空文件，光标移动到行首</p></li><li><p>at ：追加写入；光标移动到末尾</p></li></ul></li><li><p>b：二进制模式，读写以<code>bytes</code>，可以针对所有文件，不能指定<code>encoding</code>参数</p><ul><li>rb</li><li>wb</li><li>ab</li></ul></li><li><p>+：不能单独使用，必须配合r、w、a</p></li></ul><h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><p>打开文件处理完毕后，需要关闭文件对象；<code>f.close()</code>用来关闭文件并立即释放它占用的所有系统资源。如果没有关闭文件，python的垃圾回收机制最终将销毁该对象并关闭打开文件，但这个文件可能会持续打开一段时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><h3 id="with关键字"><a href="#with关键字" class="headerlink" title="with关键字"></a>with关键字</h3><p>当子句结束后会自动关闭&#x2F;<code>f.close()</code>，即使发生了异常。支持读取多个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f,<span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p><code>f.read()</code> 读取文件数据，文本模式下以<code>str</code>返回，字节模式下返回字节对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read()</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><p>f.readline()读取一行数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;c.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.readline().decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># b模式读取需要将二进制解码</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><p>写入方法，将字符串写入到文件里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;你好，世界！！&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="writelines"><a href="#writelines" class="headerlink" title="writelines"></a>writelines</h3><p>将一个list写入文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;e.txt&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    li = [</span><br><span class="line">        <span class="string">&#x27;hello\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>),<span class="comment"># b模式写入需要将字符串按指定字符集转码</span></span><br><span class="line">        <span class="string">&#x27;你好\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ]</span><br><span class="line">    f.writelines(li)</span><br></pre></td></tr></table></figure><h3 id="案列：使用文件实现数据持久化"><a href="#案列：使用文件实现数据持久化" class="headerlink" title="案列：使用文件实现数据持久化"></a>案列：使用文件实现数据持久化</h3><ul><li><strong>用户注册</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">register_user</span>(<span class="params">name, pwd</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(name+<span class="string">&#x27;:&#x27;</span>+pwd+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>登录功能</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">input_name, input_pwd</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            name,pwd = i.strip().split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> input_name == name <span class="keyword">and</span> input_pwd == pwd:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Login successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Login erro&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入用户名：admin</span><br><span class="line">请输入密码：123</span><br><span class="line">Login successful</span><br></pre></td></tr></table></figure><h3 id="文件指针移动"><a href="#文件指针移动" class="headerlink" title="文件指针移动"></a>文件指针移动</h3><p><strong>字符和字母占1个字节，中文“你好”各占3个字节</strong></p><h4 id="f-read-n"><a href="#f-read-n" class="headerlink" title="f.read(n)"></a>f.read(n)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read(<span class="number">3</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment"># 读取3个字节（bytes）</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode = <span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    res = f.read(<span class="number">3</span>)<span class="comment"># 读取3个字符</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="f-tell"><a href="#f-tell" class="headerlink" title="f.tell()"></a>f.tell()</h4><p>获取当前指针位置</p><h4 id="0模式"><a href="#0模式" class="headerlink" title="0模式"></a>0模式</h4><p><strong>参照文件开头位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode = <span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">0</span>)<span class="comment"># 以行首为参照物向后移动三个字节</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 好世界hello world!!!</span></span><br></pre></td></tr></table></figure><h4 id="1模式"><a href="#1模式" class="headerlink" title="1模式"></a>1模式</h4><p><strong>参照文件当前位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">3</span>,<span class="number">1</span>)<span class="comment"># 以当前位置向后移动指针</span></span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 好世界hello world!!!</span></span><br></pre></td></tr></table></figure><h4 id="2模式"><a href="#2模式" class="headerlink" title="2模式"></a>2模式</h4><p><strong>参照文件末尾位置移动指针</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.seek(-<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.tell())</span><br><span class="line">    <span class="built_in">print</span>(f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 23</span></span><br><span class="line"><span class="comment"># !!!</span></span><br></pre></td></tr></table></figure><h3 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;user.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> rf,\</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;user.txt.swap&#x27;</span>, mode = <span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> wf:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> rf:</span><br><span class="line">        wf.write(line.replace(<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/img/python/python_file_operation2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;读写文件是最常见IO操作。Python内置了读写文件的函数。&lt;/p&gt;
&lt;p&gt;在磁盘上读写文件的功能都是由操作系统提供的接口，操作系统是不允许普通的程序直接操作</summary>
      
    
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="文件操作" scheme="https://sqlsafe.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python简介</title>
    <link href="https://sqlsafe.github.io/2022/04/16/Python%E7%AE%80%E4%BB%8B/"/>
    <id>https://sqlsafe.github.io/2022/04/16/Python%E7%AE%80%E4%BB%8B/</id>
    <published>2022-04-16T14:34:23.000Z</published>
    <updated>2022-04-19T15:03:26.318Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.python.org/">Python</a>由荷兰数学和计算机科学研究学会的吉多·范罗苏姆 于1990 年代初设计，作为一门叫做ABC语言的替代品。 Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言， 随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。例如YouTube、豆瓣等。</p><p><img src="/img/python/python_top.png"></p><blockquote><p>Python是著名的“龟叔”Guido van Rossum在1989年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。</p></blockquote><h3 id="Python语言优点"><a href="#Python语言优点" class="headerlink" title="Python语言优点"></a>Python语言优点</h3><p>简单、易学、免费开源、 面向对象、可扩展性、可嵌入性、丰富的库、规范的代码、高级编程语言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;由荷兰数学和计算机科学研究学会的吉多·范罗苏姆 于1990 年代初设计，作为一门叫做ABC语言的替代品。 Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语</summary>
      
    
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="markdown" scheme="https://sqlsafe.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub Pages搭建博客</title>
    <link href="https://sqlsafe.github.io/2022/04/12/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://sqlsafe.github.io/2022/04/12/Hexo-GitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-04-12T15:51:46.000Z</published>
    <updated>2022-04-19T14:32:54.618Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是hexo？"><a href="#什么是hexo？" class="headerlink" title="什么是hexo？"></a>什么是hexo？</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p><a href="http://nodejs.org/">Node.js</a>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p><ul><li><p>修改淘宝npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry==https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="http://git-scm.com/">Git</a></p></li></ul><p>安装Hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><ul><li>初始化博客</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;bolg-site&gt;</span><br></pre></td></tr></table></figure><ul><li>运行博客</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>浏览器输入localhost:4000</li></ul><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>网站的配置信息</p><p><strong>package.json</strong></p><p>应用程序的信息</p><p><strong>scaffolds</strong></p><p>模板文件夹</p><p><strong>source</strong></p><p>资源文件夹存放用户资源的地方</p><p><strong>themes</strong></p><p>主题文件夹</p><h5 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h5><ul><li>下载主题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;bolg-site&gt;</span><br><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure><ul><li>主题配置（更新_config_yml）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h5 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h5><ul><li>安装deploy插件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><ul><li>清除缓存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><ul><li>自动部署</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是hexo？&quot;&gt;&lt;a href=&quot;#什么是hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是hexo？&quot;&gt;&lt;/a&gt;什么是hexo？&lt;/h4&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://</summary>
      
    
    
    
    <category term="Docs文档" scheme="https://sqlsafe.github.io/categories/Docs%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Hexo" scheme="https://sqlsafe.github.io/tags/Hexo/"/>
    
    <category term="Html" scheme="https://sqlsafe.github.io/tags/Html/"/>
    
    <category term="Github Pages" scheme="https://sqlsafe.github.io/tags/Github-Pages/"/>
    
  </entry>
  
</feed>
