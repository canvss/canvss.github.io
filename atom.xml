<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stephen Liu</title>
  
  <subtitle>网络日志</subtitle>
  <link href="https://sqlsafe.github.io/atom.xml" rel="self"/>
  
  <link href="https://sqlsafe.github.io/"/>
  <updated>2022-04-28T13:55:04.338Z</updated>
  <id>https://sqlsafe.github.io/</id>
  
  <author>
    <name>Stephen Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RESTful API</title>
    <link href="https://sqlsafe.github.io/2022/04/28/restful-api/"/>
    <id>https://sqlsafe.github.io/2022/04/28/restful-api/</id>
    <published>2022-04-28T13:46:39.000Z</published>
    <updated>2022-04-28T13:55:04.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h1><p>API（Application Programming Interface：应用程序接口）是一些预先定义的借口（如函数、HTTP接口），或指软件系统不同组成部分分衔接的约定。</p><p>RESTful于2000年由Roy Fielding首次引入，是一种<strong>经常用于互联网服务开发（分布式超媒体系统）的架构风格和方法</strong>。</p><blockquote><p>REST API 的完整形式是 Representational State Transfer Application Programming Interface，通常称为 Rest API Web 服务。这意味着当调用 RESTful API 时，服务器会将请求的资源<em>状态</em>的<em>表示**传输</em>到客户端系统。</p></blockquote><p><img src="/static/imgs/rest_api/rf-01.png"></p><h2 id="REST-API-如何工作"><a href="#REST-API-如何工作" class="headerlink" title="REST API 如何工作"></a>REST API 如何工作</h2><p>REST确定API的结构。开发人员在构建API时必须遵守一组特定的规则。</p><p>每个URL都称为请求，而返回的数据称为响应。</p><p>REST API分解事务以生成一系列小组件。每个组件都解决事务的特定方面。</p><p>REST API利用<a href="http://www.cnpaf.net/Class/HTTP/200811/23277.html">RFC 2616协议</a>描述的HTTP方法</p><ul><li>GET获取数据</li><li>PUT更改数据状态</li><li>POST创建数据</li><li>DELETE方法来删除数据</li></ul><h2 id="REST的指导原则"><a href="#REST的指导原则" class="headerlink" title="REST的指导原则"></a>REST的指导原则</h2><h3 id="RESTful架构的六个指导原则或约束："><a href="#RESTful架构的六个指导原则或约束：" class="headerlink" title="RESTful架构的六个指导原则或约束："></a>RESTful架构的六个指导原则或约束：</h3><h3 id="1-统一接口"><a href="#1-统一接口" class="headerlink" title="1.统一接口"></a>1.统一接口</h3><p>一个统一的REST接口可以通过四个约束实现：</p><ul><li>资源标识：接口必须能够唯一地标识客户端和服务器之间交互中涉及的每个单独资源。</li><li>通过表示操作资源：资源应该在服务器响应中具有统一的标识，这些标识应该用于修改服务器中的资源状态。</li><li>自描述消息：每个资源标识应该携带足够的信息来描述如何处理消息。它还应该提供可以对资源执行的附加操作的信息。</li><li>超媒体作为应用程序状态的引擎：客户端应该只有应用程序的初始URI。所有其他资源和交互由客户端应用程序使用超链接动态驱动。</li></ul><h3 id="2-客户端服务器（C-S架构）"><a href="#2-客户端服务器（C-S架构）" class="headerlink" title="2.客户端服务器（C-S架构）"></a>2.客户端服务器（C-S架构）</h3><p>这一设计原则基于客户端和服务器应该彼此隔离并允许独立开发的概念。通过将前后端分离，提高了客户端跨多个平台移植性，并通过简化服务器组件提高了可扩展性。</p><h3 id="3-无状态"><a href="#3-无状态" class="headerlink" title="3.无状态"></a>3.无状态</h3><p>无状态是强制性的，从客户端到服务器的每个请求都必须包含解释和完成请求所需的所有信息。</p><p>服务器无法利用任何之前存储在服务器上的上下文信息；因此，会话状态完全保留在客户端。</p><h3 id="4-可缓存"><a href="#4-可缓存" class="headerlink" title="4.可缓存"></a>4.可缓存</h3><p>由于无状态API可以通过管理大量入站和出战调用来增加请求开销，因此REST API 设计应该能够存储可缓存的数据。根据这个API设计原则，响应中 的数据应该间接或明确的归类为可缓存或不可缓存。</p><p>如果响应是可缓存的，则客户端缓存有权在将来为类似请求回收该响应数据。</p><h3 id="5-分层系统"><a href="#5-分层系统" class="headerlink" title="5.分层系统"></a>5.分层系统</h3><p>分层系统风格通过约束组件行为允许架构由分层组成；在分层系统中，每个组件都无法看到与其交互的直接层之外的内容。</p><h3 id="6-按需编码、可定制代码"><a href="#6-按需编码、可定制代码" class="headerlink" title="6.按需编码、可定制代码"></a>6.按需编码、可定制代码</h3><p>REST还允许通过下载和执行小程序或脚本形式的代码来扩展客户端功能。</p><p>这通过减少药预先实现的功能数量来简化客户端。服务器可以将部分功能以代码的形式提供给客户端，客户端只需要执行代码即可。</p><blockquote><p>与其他架构风格一样，REST有自己的指导原则和约束。如果需要将服务器接口定义为RESTful，就必须要满足这些原则。</p></blockquote><h3 id="REST-和-HTTP-不一样"><a href="#REST-和-HTTP-不一样" class="headerlink" title="REST 和 HTTP 不一样"></a>REST 和 HTTP 不一样</h3><blockquote><p>REST !&#x3D; HTTP</p></blockquote><p>由于REST打算使用互联网更加精简和标准化，Roy fielding提倡更严格地使用REST原则。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;REST-API&quot;&gt;&lt;a href=&quot;#REST-API&quot; class=&quot;headerlink&quot; title=&quot;REST API&quot;&gt;&lt;/a&gt;REST API&lt;/h1&gt;&lt;p&gt;API（Application Programming Interface：应用程序接口）是</summary>
      
    
    
    
    <category term="Python Web" scheme="https://sqlsafe.github.io/categories/Python-Web/"/>
    
    
    <category term="Web" scheme="https://sqlsafe.github.io/tags/Web/"/>
    
    <category term="rest" scheme="https://sqlsafe.github.io/tags/rest/"/>
    
    <category term="API" scheme="https://sqlsafe.github.io/tags/API/"/>
    
    <category term="get" scheme="https://sqlsafe.github.io/tags/get/"/>
    
    <category term="post" scheme="https://sqlsafe.github.io/tags/post/"/>
    
    <category term="PUT" scheme="https://sqlsafe.github.io/tags/PUT/"/>
    
    <category term="DELETE" scheme="https://sqlsafe.github.io/tags/DELETE/"/>
    
    <category term="RFC 2616协议" scheme="https://sqlsafe.github.io/tags/RFC-2616%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python手写WebServer</title>
    <link href="https://sqlsafe.github.io/2022/04/28/WebServer/"/>
    <id>https://sqlsafe.github.io/2022/04/28/WebServer/</id>
    <published>2022-04-28T13:20:08.000Z</published>
    <updated>2022-04-28T13:42:30.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebService"><a href="#WebService" class="headerlink" title="WebService"></a>WebService</h1><h2 id="手写一个web服务器程序"><a href="#手写一个web服务器程序" class="headerlink" title="手写一个web服务器程序"></a>手写一个web服务器程序</h2><p>实现 HTTP Server 必知的前置知识既然，我们要实现 HTTP Server 那必然先要回顾一下 HTTP 协议相关的基础知识。HTTP 协议超文本传输协议（HTTP，HyperText Transfer Protocol)主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的，整个过程如下图所示。</p><p><img src="/static/imgs/django/img_7.png"></p><h3 id="创建socket对象"><a href="#创建socket对象" class="headerlink" title="创建socket对象"></a>创建socket对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8083</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获取conn，addr</span></span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    <span class="comment"># 获取浏览器传来的数据</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    conn.send(<span class="string">b&#x27;hello world!&#x27;</span>)</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><p><img src="/static/imgs/django/img_1.png"></p><p><strong>访问127.0.0.1:8083,因为返回给浏览器数据(不符合http协议)，所以浏览器响应失败。</strong></p><h3 id="响应符合HTML格式的数据"><a href="#响应符合HTML格式的数据" class="headerlink" title="响应符合HTML格式的数据"></a>响应符合HTML格式的数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8083</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获取conn，addr</span></span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    <span class="comment"># 获取浏览器传来的数据</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    conn.send(<span class="string">b&#x27;HTTP/1.1\r\n ok \r\n 200 \r\n\r\nhello world!&#x27;</span>)</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><p><img src="/static/imgs/django/img.png" width="100%"></img></p><h3 id="响应HTML文件"><a href="#响应HTML文件" class="headerlink" title="响应HTML文件"></a>响应HTML文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server = socket.socket()</span><br><span class="line">addr = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">8081</span></span><br><span class="line">server.bind((addr,port))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;web服务器启动成功！%s:%s&#x27;</span>%(addr,port))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获取conn，addr</span></span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    <span class="comment"># 获取浏览器传来的数据</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 读取html</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;html/index.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    res = <span class="string">&#x27;HTTP/1.1\r\n ok \r\n 200 \r\n\r\n %s&#x27;</span>%data</span><br><span class="line">    conn.send(res.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 关闭conn</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><p><strong>通过浏览器向服务器发起访问请求，服务器响应一个html页面</strong></p><p><img src="/static/imgs/django/img_2.png"></p><h3 id="replace给静态HTML传参"><a href="#replace给静态HTML传参" class="headerlink" title="replace给静态HTML传参"></a>replace给静态HTML传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server = socket.socket()</span><br><span class="line">addr = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">8086</span></span><br><span class="line">server.bind((addr,port))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;web服务器启动成功！%s:%s&#x27;</span>%(addr,port))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获取conn，addr</span></span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    <span class="comment"># 获取浏览器传来的数据</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    time = datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;html/index.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().replace(<span class="string">&#x27;&#123;&#123;time&#125;&#125;&#x27;</span>,<span class="built_in">str</span>(time))</span><br><span class="line"></span><br><span class="line">    response = <span class="string">&#x27;HTTP/1.1 200 ok \r\n\r\n %s&#x27;</span> % data</span><br><span class="line">    conn.send(response.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h4 id="动态传入时间参数"><a href="#动态传入时间参数" class="headerlink" title="动态传入时间参数"></a>动态传入时间参数</h4><p><img src="/static/imgs/django/img_3.png" width="100%"></img></p><h3 id="通过wsgi接口实现更加完整的web服务"><a href="#通过wsgi接口实现更加完整的web服务" class="headerlink" title="通过wsgi接口实现更加完整的web服务"></a>通过wsgi接口实现更加完整的web服务</h3><h4 id="wsgi-service-py"><a href="#wsgi-service-py" class="headerlink" title="wsgi_service.py"></a>wsgi_service.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ,start_response</span>):</span><br><span class="line">    <span class="comment"># 获取请求path</span></span><br><span class="line">    pathinfo = environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>)</span><br><span class="line">    <span class="comment"># 返回响应头设置</span></span><br><span class="line">    start_response(<span class="string">&quot;200 OK&quot;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    func = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> url_patterns:</span><br><span class="line">        <span class="keyword">if</span> pathinfo == item[<span class="number">0</span>]:</span><br><span class="line">            func = item[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> func:</span><br><span class="line">        <span class="keyword">return</span> [func(environ)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this is 404 not found!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> [read_data(<span class="string">&#x27;html/404notFound.html&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">addr = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">8086</span></span><br><span class="line">httped = make_server(addr,port,application)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;web服务器启动成功！%s:%s&#x27;</span>%(addr,port))</span><br><span class="line"><span class="comment"># 开始监听http请求</span></span><br><span class="line">httped.serve_forever()</span><br></pre></td></tr></table></figure><h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">url_patterns=[</span><br><span class="line">        (<span class="string">&#x27;/login&#x27;</span>,login),</span><br><span class="line">        (<span class="string">&#x27;/index&#x27;</span>,index),</span><br><span class="line">        (<span class="string">&#x27;/favicon.ico&#x27;</span>,favicon)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.read_data_utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">return</span> read_data(<span class="string">&#x27;html/login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="built_in">print</span>(environ)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">favicon</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">return</span> read_data(<span class="string">&#x27;images/favicon.ico&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="utils-py"><a href="#utils-py" class="headerlink" title="utils.py"></a>utils.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p><strong>浏览器向服务器发送请求对象，使用wsgi进行了封装。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;PATH&#x27;: &#x27;/Users/endless/.local/share/virtualenvs/DiyWebService-Hu0I6zVr/bin:/Library/Frameworks/Python.framework/Versions/3.8/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/anaconda3/bin&#x27;, &#x27;MANPATH&#x27;: &#x27;/opt/homebrew/share/man:/opt/homebrew/share/man:::&#x27;, &#x27;HOMEBREW_PREFIX&#x27;: &#x27;/opt/homebrew&#x27;, &#x27;COMMAND_MODE&#x27;: &#x27;unix2003&#x27;, &#x27;PS1&#x27;: &#x27;(DiyWebService) &#x27;, &#x27;VERSIONER_PYTHON_VERSION&#x27;: &#x27;2.7&#x27;, &#x27;LOGNAME&#x27;: &#x27;endless&#x27;, &#x27;HOMEBREW_REPOSITORY&#x27;: &#x27;/opt/homebrew&#x27;, &#x27;XPC_SERVICE_NAME&#x27;: &#x27;application.com.jetbrains.pycharm.934647.935515&#x27;, &#x27;PWD&#x27;: &#x27;/Users/endless/PycharmProjects/DiyWebService&#x27;, &#x27;PYCHARM_HOSTED&#x27;: &#x27;1&#x27;, &#x27;INFOPATH&#x27;: &#x27;/opt/homebrew/share/info:/opt/homebrew/share/info:&#x27;, &#x27;PYCHARM_DISPLAY_PORT&#x27;: &#x27;63342&#x27;, &#x27;__CFBundleIdentifier&#x27;: &#x27;com.jetbrains.pycharm&#x27;, &#x27;PYTHONPATH&#x27;: &#x27;/Users/endless/PycharmProjects/DiyWebService:/Applications/PyCharm.app/Contents/plugins/python/helpers/pycharm_matplotlib_backend:/Applications/PyCharm.app/Contents/plugins/python/helpers/pycharm_display&#x27;, &#x27;SHELL&#x27;: &#x27;/bin/zsh&#x27;, &#x27;PYTHONIOENCODING&#x27;: &#x27;UTF-8&#x27;, &#x27;HOMEBREW_BOTTLE_DOMAIN&#x27;: &#x27;https://mirrors.ustc.edu.cn/homebrew-bottles/bottles&#x27;, &#x27;HOMEBREW_CELLAR&#x27;: &#x27;/opt/homebrew/Cellar&#x27;, &#x27;OLDPWD&#x27;: &#x27;/&#x27;, &#x27;USER&#x27;: &#x27;endless&#x27;, &#x27;TMPDIR&#x27;: &#x27;/var/folders/bv/5_j5gqkn59l9rr9vdbwx0n980000gn/T/&#x27;, &#x27;SSH_AUTH_SOCK&#x27;: &#x27;/private/tmp/com.apple.launchd.c0ShkjTtMr/Listeners&#x27;, &#x27;VIRTUAL_ENV&#x27;: &#x27;/Users/endless/.local/share/virtualenvs/DiyWebService-Hu0I6zVr&#x27;, &#x27;XPC_FLAGS&#x27;: &#x27;0x0&#x27;, &#x27;PYTHONUNBUFFERED&#x27;: &#x27;1&#x27;, &#x27;__CF_USER_TEXT_ENCODING&#x27;: &#x27;0x1F5:0x19:0x34&#x27;, &#x27;LC_CTYPE&#x27;: &#x27;zh_CN.UTF-8&#x27;, &#x27;HOME&#x27;: &#x27;/Users/endless&#x27;, &#x27;SERVER_NAME&#x27;: &#x27;1.0.0.127.in-addr.arpa&#x27;, &#x27;GATEWAY_INTERFACE&#x27;: &#x27;CGI/1.1&#x27;, &#x27;SERVER_PORT&#x27;: &#x27;8086&#x27;, &#x27;REMOTE_HOST&#x27;: &#x27;&#x27;, &#x27;CONTENT_LENGTH&#x27;: &#x27;25&#x27;, &#x27;SCRIPT_NAME&#x27;: &#x27;&#x27;, &#x27;SERVER_PROTOCOL&#x27;: &#x27;HTTP/1.1&#x27;, &#x27;SERVER_SOFTWARE&#x27;: &#x27;WSGIServer/0.2&#x27;, &#x27;REQUEST_METHOD&#x27;: &#x27;POST&#x27;, &#x27;PATH_INFO&#x27;: &#x27;/login/&#x27;, &#x27;QUERY_STRING&#x27;: &#x27;&#x27;, &#x27;REMOTE_ADDR&#x27;: &#x27;127.0.0.1&#x27;, &#x27;CONTENT_TYPE&#x27;: &#x27;application/x-www-form-urlencoded&#x27;, &#x27;HTTP_HOST&#x27;: &#x27;127.0.0.1:8086&#x27;, &#x27;HTTP_CONNECTION&#x27;: &#x27;keep-alive&#x27;, &#x27;HTTP_CACHE_CONTROL&#x27;: &#x27;max-age=0&#x27;, &#x27;HTTP_SEC_CH_UA&#x27;: &#x27;&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;91&quot;, &quot;Chromium&quot;;v=&quot;91&quot;&#x27;, &#x27;HTTP_SEC_CH_UA_MOBILE&#x27;: &#x27;?0&#x27;, &#x27;HTTP_UPGRADE_INSECURE_REQUESTS&#x27;: &#x27;1&#x27;, &#x27;HTTP_ORIGIN&#x27;: &#x27;http://127.0.0.1:8086&#x27;, &#x27;HTTP_USER_AGENT&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36&#x27;, &#x27;HTTP_ACCEPT&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;, &#x27;HTTP_SEC_FETCH_SITE&#x27;: &#x27;same-origin&#x27;, &#x27;HTTP_SEC_FETCH_MODE&#x27;: &#x27;navigate&#x27;, &#x27;HTTP_SEC_FETCH_USER&#x27;: &#x27;?1&#x27;, &#x27;HTTP_SEC_FETCH_DEST&#x27;: &#x27;document&#x27;, &#x27;HTTP_REFERER&#x27;: &#x27;http://127.0.0.1:8086/login&#x27;, &#x27;HTTP_ACCEPT_ENCODING&#x27;: &#x27;gzip, deflate, br&#x27;, &#x27;HTTP_ACCEPT_LANGUAGE&#x27;: &#x27;zh-CN,zh;q=0.9&#x27;, &#x27;HTTP_COOKIE&#x27;: &#x27;csrftoken=brbgdnWhp8zQ8wwkSiUH9izvDE9YtJDrq6mrKW8RMWEsgcOLWNloJIZR7OwGUoRb; sessionid=luct6y3o6m37h7rpy308nc6ccrk6kvhq&#x27;, &#x27;wsgi.input&#x27;: &lt;_io.BufferedReader name=5&gt;, &#x27;wsgi.errors&#x27;: &lt;_io.TextIOWrapper name=&#x27;&lt;stderr&gt;&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf-8&#x27;&gt;, &#x27;wsgi.version&#x27;: (1, 0), &#x27;wsgi.run_once&#x27;: False, &#x27;wsgi.url_scheme&#x27;: &#x27;http&#x27;, &#x27;wsgi.multithread&#x27;: False, &#x27;wsgi.multiprocess&#x27;: False, &#x27;wsgi.file_wrapper&#x27;: &lt;class &#x27;wsgiref.util.FileWrapper&#x27;&gt;&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端向服务器发送&#x2F;login请求，服务器响应login.html页面</strong></p><p><img src="/static/imgs/django/img_4.png" width="100%"></img></p><p><strong>当服务器找不到该资源，将返回404页面</strong></p><p><img src="/static/imgs/django/img_5.png" width="100%"></img></p><h4 id="登录页面验证（POST）"><a href="#登录页面验证（POST）" class="headerlink" title="登录页面验证（POST）"></a>登录页面验证（POST）</h4><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WebService&quot;&gt;&lt;a href=&quot;#WebService&quot; class=&quot;headerlink&quot; title=&quot;WebService&quot;&gt;&lt;/a&gt;WebService&lt;/h1&gt;&lt;h2 id=&quot;手写一个web服务器程序&quot;&gt;&lt;a href=&quot;#手写一个web服务</summary>
      
    
    
    
    <category term="Python Web" scheme="https://sqlsafe.github.io/categories/Python-Web/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="Web" scheme="https://sqlsafe.github.io/tags/Web/"/>
    
    <category term="HTML" scheme="https://sqlsafe.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>GitHub</title>
    <link href="https://sqlsafe.github.io/2022/04/28/GitHub/"/>
    <id>https://sqlsafe.github.io/2022/04/28/GitHub/</id>
    <published>2022-04-28T12:08:33.000Z</published>
    <updated>2022-04-28T12:52:43.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p><img src="/static/imgs/github/howusegithub.png"></p><p><strong>确切的说 GitHub 是一家公司，位于旧金山，由 Chris Wanstrath, PJ Hyett 与Tom Preston-Werner 三位开发者在2008年4月创办。2008年4月10日，GitHub正式成立，地址：How people build software · GitHub ，主要提供基于git的版本托管服务。一经上线，它的发展速度惊为天人，截止目前，GitHub 已经发展成全球最大的开（同）源（性）社区。</strong></p><h2 id="如何使用Github？"><a href="#如何使用Github？" class="headerlink" title="如何使用Github？"></a>如何使用Github？</h2><p><img src="/static/imgs/github/20160509095442956.png"></p><blockquote><p>GitHub其中一位创始人[Chris](defunkt (Chris Wanstrath) · GitHub)也详细描述了[GitHub初创的前因后果](Startup Riot 2009 Keynote 路 GitHub)，他说道：Do whatever you want.</p></blockquote><h2 id="使用GitHub实现代码托管"><a href="#使用GitHub实现代码托管" class="headerlink" title="使用GitHub实现代码托管"></a>使用GitHub实现代码托管</h2><h3 id="案列1："><a href="#案列1：" class="headerlink" title="案列1："></a>案列1：</h3><p><strong>今天在公司开发了a功能，但是回家需要继续开发a功能，这时就可以将本地代码提交到github上面，回到家将github代码clone到本自己的mac上继续开发a功能。然后在家开发完了a功能，第二天去公司需要继续开发b功能就需要把昨天在家开发的a功能给pull(拉)到公司的电脑上。</strong></p><h4 id="1、将今天在公司写的代码提交到github上面"><a href="#1、将今天在公司写的代码提交到github上面" class="headerlink" title="1、将今天在公司写的代码提交到github上面"></a>1、将今天在公司写的代码提交到github上面</h4><ul><li>git add .</li><li>git commit -m ‘在公司写了A功能70%’</li><li>git remote add origin <a href="https://github.com/epover/git.git">https://github.com/epover/git.git</a></li><li>git push -u origin master或者 git push origin master</li><li>git push origin dev</li></ul><h4 id="2、回到家将公司的代码给clone到本地"><a href="#2、回到家将公司的代码给clone到本地" class="headerlink" title="2、回到家将公司的代码给clone到本地"></a>2、回到家将公司的代码给clone到本地</h4><ul><li>git clone github地址</li><li>git checkout dev</li><li>继续开发A功能剩下的30%</li><li>git add . </li><li>git commit -m ‘在家开发A功能30%’</li><li>git push origin master</li><li>git push origin dev</li></ul><h4 id="3、第二天回到公司"><a href="#3、第二天回到公司" class="headerlink" title="3、第二天回到公司"></a>3、第二天回到公司</h4><ul><li>git checkout dev</li><li>git pull origin dev</li></ul><p><strong>总结 ：GitHub使用起来非常方便，当你写完代码只需要push到GitHub上就行了，需要再次开发的时候只需pull到本地。</strong></p><h3 id="案列2："><a href="#案列2：" class="headerlink" title="案列2："></a>案列2：</h3><p><strong>今天在公司开发新功能A（完成50%）提交完代码，下班。回到家中pull才发现在公司忘记push到GitHub上面去了，此时你根据记忆继续开发功能A（完成%30），又新开发了B功能（50%），然后push睡觉。第二天回到公司</strong></p><h4 id="1、今天在公司开发新功能A（完成50-）提交完代码，下班。"><a href="#1、今天在公司开发新功能A（完成50-）提交完代码，下班。" class="headerlink" title="1、今天在公司开发新功能A（完成50%）提交完代码，下班。"></a>1、今天在公司开发新功能A（完成50%）提交完代码，下班。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在开公司写代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;公司开发A功能（50%）&#x27;</span><br></pre></td></tr></table></figure><h4 id="2、回到家中pull才发现在公司忘记push到GitHub上面去了，此时你根据记忆继续开发功能A（完成-30），又新开发了B功能（50-），然后push睡觉。"><a href="#2、回到家中pull才发现在公司忘记push到GitHub上面去了，此时你根据记忆继续开发功能A（完成-30），又新开发了B功能（50-），然后push睡觉。" class="headerlink" title="2、回到家中pull才发现在公司忘记push到GitHub上面去了，此时你根据记忆继续开发功能A（完成%30），又新开发了B功能（50%），然后push睡觉。"></a>2、回到家中pull才发现在公司忘记push到GitHub上面去了，此时你根据记忆继续开发功能A（完成%30），又新开发了B功能（50%），然后push睡觉。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull origin dev </span><br><span class="line">发现没有更新</span><br><span class="line">凭借记忆努力写代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;在家通过记忆对A功能继续开发30%；还开发了B功能&#x27;</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h4 id="3、第二天回到公司，继续开发A功能剩下的20-和B功能剩下的50-。"><a href="#3、第二天回到公司，继续开发A功能剩下的20-和B功能剩下的50-。" class="headerlink" title="3、第二天回到公司，继续开发A功能剩下的20%和B功能剩下的50%。"></a>3、第二天回到公司，继续开发A功能剩下的20%和B功能剩下的50%。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev</span><br><span class="line">此时会提醒合并冲突，因为昨天在公司和在家都对A功能进行了开发，在合并时会发生冲突，此时需要我们收到解决它</span><br><span class="line">继续开发A功能剩下的20%和B功能剩下的50%</span><br><span class="line">.....</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;项目开发完成&#x27;</span><br><span class="line">git push origin dev</span><br><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="总结：常用命令"><a href="#总结：常用命令" class="headerlink" title="总结：常用命令"></a>总结：常用命令</h3><ul><li>git remote add origin <a href="https://github.com/sqlsafe/git.git">https://github.com/sqlsafe/git.git</a></li><li>git remote remove origin 删除origin</li><li>git push origin推送代码</li><li>git pull origin获取代码</li></ul><h3 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h3><h4 id="1、remote-Support-for-password-authentication-was-removed-on-August-13-2021"><a href="#1、remote-Support-for-password-authentication-was-removed-on-August-13-2021" class="headerlink" title="1、remote: Support for password authentication was removed on August 13, 2021"></a>1、remote: Support for password authentication was removed on August 13, 2021</h4><p><strong>官方解释：</strong><a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a></p><p>修改token的动机</p><p>我们描述了我们的动机，因为我们宣布了对 API 身份验证的类似更改，如下所示：近年来，GitHub 客户受益于 GitHub.com 的许多安全增强功能，例如双因素身份验证、登录警报、经过验证的设备、防止使用泄露密码和 WebAuthn 支持。 这些功能使攻击者更难获取在多个网站上重复使用的密码并使用它来尝试访问您的 GitHub 帐户。 尽管有这些改进，但由于历史原因，未启用双因素身份验证的客户仍能够仅使用其GitHub 用户名和密码继续对 Git 和 API 操作进行身份验证。从 2021 年 8 月 13 日开始，我们将在对 Git 操作进行身份验证时不再接受帐户密码，并将要求使用基于令牌（token）的身份验证，例如个人访问令牌（针对开发人员）或 OAuth 或 GitHub 应用程序安装令牌（针对集成商） GitHub.com 上所有经过身份验证的 Git 操作。 您也可以继续在您喜欢的地方使用 SSH 密钥（如果你要使用ssh密钥可以参考）</p><p><strong>解决办法：</strong></p><ul><li><p>创建token：<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p></li><li><p>将token添加到远程仓库中：git remote set-url origin https:&#x2F;&#x2F;<your_token>@github.com&#x2F;USERNAME&#x2F;REPO</p></li><li><p>例如：git remote set-url origin <a href="https://ghp_7WkOwfkDasasdgsgdsaskFshyasvswUzJCLrdsgsaYm@github.com/name/project.git">https://ghp_7WkOwfkDasasdgsgdsaskFshyasvswUzJCLrdsgsaYm@github.com/name/project.git</a></p></li></ul><h4 id="2、kex-exchange-identification-read-Connection-reset-by-peer"><a href="#2、kex-exchange-identification-read-Connection-reset-by-peer" class="headerlink" title="2、kex_exchange_identification: read: Connection reset by peer"></a>2、kex_exchange_identification: read: Connection reset by peer</h4><p>Connection reset by 20.205.243.178 port 22<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights<br>and the repository exists.</p><p><strong>解决办法：</strong></p><p>生成新的公钥：ssh-keygen-t rsa -C”邮箱地址”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GitHub&quot;&gt;&lt;a href=&quot;#GitHub&quot; class=&quot;headerlink&quot; title=&quot;GitHub&quot;&gt;&lt;/a&gt;GitHub&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/static/imgs/github/howusegithub.png&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Git" scheme="https://sqlsafe.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://sqlsafe.github.io/tags/Git/"/>
    
    <category term="GitHub" scheme="https://sqlsafe.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://sqlsafe.github.io/2022/04/28/Git/"/>
    <id>https://sqlsafe.github.io/2022/04/28/Git/</id>
    <published>2022-04-28T12:07:58.000Z</published>
    <updated>2022-04-28T12:51:52.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><strong>Git 是一个免费的开源 分布式版本控制系统，旨在快速高效地处理从小到大的所有项目。</strong></p><ul><li>工作区：改动（增删文件和内容）</li><li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li><li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。</li><li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了 ‘远程仓库’（GitHub 等)</li><li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li></ul><blockquote><p>Git 是由 Linux 之父 Linus Tovalds 为了更好地管理linux内核开发而创立的分布式版本控制／软件配置管理软件。</p></blockquote><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul><li>brew install git</li><li>git -versions</li></ul><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><ul><li>git init：初始化Git</li><li>git add .：添加当前目录所有文件到暂存区</li><li>git add 文件名：将指定文件添加到暂存区</li><li>git commit -m 提交名称：提交代码</li><li>git status：查看状态</li><li>git reset –hard 版本号：回到指定版本</li><li>git reset HEAD 文件名：回到暂存区</li><li>git checkout – 文件名：</li><li>git -help查看帮助文档</li><li>git remote rm origin 删除远程仓库</li><li>git log  查看版本</li></ul><h3 id="案例：使用Git提交项目"><a href="#案例：使用Git提交项目" class="headerlink" title="案例：使用Git提交项目"></a>案例：使用Git提交项目</h3><h4 id="1-第一次提交登录功能"><a href="#1-第一次提交登录功能" class="headerlink" title="1.第一次提交登录功能"></a>1.第一次提交登录功能</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>git init</li><li>git status</li><li>git add index.html</li><li>git commit -m ‘登录功能’</li></ul><h4 id="2-第二次提交注册功能"><a href="#2-第二次提交注册功能" class="headerlink" title="2.第二次提交注册功能"></a>2.第二次提交注册功能</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>git init</li><li>git status</li><li>git add index.html</li><li>git commit -m ‘注册功能’</li></ul><h4 id="3-第三次提交直播功能"><a href="#3-第三次提交直播功能" class="headerlink" title="3.第三次提交直播功能"></a>3.第三次提交直播功能</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>直播<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>git init</li><li>git status</li><li>git add index.html</li><li>git commit -m ‘直播功能’</li><li>git log</li></ul><h4 id="4-现在我们想要删除直播功能，回到注册功能代码"><a href="#4-现在我们想要删除直播功能，回到注册功能代码" class="headerlink" title="4.现在我们想要删除直播功能，回到注册功能代码"></a>4.现在我们想要删除直播功能，回到注册功能代码</h4><p><img src="/static/imgs/github/reset_hard.png"></p><ul><li>git reflog</li><li>git reset –hard 1d83b43409bc59c2175efa2a442477d1edc75b14</li></ul><p><strong>此时html代码更新为：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-现在想了想，觉得直播功能还是很好。我们需要直播功能"><a href="#5-现在想了想，觉得直播功能还是很好。我们需要直播功能" class="headerlink" title="5.现在想了想，觉得直播功能还是很好。我们需要直播功能"></a>5.现在想了想，觉得直播功能还是很好。我们需要直播功能</h4><ul><li>git reset –hard 7315226</li></ul><p><strong>此时html代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>直播<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="当文件代码添加到暂存区，怎么返回？"><a href="#当文件代码添加到暂存区，怎么返回？" class="headerlink" title="当文件代码添加到暂存区，怎么返回？"></a>当文件代码添加到暂存区，怎么返回？</h4><ul><li>git reset HEAD index.html</li></ul><h4 id="当代码更新，可以使用checkout来恢复到最初。"><a href="#当代码更新，可以使用checkout来恢复到最初。" class="headerlink" title="当代码更新，可以使用checkout来恢复到最初。"></a>当代码更新，可以使用checkout来恢复到最初。</h4><ul><li>git checkout – index.html</li></ul><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p><strong>现在理解了Git是如何跟踪代码修改的，每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</strong></p><p><img src="/static/imgs/github/4.png"></p><h2 id="分支（master）"><a href="#分支（master）" class="headerlink" title="分支（master）:"></a>分支（master）:</h2><h3 id="案列："><a href="#案列：" class="headerlink" title="案列："></a>案列：</h3><p><strong>现在我们的项目有登录、注册、直播功能，现在需要新增功能为商城，商城功能写了一半（比如花了半个月），现在直播功能出现bug,需要调试我们应该怎么办呢？难道要放弃快完成的商城功能，回到直播功能调试bug吗？这里我们可以用到分支了。</strong></p><h4 id="1、在写新功能模块时，创建dev分支用于开发新的模块，再创建一个bug分支用于调试bug"><a href="#1、在写新功能模块时，创建dev分支用于开发新的模块，再创建一个bug分支用于调试bug" class="headerlink" title="1、在写新功能模块时，创建dev分支用于开发新的模块，再创建一个bug分支用于调试bug"></a>1、在写新功能模块时，创建dev分支用于开发新的模块，再创建一个bug分支用于调试bug</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">endless@EndlessdeMacBook-Pro blogs % git branch dev 创建dev分支</span><br><span class="line">endless@EndlessdeMacBook-Pro blogs % git branch查看分支</span><br><span class="line">  dev</span><br><span class="line">* master  --&gt;当前所在的主分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、切换分支"><a href="#2、切换分支" class="headerlink" title="2、切换分支"></a>2、切换分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">endless@EndlessdeMacBook-Pro blogs % git checkout dev切换到dev分支</span><br><span class="line">M.DS_Store</span><br><span class="line">MREADME.md</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure><h4 id="3、在dev分支下开发商城功能"><a href="#3、在dev分支下开发商城功能" class="headerlink" title="3、在dev分支下开发商城功能"></a>3、在dev分支下开发商城功能</h4><ul><li>git checkout dev</li></ul><p><strong>此时商城功能开发到一半，直播功能出现bug，我们需要提交商城功能代码，切换到master主分支，创建一个bug分支用于调试bug，并且不影响商城功能的开发</strong></p><h4 id="4、回到master，创建bug分支"><a href="#4、回到master，创建bug分支" class="headerlink" title="4、回到master，创建bug分支"></a>4、回到master，创建bug分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">endless@EndlessdeMacBook-Pro blog % git log#此时在master分支上并没有商城功能完成50%</span><br><span class="line">commit 7feddb1b99a42918f39ccf898275f18d96893d02 (HEAD -&gt; master, bug)</span><br><span class="line">Author: epover &lt;endliss@sina.cn&gt;</span><br><span class="line">Date:   Sun Jul 18 22:52:49 2021 +0800</span><br><span class="line"></span><br><span class="line">    第一次项目完成</span><br><span class="line">endless@EndlessdeMacBook-Pro blog % git branch bug</span><br><span class="line">endless@EndlessdeMacBook-Pro blog % git checkout bug</span><br><span class="line">Switched to branch &#x27;bug&#x27;</span><br></pre></td></tr></table></figure><h5 id="现在bug修复完成"><a href="#现在bug修复完成" class="headerlink" title="现在bug修复完成"></a>现在bug修复完成</h5><h4 id="5、此时我们需要切回master上，将bug合并到master分支上"><a href="#5、此时我们需要切回master上，将bug合并到master分支上" class="headerlink" title="5、此时我们需要切回master上，将bug合并到master分支上."></a>5、此时我们需要切回master上，将bug合并到master分支上.</h4><h4 id="6、现在切换到dev分支继续开发商城功能"><a href="#6、现在切换到dev分支继续开发商城功能" class="headerlink" title="6、现在切换到dev分支继续开发商城功能"></a>6、现在切换到dev分支继续开发商城功能</h4><ul><li>git checkout dev</li><li>git add . </li><li>git commit -m ‘商城功能开发完成’</li><li>git checkout master</li></ul><h4 id="7、手动解决冲突，就能完成合并"><a href="#7、手动解决冲突，就能完成合并" class="headerlink" title="7、手动解决冲突，就能完成合并"></a>7、手动解决冲突，就能完成合并</h4><ul><li>git merge dev</li></ul><h4 id="8、删除调试完成bug的分支-git-branch-bug-d"><a href="#8、删除调试完成bug的分支-git-branch-bug-d" class="headerlink" title="8、删除调试完成bug的分支(git branch bug -d)"></a>8、删除调试完成bug的分支(git branch bug -d)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">endless@EndlessdeMacBook-Pro blog % git branch bug -d</span><br><span class="line">Deleted branch bug (was adba566).</span><br><span class="line">endless@EndlessdeMacBook-Pro blog % git branch   </span><br><span class="line">  dev</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Git 是一个免费的开源 分布式版本控制系统，旨在快速高效地处理从小到大的所有项目。&lt;/strong&gt;&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    <category term="Git" scheme="https://sqlsafe.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://sqlsafe.github.io/tags/Git/"/>
    
    <category term="GitHub" scheme="https://sqlsafe.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫--selenium</title>
    <link href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-selenium/"/>
    <id>https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-selenium/</id>
    <published>2022-04-27T15:31:12.000Z</published>
    <updated>2022-04-28T13:55:49.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><ul><li>Selenium是一个用于Web应用程序测试的工具</li><li>Selenium测试直接运行在浏览器中，模拟用户真实操作浏览器</li><li>支持各种driver（FirfoxDriver,IternetExplorerDriver,ChromeDriver等）驱动</li><li>selenium支持无界面浏览器操作</li></ul><h2 id="为什么使用selenium？"><a href="#为什么使用selenium？" class="headerlink" title="为什么使用selenium？"></a>为什么使用selenium？</h2><p><strong>模拟浏览器功能，自动执行网页中的js代码，实现动态加载</strong></p><h2 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h2><ul><li><a href="http://chromedriver.storage.googleapis.com/index.html">ChromeDriver</a></li><li>pip install selenium</li></ul><h2 id="selenium使用步骤"><a href="#selenium使用步骤" class="headerlink" title="selenium使用步骤"></a>selenium使用步骤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;chromedriver.exe&#x27;</span></span><br><span class="line">browser = webdriver.Chrome(path)</span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过id定位元素</span></span><br><span class="line">button = browser.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(button)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过name定位元素</span></span><br><span class="line">name = browser.find_elements_by_name(<span class="string">&quot;wd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过xpath语发定位元素</span></span><br><span class="line">img_xpath =  browser.find_elements_by_xpath(<span class="string">&quot;//div[@id=&#x27;wrapper&#x27;]//input&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(img_xpath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过标签名定位元素</span></span><br><span class="line">tag_name = browser.find_elements_by_tag_name(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tag_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过css属性定位元素</span></span><br><span class="line">css_selector = browser.find_elements_by_css_selector(<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(css_selector)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过超链接文本定位</span></span><br><span class="line">link_text = browser.find_element_by_link_text(<span class="string">&#x27;贴吧&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(link_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素文本</span></span><br><span class="line"><span class="built_in">print</span>(link_text.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取元素属性</span></span><br><span class="line"><span class="built_in">print</span>(link_text.get_attribute(<span class="string">&#x27;class&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签名</span></span><br><span class="line"><span class="built_in">print</span>(link_text.tag_name)</span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h2 id="Phantomjs"><a href="#Phantomjs" class="headerlink" title="Phantomjs"></a>Phantomjs</h2><ul><li>无界面浏览器</li><li>支持页面元素查找，js代码运行</li><li>由于不进行css和gui渲染，运行效率高</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.PhantomJS(<span class="string">&#x27;phantomjs.exe&#x27;</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存屏幕快照</span></span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;baidu.png&#x27;</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;刘德华&#x27;</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">browser.save_screenshot(<span class="string">&#x27;刘德华.png&#x27;</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h2 id="Chrome-handless"><a href="#Chrome-handless" class="headerlink" title="Chrome handless"></a>Chrome handless</h2><ul><li>chrome-headless模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share_browser</span>():</span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;‐‐disable‐gpu&#x27;</span>)</span><br><span class="line">    path = <span class="string">r&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot;</span></span><br><span class="line">    chrome_options.binary_location = path</span><br><span class="line">    <span class="keyword">return</span> webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line"></span><br><span class="line">browser = share_browser()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;selenium&quot;&gt;&lt;a href=&quot;#selenium&quot; class=&quot;headerlink&quot; title=&quot;selenium&quot;&gt;&lt;/a&gt;selenium&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Selenium是一个用于Web应用程序测试的工具&lt;/li&gt;
&lt;li&gt;Selen</summary>
      
    
    
    
    <category term="Python爬虫" scheme="https://sqlsafe.github.io/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://sqlsafe.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="crawler" scheme="https://sqlsafe.github.io/tags/crawler/"/>
    
    <category term="robots.txt" scheme="https://sqlsafe.github.io/tags/robots-txt/"/>
    
    <category term="cookie" scheme="https://sqlsafe.github.io/tags/cookie/"/>
    
    <category term="Urllib" scheme="https://sqlsafe.github.io/tags/Urllib/"/>
    
    <category term="selenium" scheme="https://sqlsafe.github.io/tags/selenium/"/>
    
    <category term="Phantomjs" scheme="https://sqlsafe.github.io/tags/Phantomjs/"/>
    
    <category term="Chrome handless" scheme="https://sqlsafe.github.io/tags/Chrome-handless/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫--数据解析</title>
    <link href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2022-04-27T15:30:56.000Z</published>
    <updated>2022-04-27T15:45:41.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><p><strong>解析数据，其用途就是在爬虫过程中将服务器返回的HTML源代码转换为我们能读懂的格式。</strong></p><ul><li>xpath</li><li>jsonpath</li><li>bs4</li></ul><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><ul><li>xpath插件安装（ctrl+shift+x）</li><li>安装lxml库（pip install lxml）</li><li>懒加载</li></ul><h3 id="xpath使用"><a href="#xpath使用" class="headerlink" title="xpath使用"></a>xpath使用</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># etree.parse()读取本地HTMl</span></span><br><span class="line">tree = etree.parse(<span class="string">&#x27;07-xpath_test.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;body/ul/li/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签id为l1的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签有id属性的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[@id]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签有class属性的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[@class]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签有id和有class属性的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[@id and @class]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签的id以l开头的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[starts-with(@id,&quot;l&quot;)]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签的id包含l的内容</span></span><br><span class="line">list_li = tree.xpath(<span class="string">&#x27;//ul/li[contains(@class,&quot;c&quot;)]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取body/ul/li标签id为l1的class属性值</span></span><br><span class="line">attribute = tree.xpath(<span class="string">&#x27;//ul/li[@id=&quot;l1&quot;]/@class&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="抓取站长素材前10页图片"><a href="#抓取站长素材前10页图片" class="headerlink" title="抓取站长素材前10页图片"></a>抓取站长素材前10页图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    url = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> page == <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/jinmaoquantupian.html&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/jinmaoquantupian_&#x27;</span>+<span class="built_in">str</span>(page)+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span>, <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;tn=baidu&amp;wd=ip%E6%9F%A5%E8%AF%A2&amp;oq=ip%25E6%259F%25A5%25E8%25AF%25A2&amp;rsv_pq=93fa920200008ca9&amp;rsv_t=e38bd2devLnU2pnYyuiCFdtzwh3I3gTa0RM85dJNYYIowWwE%2BMJwdn%2FecFA&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_btype=t&amp;inputT=5&amp;rsv_sug3=9&amp;rsv_sug1=3&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_sug4=721&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    <span class="keyword">return</span> response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">content</span>):</span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    img_url = tree.xpath(<span class="string">&#x27;//div[@id=&quot;container&quot;]//a/img/@src2&#x27;</span>)</span><br><span class="line">    name = tree.xpath(<span class="string">&#x27;//div[@id=&quot;container&quot;]//a/img/@alt&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_url)):</span><br><span class="line">        url = <span class="string">&#x27;https:&#x27;</span>+img_url[i]</span><br><span class="line">        filename = <span class="string">&#x27;./download_pricture/&#x27;</span>+name[i]+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        urllib.request.urlretrieve(filename=filename,url=url)</span><br></pre></td></tr></table></figure><h2 id="JsonPath"><a href="#JsonPath" class="headerlink" title="JsonPath"></a>JsonPath</h2><ul><li>pip install jsonpath</li></ul><h3 id="JsonPath使用"><a href="#JsonPath使用" class="headerlink" title="JsonPath使用"></a>JsonPath使用</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json,jsonpath</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> = json.load(<span class="built_in">open</span>(<span class="string">&#x27;08-crawler_jsonpath.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有书的作者</span></span><br><span class="line">author_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$.store.book[*].author&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(author_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的作者</span></span><br><span class="line">author_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..author&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(author_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># store下面的所有元素</span></span><br><span class="line">tag_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$.store.*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tag_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># store里面所有东西的price</span></span><br><span class="line">price = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$.store..price&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(price)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三本书</span></span><br><span class="line">book = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[2]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一本书</span></span><br><span class="line">book = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[(@.length-1)]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前面两本书</span></span><br><span class="line">book_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[:2]&#x27;</span>)</span><br><span class="line">book_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[0,1]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤出所有包含isbn的书</span></span><br><span class="line">book_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[?(@.isbn)]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哪本书价格超过了10快</span></span><br><span class="line">book_list = jsonpath.jsonpath(<span class="built_in">object</span>,<span class="string">&#x27;$..book[?(@.price&gt;10)]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book_list)</span><br></pre></td></tr></table></figure><h3 id="淘票票城市数据"><a href="#淘票票城市数据" class="headerlink" title="淘票票城市数据"></a>淘票票城市数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,json,jsonpath</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://dianying.taobao.com/cityAction.json?activityId&amp;_ksTS=1632662735620_134&amp;jsoncallback=jsonp135&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;cna=foyqGW1EDTICAWXMQt+mnIzQ; t=d8799591d39e8a91536ef1af53e94680; lgc=%5Cu738B%5Cu5FD7%5Cu5F3A18228660970; tracknic738B%5Cu5FD7%5Cu5F3A18228660970; hng=CN%7Czh-CN%7CCNY%7C156; thw=cn; enc=xaQAAf1k3RE0T6wwZbGLyV2Gnja1k0Qb1sUIKvldK8cqhNB0yJdteQDn5wniaVkO%2BkLgHMdFymW9XvMw4QJgvQ%3D%3D; uc3=nk2=rpB9i5t4xCwUCLbHex6iP5Y%UGrdCbqdCCNpQ%3D%3D&amp;lg2=W5iHLLyFOGW7aA%3D%3D&amp;vt3=F8dCujC5mqqlWnWtiF8%3D; uc4=nk4=0%40rMpFul3%2BHjvKbCkx325MJ6j9eKMThOpH7W4geA%3D%3D&amp;id4=0%40U2OcRLKI%2FEgm9OyPQArEW1A%2BZQRT; _cc_=WqG3DMC9EA%3D%3D; xlly_s=1; cookie2=1bf16dc72f369feffb4b59fd887; v=0; _tb_token_=56d8f63eb53e9; mt=ci=-1_0; tb_city=513200; tb_cityName=&quot;sKKw0w==&quot;; uc1=cookie14=Uoe3dYeFqc%2FGog%3D%3D; tfstk=c11dBvG4Slq31D8Ou9egPdCe0dfRZGhH4z-SwPINyFcKVMlRiS5cM1ltUUmp6PC..; l=eBrCbbwugrzv13B8BO5CFurza779mQAb4sPzaNbMiInca69h1F11FNCLH0F2RdtjgtCAaetrd8LeqRLHR3AgCc0c07kqm0RxexvO.; isg=BFVVhJkpmMQ3ebzFQpH_cJvAZFEPUglks08wbNf4EkwbLnUgn6LDNDLg-DKYLiEc&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://dianying.taobao.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;93&quot;, &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;93&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;x-requested-with&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line">    <span class="keyword">return</span> response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup（bs4）"><a href="#BeautifulSoup（bs4）" class="headerlink" title="BeautifulSoup（bs4）"></a>BeautifulSoup（bs4）</h2><ul><li>pip install bs4</li></ul><h3 id="bs4使用"><a href="#bs4使用" class="headerlink" title="bs4使用"></a>bs4使用</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过bs4解析本地文件,默认读取文件方式为gbk,所以需要指定utf-8编码</span></span><br><span class="line">soup = BeautifulSoup(<span class="built_in">open</span>(<span class="string">&#x27;09-crawler_bs4.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>),<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签名查找到第一个符合条件的数据</span></span><br><span class="line"><span class="built_in">print</span>(soup.a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签的属性和属性值</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.attrs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bs4的一些函数</span></span><br><span class="line"><span class="comment"># (1) find</span></span><br><span class="line"><span class="comment"># 返回的是第一个符合条件的数据</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据title的值来找到对应的标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&#x27;a&#x27;</span>,title=<span class="string">&#x27;a2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据class属性值来找到对应的标签,class语法已经纯在所以需要添加_</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&#x27;p&#x27;</span>,class_=<span class="string">&#x27;p1&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (2)find_all 返回所有匹配的标签list</span></span><br><span class="line"><span class="built_in">print</span>(soup.findAll(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找多个标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.findAll([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;span&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># limit的作用是查找的前几个数据</span></span><br><span class="line"><span class="built_in">print</span>(soup.findAll(<span class="string">&#x27;li&#x27;</span>,limit=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (3) select</span></span><br><span class="line"><span class="comment"># select查询返回一个list</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过类选择器</span></span><br><span class="line"><span class="comment"># 查找class属性为a1的标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.a1&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#l2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性选择器</span></span><br><span class="line"><span class="comment"># 查找li标签中id=l2的标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li[id=&quot;l2&quot;]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找li标签中有id的标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;li[id]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 层级选择器</span></span><br><span class="line"><span class="comment"># 后代选择器</span></span><br><span class="line"><span class="comment"># 找到div下面的li</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;div li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子代选择器:某标签的第一级标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;div &gt; ul &gt; span&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到a标签和li标签的所有对象</span></span><br><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a,li&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点信息</span></span><br><span class="line">tag_l1 = soup.select(<span class="string">&#x27;#l1&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(tag_l1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签内容</span></span><br><span class="line"><span class="built_in">print</span>(tag_l1.get_text())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签对象中，存在标签那么string就获取不到数据，使用get_text()就能获取数据</span></span><br><span class="line"><span class="built_in">print</span>(tag_l1.string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点属性</span></span><br><span class="line">tag_obj = soup.select(<span class="string">&#x27;#p1&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(tag_obj.name)</span><br><span class="line"><span class="built_in">print</span>(tag_obj.attrs)soup = BeautifulSoup(response.read().decode(),<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="爬去星巴克菜单图片数据"><a href="#爬去星巴克菜单图片数据" class="headerlink" title="爬去星巴克菜单图片数据"></a>爬去星巴克菜单图片数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,json</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_load</span>(<span class="params">menu_name_list,picture_url_list</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(menu_name_list)):</span><br><span class="line">        file_name = <span class="string">&#x27;./starbucks_menu_picture/&#x27;</span>+menu_name_list[i].get_text()+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        picture_url = <span class="string">&#x27;https://www.starbucks.com.cn&#x27;</span>+menu_picture_list[i].get(<span class="string">&#x27;style&#x27;</span>).split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            urllib.request.urlretrieve(picture_url,file_name)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            name = menu_name_list[i].get_text().replace(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            file_name = <span class="string">&#x27;./starbucks_menu_picture/&#x27;</span>+name+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            urllib.request.urlretrieve(picture_url, file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://www.starbucks.com.cn/menu/&#x27;</span></span><br><span class="line">    response = urllib.request.urlopen(url=url)</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    menu_name_list = soup.select(<span class="string">&#x27;ul[class=&quot;grid padded-3 product&quot;] strong&#x27;</span>)</span><br><span class="line">    menu_picture_list = soup.select(<span class="string">&#x27;div[class=&quot;preview circle&quot;]&#x27;</span>)</span><br><span class="line">    down_load(menu_name_list,menu_picture_list)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据解析&quot;&gt;&lt;a href=&quot;#数据解析&quot; class=&quot;headerlink&quot; title=&quot;数据解析&quot;&gt;&lt;/a&gt;数据解析&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;解析数据，其用途就是在爬虫过程中将服务器返回的HTML源代码转换为我们能读懂的格式。&lt;/strong&gt;&lt;/p</summary>
      
    
    
    
    <category term="Python爬虫" scheme="https://sqlsafe.github.io/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://sqlsafe.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="crawler" scheme="https://sqlsafe.github.io/tags/crawler/"/>
    
    <category term="robots.txt" scheme="https://sqlsafe.github.io/tags/robots-txt/"/>
    
    <category term="cookie" scheme="https://sqlsafe.github.io/tags/cookie/"/>
    
    <category term="Urllib" scheme="https://sqlsafe.github.io/tags/Urllib/"/>
    
    <category term="xpath" scheme="https://sqlsafe.github.io/tags/xpath/"/>
    
    <category term="jsonpath" scheme="https://sqlsafe.github.io/tags/jsonpath/"/>
    
    <category term="bs4" scheme="https://sqlsafe.github.io/tags/bs4/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫--Urllib</title>
    <link href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-Urllib/"/>
    <id>https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-Urllib/</id>
    <published>2022-04-27T15:14:46.000Z</published>
    <updated>2022-04-28T10:05:42.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Urllib"><a href="#Urllib" class="headerlink" title="Urllib"></a>Urllib</h1><p><strong>Python urllib 库用于操作网页 URL，并对网页的内容进行抓取处理。</strong></p><h2 id="urllib库使用"><a href="#urllib库使用" class="headerlink" title="urllib库使用"></a>urllib库使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、定义url</span></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment"># 2、通过代码模拟浏览器向服务器发送请求</span></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"><span class="comment"># 3、读取数据，一个字节一个字节的读取  read()方法返回的是字节形式的二进制，需要转换成utf-8</span></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="请求对象定制"><a href="#请求对象定制" class="headerlink" title="请求对象定制"></a>请求对象定制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><ul><li><h4 id="urllib-parse-quote"><a href="#urllib-parse-quote" class="headerlink" title="urllib.parse.quote()"></a>urllib.parse.quote()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">request_parameters =<span class="string">&#x27;张学友&#x27;</span></span><br><span class="line">new_url = url+urllib.parse.quote(request_parameters)</span><br><span class="line">request = urllib.request.Request(url=new_url,headers=headers)</span><br><span class="line">response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><h4 id="urllib-parse-urlencode"><a href="#urllib-parse-urlencode" class="headerlink" title="urllib.parse.urlencode()"></a>urllib.parse.urlencode()</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_webpage</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.baidu.com/s?&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;张学友&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>:<span class="string">&#x27;中国香港&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 通过urlencode将参数进行unicode转码拼接</span></span><br><span class="line">    new_url = url + urllib.parse.urlencode(data)</span><br><span class="line">    <span class="comment"># 请求对象的定制</span></span><br><span class="line">    request = urllib.request.Request(url=new_url,headers=headers)</span><br><span class="line">    response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">    <span class="keyword">if</span> response.getcode() == <span class="number">200</span>:</span><br><span class="line">        content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;baidu.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Crawl failed ！&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,urllib.parse,ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ajax_doubantop20</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?type=24&amp;interval_id=100%3A90&amp;action=&amp;start=0&amp;limit=20&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">    response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;doubantop20.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br></pre></td></tr></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,urllib.parse,ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">pageIndex</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: pageIndex,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    new_data = urllib.parse.urlencode(data).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(url=url,data=new_data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line">    <span class="keyword">return</span> response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page,content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;kfc_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br></pre></td></tr></table></figure><h2 id="URLError-HTTPError"><a href="#URLError-HTTPError" class="headerlink" title="URLError HTTPError"></a>URLError HTTPError</h2><ul><li>HTTPError类是URLError类的子类</li><li>导入urllib.error.HTTPError urllib.error.URLError</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,ssl,urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cnsd_article</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://blosdas.csdn.net/sugar_no1/article/details/883179501&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">    <span class="keyword">return</span> urllib.request.urlopen(request,context=ssl.SSLContext())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = get_cnsd_article()</span><br><span class="line">        content =response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;HTTPError!!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;please check up url !&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Cookie登录"><a href="#Cookie登录" class="headerlink" title="Cookie登录"></a>Cookie登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.gulixueyuan.com/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;UM_distinctid=17937a016be2721-113a6054-13c680-17937a01675fdc; CNZZDATA1264603569=531034137-1620133818-null%7C1631791587; online-uuid=DCDFF27A-C9-82FB28A78807; PHPSESSID=ftss7rtoujh5fevl4ccg8kpf57; REMEMBERME=Qml6XFVzZXJcQ3VycmVudFVzZXI6ZFhObGNsOW5ZVzlyT1RFeE1HUkFaV1IxYzI5b2J5NXVaWFE9OjE2NjMzMzY4MzY6MDIyNjNTzRmZTQ1ZDdkY2MyYWJlZmI3OTE5OGZlZGU5MA%3D%3D&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.gulixueyuan.com/login&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> urllib.request.Request(url=url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> urllib.request.urlopen(request,context=ssl.SSLContext()).read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;sgg.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br></pre></td></tr></table></figure><h2 id="Handler处理器"><a href="#Handler处理器" class="headerlink" title="Handler处理器"></a>Handler处理器</h2><h3 id="为什么要学习handler？"><a href="#为什么要学习handler？" class="headerlink" title="为什么要学习handler？"></a>为什么要学习handler？</h3><ul><li>urllib.request.urlopen(url) 不能定制请求头</li><li>urllib.request.Request(url,headers,data)</li><li>Handler 可以定制更高级的请求头</li></ul><h3 id="代理服务器（代理池）"><a href="#代理服务器（代理池）" class="headerlink" title="代理服务器（代理池）"></a>代理服务器（代理池）</h3><h4 id="代理的日常功能"><a href="#代理的日常功能" class="headerlink" title="代理的日常功能"></a>代理的日常功能</h4><ul><li>突破自身ip限制访问</li><li>访问一些单位或团体内部资源</li><li>提高访问速度</li><li>隐藏真实ip</li></ul><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><ul><li>创建Request对象</li><li>创建ProxyHandler对象</li><li>handler对象创建opener对象</li><li>opener.open发起请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl,urllib.request,random</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>:<span class="string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;tn=baidu&amp;wd=ip%E6%9F%A5%E8%AF%A2&amp;oq=ip%25E6%259F%25A5%25E8%25AF%25A2&amp;rsv_pq=93fa920200008ca9&amp;rsv_t=e38bd2devLnU2pnYyuiCFdtzwh3I3gTa0RM85dJNYYIowWwE%2BMJwdn%2FecFA&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=1&amp;rsv_btype=t&amp;inputT=5&amp;rsv_sug3=9&amp;rsv_sug1=3&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;rsv_sug4=721&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">proxies_pool = [</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;58.243.29.180:4570&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;27.44.215.155:4513&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;58.243.29.58:4554&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;58.243.29.148:4570&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">request = urllib.request.Request(url=url,headers=headers)</span><br><span class="line">handler = urllib.request.ProxyHandler(proxies=random.choice(proxies_pool))</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ip_proxypool.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Urllib&quot;&gt;&lt;a href=&quot;#Urllib&quot; class=&quot;headerlink&quot; title=&quot;Urllib&quot;&gt;&lt;/a&gt;Urllib&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Python urllib 库用于操作网页 URL，并对网页的内容进行抓取处理。&lt;/stro</summary>
      
    
    
    
    <category term="Python爬虫" scheme="https://sqlsafe.github.io/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://sqlsafe.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="crawler" scheme="https://sqlsafe.github.io/tags/crawler/"/>
    
    <category term="反爬" scheme="https://sqlsafe.github.io/tags/%E5%8F%8D%E7%88%AC/"/>
    
    <category term="robots.txt" scheme="https://sqlsafe.github.io/tags/robots-txt/"/>
    
    <category term="cookie" scheme="https://sqlsafe.github.io/tags/cookie/"/>
    
    <category term="Urllib" scheme="https://sqlsafe.github.io/tags/Urllib/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫--反爬</title>
    <link href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E5%8F%8D%E7%88%AC/"/>
    <id>https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E5%8F%8D%E7%88%AC/</id>
    <published>2022-04-27T14:59:44.000Z</published>
    <updated>2022-04-27T15:30:27.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见反爬手段"><a href="#常见反爬手段" class="headerlink" title="常见反爬手段"></a>常见反爬手段</h1><h2 id="反爬的原因"><a href="#反爬的原因" class="headerlink" title="反爬的原因"></a>反爬的原因</h2><ul><li>爬虫占总PV（PV是指页面的访问次数，没打开或刷新一次页面，就算一个PV）比较高，浪费资源。</li><li>公司免费查询资源被批量爬取，丧失竞争力。</li><li>法律的灰色地带，状告爬虫成功机率小。</li><li>成型的商业对手</li></ul><h2 id="爬虫领域的概念"><a href="#爬虫领域的概念" class="headerlink" title="爬虫领域的概念"></a>爬虫领域的概念</h2><ul><li>爬虫：使用任何技术手段，批量获取网站信息的一种方式。</li><li>反爬虫：使用任何技术手段，阻止别人批量获取自己网站信息的一种方式。</li><li>误伤：在反爬虫的过程中，错误的将普通用户识别为爬虫。误伤率高的反爬虫策略，效果再好也不能用。</li><li>拦截：成功地阻止爬虫访问。这里会有拦截率的概念。通常来说，拦截率越高的反爬虫策略，误伤的可能性就越高，因此需要做个权衡。</li><li>资源：机器成本与人力成本的总和</li></ul><h2 id="反爬虫的三个方向"><a href="#反爬虫的三个方向" class="headerlink" title="反爬虫的三个方向"></a>反爬虫的三个方向</h2><ul><li>基于身份识别进行反爬</li><li>基于爬虫行为进行反爬</li><li>基于数据加密进行反爬</li></ul><h3 id="常见基于身份识别进行反爬"><a href="#常见基于身份识别进行反爬" class="headerlink" title="常见基于身份识别进行反爬"></a>常见基于身份识别进行反爬</h3><p>请求参数的获取方法有很多，向服务器发送请求，很多时候需要携带请求参数，通常服务器端可以通过检查请求参数是否正确来判断是否为爬虫</p><h4 id="通过headers中User-Agent字段反爬"><a href="#通过headers中User-Agent字段反爬" class="headerlink" title="通过headers中User-Agent字段反爬"></a>通过headers中User-Agent字段反爬</h4><ul><li>反爬原理：爬虫默认情况下没有User-Agent，而是使用模块默认设置 </li><li>解决办法：请求之前添加User-Agent</li></ul><h4 id="通过referer字段或其他字段发爬"><a href="#通过referer字段或其他字段发爬" class="headerlink" title="通过referer字段或其他字段发爬"></a>通过referer字段或其他字段发爬</h4><ul><li>反爬原理：爬虫默认情况不会带上referer字段，服务器端通过判断请求发起源头，判断请求是否合法 </li><li>解决办法：添加referer字段</li></ul><h4 id="通过cookie反爬"><a href="#通过cookie反爬" class="headerlink" title="通过cookie反爬"></a>通过cookie反爬</h4><ul><li>反爬原理：通过检查cookies来查看发起请求的用户是否具备响应权限，以此进行反爬</li><li>解决办法：进行模拟登录，成功获取cookies之后再进行数据爬取</li></ul><h4 id="通过html静态文件中获取请求数据"><a href="#通过html静态文件中获取请求数据" class="headerlink" title="通过html静态文件中获取请求数据"></a>通过html静态文件中获取请求数据</h4><ul><li>反爬原理：通过增加获取请求参数的难度进行反爬 </li><li>解决办法：仔细分析抓包得到的每一个包，搞清楚请求之间的联系</li></ul><h4 id="通过发送请求获取请求数据"><a href="#通过发送请求获取请求数据" class="headerlink" title="通过发送请求获取请求数据"></a>通过发送请求获取请求数据</h4><ul><li>反爬原理：通过增加获取请求参数的难度进行反爬</li><li>解决办法：仔细分析抓包得到的每一个包，搞清楚请求之间的联系，搞清楚请求参数的来源</li></ul><h4 id="通过js生成请求参数"><a href="#通过js生成请求参数" class="headerlink" title="通过js生成请求参数"></a>通过js生成请求参数</h4><ul><li>反爬原理：js生成了请求参数</li><li>解决办法：分析js、观察加密的实现过程，通过js2py获取js的执行结果，或者是selenium来实现</li></ul><h4 id="通过验证码来反爬"><a href="#通过验证码来反爬" class="headerlink" title="通过验证码来反爬"></a>通过验证码来反爬</h4><ul><li>反爬原理：对方服务器通过弹出验证码强制验证用户浏览行为</li><li>解决办法：打码平台或者机器学习的方法识别验证码</li></ul><h3 id="常见基于爬虫行为进行反爬"><a href="#常见基于爬虫行为进行反爬" class="headerlink" title="常见基于爬虫行为进行反爬"></a>常见基于爬虫行为进行反爬</h3><p>爬虫的行为与普通用户有着明显的区别，爬虫的请求频率与请求次数要远高于普通用户</p><h4 id="通过请求IP-x2F-账号单位时间内总请求数量进行反爬"><a href="#通过请求IP-x2F-账号单位时间内总请求数量进行反爬" class="headerlink" title="通过请求IP&#x2F;账号单位时间内总请求数量进行反爬"></a>通过请求IP&#x2F;账号单位时间内总请求数量进行反爬</h4><ul><li>反爬原理：正常浏览器请求网站，速度不会太快，同一个IP&#x2F;账号大量请求了对方服务器，有更大的可能性会被识别为爬虫</li><li>解决办法：对应的通过购买高质量的IP的方式能够解决问题&#x2F;购买多个账号</li></ul><h4 id="通过同一IP-x2F-账号请求之间的时间间隔进行反爬"><a href="#通过同一IP-x2F-账号请求之间的时间间隔进行反爬" class="headerlink" title="通过同一IP&#x2F;账号请求之间的时间间隔进行反爬"></a>通过同一IP&#x2F;账号请求之间的时间间隔进行反爬</h4><ul><li>反爬原理：正常人操作浏览器浏览网站，请求之间的时间间隔是随机，而爬虫前后两个请求之间时间间隔通常比较固定，同时时间间隔较短，因此可以用来做反爬</li><li>解决办法：请求之间进行随机等待，模拟真实用户操作，在添加时间间隔后，为了能够高速获取数据，尽量使用代理池，如果是账号，则将账号请求之间设置随机休眠</li></ul><h4 id="通过对请求IP-x2F-账号每天请求次数设置阈值进行反爬"><a href="#通过对请求IP-x2F-账号每天请求次数设置阈值进行反爬" class="headerlink" title="通过对请求IP&#x2F;账号每天请求次数设置阈值进行反爬"></a>通过对请求IP&#x2F;账号每天请求次数设置阈值进行反爬</h4><ul><li>反爬原理：正常的浏览行为，其一天的请求次数是有限的，通常超过某一个值，服务器就会拒绝响应</li><li>解决办法：对应的通过购买高质量的IP的方法&#x2F;多账号，同时设置请求间随机休眠</li></ul><h4 id="通过js实现跳转来反爬"><a href="#通过js实现跳转来反爬" class="headerlink" title="通过js实现跳转来反爬"></a>通过js实现跳转来反爬</h4><ul><li>反爬原理：js实现页面跳转，无法在源码中获取下一页url</li><li>解决办法：多次抓包获取条状url，分析规律</li></ul><h4 id="通过蜜罐（陷阱）获取爬虫IP（获取代理IP），进行反爬"><a href="#通过蜜罐（陷阱）获取爬虫IP（获取代理IP），进行反爬" class="headerlink" title="通过蜜罐（陷阱）获取爬虫IP（获取代理IP），进行反爬"></a>通过蜜罐（陷阱）获取爬虫IP（获取代理IP），进行反爬</h4><ul><li>反爬原理：在爬虫获取链接进行请求的过程中，爬虫会根据正则、xpath、css等方式进行后续链接的提取，此时服务器端可以设置一个陷阱url，会被提前规则获取，但是正常用户无法获取，这样就能有效的区分爬虫和正常用户</li><li>解决办法：完成爬虫的编写之后，使用代理批量爬取测试&#x2F;仔细分析响应内容结构，找出页面中存在的陷阱</li></ul><h4 id="通过假数据反爬"><a href="#通过假数据反爬" class="headerlink" title="通过假数据反爬"></a>通过假数据反爬</h4><ul><li>反爬原理：向返回的响应中添加假数据污染数据库，通常假数据不会被正常用户看到</li><li>解决办法：长期运行，核对数据库中数据同实际页面中数据对应情况，如果存在问题&#x2F;仔细分析响应内容</li></ul><h4 id="阻塞任务队列"><a href="#阻塞任务队列" class="headerlink" title="阻塞任务队列"></a>阻塞任务队列</h4><ul><li>反爬原理：通过生成大量垃圾url，从而阻塞任务队列，降低爬虫的实际工作效率</li><li>解决办法：观察运行过程中请求响应状态&#x2F;仔细分析源码获取垃圾url生成规则，对URL进行过滤</li></ul><h4 id="阻塞网络IO"><a href="#阻塞网络IO" class="headerlink" title="阻塞网络IO"></a>阻塞网络IO</h4><ul><li>反爬原理：发送请求获取响应的过程实际上就是下载的过程，在任务队列中混入一个大文件的url，当爬虫在进行该请求时将会占用网络IO，如果是有多线程则会占用线程</li><li>解决办法：观察爬虫运行状态&#x2F;多线程对请求线程计时&#x2F;发送请求线</li></ul><h4 id="运维平台综合审计"><a href="#运维平台综合审计" class="headerlink" title="运维平台综合审计"></a>运维平台综合审计</h4><ul><li>反爬原理：通过运维平台进行综合管理，通常采用复合型反爬虫策略，多种手段同时使用</li><li>解决办法：仔细观察分析，长期运行测试目标网站，检查数据采集速度，多方面处理</li></ul><h3 id="常见基于数据加密进行反爬"><a href="#常见基于数据加密进行反爬" class="headerlink" title="常见基于数据加密进行反爬"></a>常见基于数据加密进行反爬</h3><p>对响应中含有的数据进行特殊化处理,通常的特殊化处理主要指的就是css数据偏移&#x2F;自定义字体&#x2F;数据加密&#x2F;数据图片&#x2F;特殊编码格式等</p><h4 id="通过自定义字体来反爬，例如猫眼电影的评分"><a href="#通过自定义字体来反爬，例如猫眼电影的评分" class="headerlink" title="通过自定义字体来反爬，例如猫眼电影的评分"></a>通过自定义字体来反爬，例如猫眼电影的评分</h4><ul><li>反爬思路：使用自有字体文件</li><li>解决办法：切换到手机版&#x2F;解析字体文件进行翻译</li></ul><h4 id="通过css来反爬"><a href="#通过css来反爬" class="headerlink" title="通过css来反爬"></a>通过css来反爬</h4><ul><li>反爬思路：源码数据不为真正的数据，需要通过css位移才能产生真正的数据</li><li>解决办法：计算css的偏移</li></ul><h4 id="通过js动态生成数据进行反爬"><a href="#通过js动态生成数据进行反爬" class="headerlink" title="通过js动态生成数据进行反爬"></a>通过js动态生成数据进行反爬</h4><ul><li>反爬原理：通过js动态生成</li><li>解决办法：解析关键js，获得数据生成流程，模拟生成数据</li></ul><h4 id="通过数据图片化反爬"><a href="#通过数据图片化反爬" class="headerlink" title="通过数据图片化反爬"></a>通过数据图片化反爬</h4><ul><li>反爬原理：<a href="https://baise.58.com/duanzu/3801871883498x.shtml">58同城短租</a></li><li>解决办法：通过使用图片解析引擎从图片中解析数据</li></ul><h4 id="通过编码格式进行反爬"><a href="#通过编码格式进行反爬" class="headerlink" title="通过编码格式进行反爬"></a>通过编码格式进行反爬</h4><ul><li>反爬原理：不适用默认编码格式，在获取响应之后通常爬虫使用utf-8格式进行解码，此时解码结果将会是乱码或者报错</li><li>解决办法：根据源码进行多格式解码，或者真正的解码格式</li></ul><h3 id="robots-txt协议"><a href="#robots-txt协议" class="headerlink" title="robots.txt协议"></a>robots.txt协议</h3><p>robots.txt(小写)是一种存放与根目录下的ASCCI编码的文本文件，它通常搞忘网络蜘蛛，此网站中的**哪些内容是不应被网络蜘蛛爬取的，哪些是可以被网络蜘蛛爬取的。</p><p><img src="/static/imgs/crawler/robots.txt-file.png"></p><center >   <p style="color:#A8A8A8">       robots.txt协议并不是一个规范，而只是约定俗成的,所以并不能保证网站的隐私。    </p> </center> ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见反爬手段&quot;&gt;&lt;a href=&quot;#常见反爬手段&quot; class=&quot;headerlink&quot; title=&quot;常见反爬手段&quot;&gt;&lt;/a&gt;常见反爬手段&lt;/h1&gt;&lt;h2 id=&quot;反爬的原因&quot;&gt;&lt;a href=&quot;#反爬的原因&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Python爬虫" scheme="https://sqlsafe.github.io/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://sqlsafe.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="crawler" scheme="https://sqlsafe.github.io/tags/crawler/"/>
    
    <category term="反爬" scheme="https://sqlsafe.github.io/tags/%E5%8F%8D%E7%88%AC/"/>
    
    <category term="robots.txt" scheme="https://sqlsafe.github.io/tags/robots-txt/"/>
    
    <category term="cookie" scheme="https://sqlsafe.github.io/tags/cookie/"/>
    
    <category term="referer" scheme="https://sqlsafe.github.io/tags/referer/"/>
    
    <category term="验证码" scheme="https://sqlsafe.github.io/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="阻塞网络IO" scheme="https://sqlsafe.github.io/tags/%E9%98%BB%E5%A1%9E%E7%BD%91%E7%BB%9CIO/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫--简介</title>
    <link href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E7%AE%80%E4%BB%8B/"/>
    <id>https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E7%AE%80%E4%BB%8B/</id>
    <published>2022-04-27T14:37:48.000Z</published>
    <updated>2022-04-27T15:00:41.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><p>网络爬虫（又称为<strong>网页蜘蛛</strong>，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p><h2 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h2><h3 id="通用网络爬虫-Scalable-Web-Crawler"><a href="#通用网络爬虫-Scalable-Web-Crawler" class="headerlink" title="通用网络爬虫(Scalable Web Crawler)"></a>通用网络爬虫(Scalable Web Crawler)</h3><p>通用网络爬虫的结构大致可以分为<strong>页面爬行</strong>模块、<strong>页面分析</strong>模块、<strong>链接过滤</strong>模块、页面数据库、URL 队列、初始 URL 集合</p><ul><li>深度优先策略:按照深度又低到高的顺序，依次访问下一级网页链接，这种策略比较适合垂直搜索或站内搜索。</li><li>广度优先策略:按照网页内容目录层次深浅来爬行页面，处于较浅目录层次的页面首先被爬行。这种策略能够有效控制页面的爬行深度。</li></ul><h3 id="聚焦网络爬虫-Focused-Crawler"><a href="#聚焦网络爬虫-Focused-Crawler" class="headerlink" title="聚焦网络爬虫(Focused Crawler)"></a>聚焦网络爬虫(Focused Crawler)</h3><p>选择性爬行那些与预<strong>先定义好的主题相关页面</strong>的网络爬虫</p><ul><li>基于内容评价的爬行策略：将用户输入查询词作为主题，包含查询词的页面被视为与主题相关，起局限性在于无法评价页面与主题相关度的高低。</li><li>基于链接结构评价的爬行策略：通过计算每个已访问页面的Authority权重和Hub权重，并依次决定链接的访问顺序。</li><li>基于增强学习的爬行策略：Rennie 和 McCallum 将增强学习引入聚焦爬虫，利用贝叶斯分类器，根据整个网页文本和链接文本对超链接进行分类，为每个链接计算出重要性，从而决定链接的访问顺序。</li><li>基于语境图的爬行策略：通过建立语境图学习网页之间的相似度，训练一个机器学习系统，通过该系统可计算当前页面到相关Web页面的距离，距离越近的页面中的链接优先访问。</li></ul><h3 id="增量式网络爬虫-Incremental-Web-Carawler"><a href="#增量式网络爬虫-Incremental-Web-Carawler" class="headerlink" title="增量式网络爬虫(Incremental Web Carawler)"></a>增量式网络爬虫(Incremental Web Carawler)</h3><p>指对已下载网页采取增量式更新和只爬行新产生的或者已经发生变化网页的爬虫，它能够在一定程度上保证所爬行的页面尽可能新的页面。</p><p>常用的方法有：</p><ul><li>统一更新发</li><li>个体更新发</li><li>基于分类的更新法</li></ul><h3 id="Deep-Web爬虫-Surface-Web"><a href="#Deep-Web爬虫-Surface-Web" class="headerlink" title="Deep Web爬虫(Surface Web)"></a>Deep Web爬虫(Surface Web)</h3><p>Deep Web 是那些大部分内容不能通过<strong>静态链接获取</strong>的、<strong>隐藏在搜索表单后的</strong>，只有用户提交一些关键词才能获得的 Web 页面。</p><p>Deep Web 爬虫体系结构包含六个基本功能模块 （<strong>爬行控制器、解析器、表单分析器、表单处理器、响应分析器、LVS 控制器</strong>）和两个爬虫内部数据结构（URL 列表、LVS 表）。 其中 LVS（Label Value Set）表示标签&#x2F;数值集合，用来表示填充表单的数据源。</p><h4 id="Deep-Web爬虫爬行过程中表单填写类型："><a href="#Deep-Web爬虫爬行过程中表单填写类型：" class="headerlink" title="Deep Web爬虫爬行过程中表单填写类型："></a>Deep Web爬虫爬行过程中表单填写类型：</h4><ul><li>基于领域知识的表单填写</li><li>基于网页结构分析的表单填写</li></ul><h2 id="爬虫核心"><a href="#爬虫核心" class="headerlink" title="爬虫核心"></a>爬虫核心</h2><ul><li>爬取网页数据</li><li>解析数据</li><li>爬虫和反爬之间的博弈</li></ul><h2 id="爬虫用途"><a href="#爬虫用途" class="headerlink" title="爬虫用途"></a>爬虫用途</h2><p><img src="/static/imgs/crawler/spider-10.jpeg"></p><ul><li>数据分析&#x2F;数据源</li><li>社交软件冷启动</li><li>竞争对手监控</li><li>舆情监控</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫&quot;&gt;&lt;a href=&quot;#爬虫&quot; class=&quot;headerlink&quot; title=&quot;爬虫&quot;&gt;&lt;/a&gt;爬虫&lt;/h1&gt;&lt;p&gt;网络爬虫（又称为&lt;strong&gt;网页蜘蛛&lt;/strong&gt;，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，</summary>
      
    
    
    
    <category term="Python爬虫" scheme="https://sqlsafe.github.io/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://sqlsafe.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="crawler" scheme="https://sqlsafe.github.io/tags/crawler/"/>
    
    <category term="爬虫分类" scheme="https://sqlsafe.github.io/tags/%E7%88%AC%E8%99%AB%E5%88%86%E7%B1%BB/"/>
    
    <category term="Scalable Web Crawler" scheme="https://sqlsafe.github.io/tags/Scalable-Web-Crawler/"/>
    
    <category term="Focused Crawler" scheme="https://sqlsafe.github.io/tags/Focused-Crawler/"/>
    
    <category term="Incremental Web Carawler" scheme="https://sqlsafe.github.io/tags/Incremental-Web-Carawler/"/>
    
    <category term="Surface Web" scheme="https://sqlsafe.github.io/tags/Surface-Web/"/>
    
    <category term="通用网络爬虫" scheme="https://sqlsafe.github.io/tags/%E9%80%9A%E7%94%A8%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    <category term="聚焦网络爬虫" scheme="https://sqlsafe.github.io/tags/%E8%81%9A%E7%84%A6%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    <category term="增量式网络爬虫" scheme="https://sqlsafe.github.io/tags/%E5%A2%9E%E9%87%8F%E5%BC%8F%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    <category term="Deep Web爬虫" scheme="https://sqlsafe.github.io/tags/Deep-Web%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-HTTP/"/>
    <id>https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-HTTP/</id>
    <published>2022-04-27T14:17:51.000Z</published>
    <updated>2022-04-27T15:44:52.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="HTTP简介："><a href="#HTTP简介：" class="headerlink" title="HTTP简介："></a>HTTP简介：</h2><p>HTTP（HyperText Transfer Protocol）即超文本传输协议，是一种详细规定了浏览器和万维网服务器之间互相通信的规则，它是万维网交换信息的基础，它允许将HTML（超文本标记语言）文档从Web服务器传送到Web浏览器。</p><p>HTTP协议目前最新版的版本是1.1，HTTP是一种无状态的协议，无状态是指Web浏览器与Web服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后Web服务器返回响应（Response），连接就被关闭了，在服务器端不保留连接的有关信息。也就是说，HTTP请求只能由客户端发起，而服务器不能主动向客户端发送数据。</p><p>HTTP是一个基于TCP&#x2F;IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><h2 id="HTTP工作原理："><a href="#HTTP工作原理：" class="headerlink" title="HTTP工作原理："></a>HTTP工作原理：</h2><ul><li>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。</li><li>Web服务器有：Apache服务器，IIS服务器等</li><li>Web服务器根据接收到的请求后，向客户端发送响应信息</li><li>HTTP默认端口号80</li></ul><h2 id="HTTP请求头信息（request）"><a href="#HTTP请求头信息（request）" class="headerlink" title="HTTP请求头信息（request）"></a>HTTP请求头信息（request）</h2><p><strong>HTTP请求报文由3部门组成(请求行+请求头+请求体)</strong></p><p><img src="/static/imgs/crawler/http01.png"></p><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p><strong>请求URL地址（统一资源定位符）</strong></p><p><strong>协议名称版本号</strong></p><p><strong>报文头（服务端获取客户端信息key：value）</strong></p><p><strong>报文体（a&#x3D;1&amp;b&#x3D;2的键值对编码成一个格式字符串传递数值）</strong></p><h4 id="请求方法（Request-method）"><a href="#请求方法（Request-method）" class="headerlink" title="请求方法（Request method）"></a>请求方法（Request method）</h4><ul><li>GET</li><li>POST</li><li>HEAD</li><li>PUT</li></ul><h4 id="HTTP请求报文属性"><a href="#HTTP请求报文属性" class="headerlink" title="HTTP请求报文属性"></a>HTTP请求报文属性</h4><ul><li>Accpet：高数服务器客户端接受什么类型的响应</li><li>Referer：表示这个请求是从那个url进来的</li><li>Cache-Control：对缓存进行控制</li><li>Accept-Encoding：接收编码格式</li><li>Host：指定要请求资源所在主机和端口</li><li>User-Agent：浏览器版本信息</li></ul><h3 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h3><p><strong>响应报文由三个部分组成（相应行，响应头，响应体）</strong></p><p><img src="/static/imgs/crawler/http04.png"></p><ul><li><p>报文协议及版本；</p></li><li><p>状态码及状态描述；</p></li><li><p>响应报文头，也是由多个属性组成；</p></li><li><p>响应报文体，即我们要的数据。</p></li></ul><h3 id="HTTP相应状态码"><a href="#HTTP相应状态码" class="headerlink" title="HTTP相应状态码"></a>HTTP相应状态码</h3><p><img src="/static/imgs/crawler/status_code.png"></p><ul><li>200 OK 表示成功</li><li>303 重定向,把你重定向到其他页面</li><li>304 资源并未修改,可以直接使用本地的缓存</li><li>404 找不到页面(页面被删除或其他)</li><li>500 服务端错误</li></ul><h4 id="HTTP响应报文属性"><a href="#HTTP响应报文属性" class="headerlink" title="HTTP响应报文属性"></a>HTTP响应报文属性</h4><ul><li>Cache-Control：响应输出到客户端后，服务器通过该属性告诉客户端该怎么控制响应内容的缓存</li><li>ETag：表示你请求资源的版本，如果该资源发生变化，那么属性也会跟着变化</li><li>Location：在重定向中或者创建新资源时使用</li><li>Set-Cookie：服务端可以设置客户端cookie</li></ul><h3 id="一次完整的http请求过程"><a href="#一次完整的http请求过程" class="headerlink" title="一次完整的http请求过程"></a>一次完整的http请求过程</h3><p><strong>域名解析 –&gt; 建立连接 –&gt; 接受请求 –&gt; 处理请求 –&gt; 访问资源 –&gt; 构建相应报文 –&gt; 发送响应报文 –&gt; 记录日志</strong></p><p><img src="/static/imgs/crawler/http03.png"></p><h4 id="域名解析："><a href="#域名解析：" class="headerlink" title="域名解析："></a>域名解析：</h4><p>当用户在浏览器地址栏输入<a href="http://www.baidu.com/">http://www.baidu.com</a> 发起一个请求，首先会把该域名解析为ip地址。</p><p>DNS 的详细解析过程：<a href="http://vinsent.blog.51cto.com/13116656/1967876">http://vinsent.blog.51cto.com/13116656/1967876</a></p><h4 id="建立连接："><a href="#建立连接：" class="headerlink" title="建立连接："></a>建立连接：</h4><p>浏览器会开启一个随机端口向服务器的80端口发起tcp连接请求，经过3次握手后建立tcp连接，然后向服务器发起httpd请求。   </p><ul><li>TCP三次握手</li><li>TCP四次挥手</li></ul><p><a href="https://zhuanlan.zhihu.com/p/53374516"><img src="/static/imgs/crawler/tcp.png" alt="alt text" title="TCP三次握手，四次挥手”你真的懂吗？"></a></p><h4 id="接收请求："><a href="#接收请求：" class="headerlink" title="接收请求："></a>接收请求：</h4><p>接受请求所要完成的工作就是接收来自网络的请求报文中对某一资源的请求过程</p><ul><li><p>单进程I&#x2F;O模型</p></li><li><p>多进程I&#x2F;O模型</p></li><li><p>复用I&#x2F;O结构</p></li><li><p>复用多线程I&#x2F;O模型</p></li><li><p>处理请求：以Apache的prefork工作模式为例，管理进程在接受到请求报文后会选择一个工作进程来对该请求进行处理，得到其请求方法和资源URL等相关信息</p></li><li><p>访问资源：对请求处理时一般需要访问后端资源，执行代码得到请求结果，把结果返回给服务器</p></li><li><p>构建响应报文：在得到返回的请求结果后，开始构建响应报文</p><ul><li>永久重定向</li><li>零时重定向</li></ul></li><li><p>发送响应报文：响应报文构建完成后，发送响应报文</p></li><li><p>记录日志：最后，当事务结束时，web服务器会在日志文件中添加一个条目，来描述已执行的事务</p></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><strong>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息</strong></p><p><img src="/static/imgs/crawler/cookie.png"></p><ul><li><p>1、Cookie是一种在客户端保持HTTP状态信息的技术</p></li><li><p>2、Cookie是在浏览器访问WEB服务器的某个资源时，由WEB服务器在HTTP响应消息头中附带发送给浏览器的数据</p></li><li><p>3、一旦WEB浏览器保存了某个Cookie，那么它在以后每次访问该WEB服务器时，都应在HTTP请求头中将这个Cookie发送给WEB服务器</p></li></ul><h4 id="Cookie功能特点："><a href="#Cookie功能特点：" class="headerlink" title="Cookie功能特点："></a>Cookie功能特点：</h4><ul><li>存储于浏览器头部&#x2F;传输于HTTP头部</li><li>写时带属性，读时无属性</li><li>HTTP头中Cookie：user&#x3D;admin;pwd&#x3D;123;</li><li>属性name&#x2F;value&#x2F;expire&#x2F;domain&#x2F;path&#x2F;…..</li><li>由三元组[name,doman,path]确定唯一cookie</li></ul><h4 id="Cookie的安全属性："><a href="#Cookie的安全属性：" class="headerlink" title="Cookie的安全属性："></a>Cookie的安全属性：</h4><ul><li>secure属性：当设置为true时，表示创建的Cookie会被以安全的形式向服务器传输，也就是只能在HTTPS连接中被浏览器传递到服务器段进行会话验证，如果时HTTP连接则不会传递该信息，所以不能窃取到Cookie的具体内容。</li><li>HttpOnly属性：如果在Cookie中设置了”HttpOnly“属性，那么通过程序（JS脚本等）将无法读取到Cookie信息，这样能有效防止XSS攻击。</li></ul><p> secure属性是防止信息在传递的过程中被监听捕获后信息泄露，HttpOnly属性的目的是防止程序获取cookie后进行攻击</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p><strong>Session 是 用于保持状态的基于Web服务器的方法。Session允许通过将对象存储在Web服务器的内存中在整个用户会话过程中保持任何对象</strong></p><p><img src="/static/imgs/crawler/session2.png"></p><ul><li><p>使用Cookie和附加URL参数都可以将上次请求的状态信息传递到下次请求中，但是如果传递的状态信息较多，将极大降低网络传输效率和增大服务器端程序处理的难度。</p></li><li><p>Session是一种将会话状态保存在服务器端的技术。</p></li><li><p>客户端需要接收、记忆和发送Session的会话标识号，Session可以且通常是借助于Cookie来传递会话标识号。</p></li></ul><h3 id="利用Cookie实现Session跟踪"><a href="#利用Cookie实现Session跟踪" class="headerlink" title="利用Cookie实现Session跟踪"></a>利用Cookie实现Session跟踪</h3><ul><li>如果web服务器处理某个访问请求时创建了新的HttpSession对象，它将会把会话标识号作为一个Cookie项加入到响应消息中，通常情况下，浏览器在随后发出的访问请求中又将会话标识号以Cookie的形式回传给web服务器。</li><li>web服务器端程序依据回传的会话标识号就知道以前已经为该客户端创建了HttpSession对象，不必再为客户端创建新的HttpSession对象。而是直接使用与该会话标识号匹配的HttpSession对象，通过这种方式就实现了对同一个客户端的会话状态的跟踪。</li></ul><h3 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h3><p><img src="/static/imgs/crawler/session&cookie.png"></p><p><strong>session和cookie同样都是针对单独用户对象，不同的用户在访问网站时，都会拥有各种的session或者cookie，不同用户之间互不干扰。</strong></p><ul><li>存储位置</li><li>生命周期</li></ul><h3 id="cookie和session区别"><a href="#cookie和session区别" class="headerlink" title="cookie和session区别"></a>cookie和session区别</h3><ul><li>cookie数据存放在客户的浏览器，session数据存放在服务器。</li><li>cookie不是很安全，可以分析存放在本地COOKIE并进行COOKIE欺骗考虑安全应当使用session。</li><li>session会在一定时间内保存在服务器。当访问增多，会占用服务器性能。考虑减轻服务器性能方面，应当使用COOKIE。</li><li>单个cookie在客户端的限制时3k。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h1&gt;&lt;h2 id=&quot;HTTP简介：&quot;&gt;&lt;a href=&quot;#HTTP简介：&quot; class=&quot;headerlink&quot; title=&quot;HTT</summary>
      
    
    
    
    <category term="Python爬虫" scheme="https://sqlsafe.github.io/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://sqlsafe.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="crawler" scheme="https://sqlsafe.github.io/tags/crawler/"/>
    
    <category term="HTTP" scheme="https://sqlsafe.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB/"/>
    <id>https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB/</id>
    <published>2022-04-27T13:59:12.000Z</published>
    <updated>2022-04-28T14:07:43.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、HTTP"><a href="#一、HTTP" class="headerlink" title="一、HTTP"></a><a href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-HTTP/">一、HTTP</a></h2><ul><li>HTTP简介</li><li>HTTP工作原理</li><li>HTTP请求头和响应头</li><li>HTTP响应报文</li><li>HTTP状态码</li><li>一次完整的http请求过程</li><li>Cookie</li><li>Session</li></ul><h2 id="二、爬虫"><a href="#二、爬虫" class="headerlink" title="二、爬虫"></a><a href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E7%AE%80%E4%BB%8B/">二、爬虫</a></h2><ul><li><p>爬虫分类</p></li><li><p>爬虫核心</p></li><li><p>爬虫用途</p></li></ul><h2 id="三、常见反爬手段"><a href="#三、常见反爬手段" class="headerlink" title="三、常见反爬手段"></a><a href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E5%8F%8D%E7%88%AC/">三、常见反爬手段</a></h2><ul><li><p>反爬的原因</p></li><li><p>常见基于身份识别进行反爬</p></li><li><p>常见基于数据加密进行反爬</p></li><li><p>robots.txt协议</p></li></ul><h2 id="四、Urllib"><a href="#四、Urllib" class="headerlink" title="四、Urllib"></a><a href="https://sqlsafe.github.io/categories/Python%E7%88%AC%E8%99%AB/">四、Urllib</a></h2><ul><li>urllib库使用</li><li>请求对象定制</li><li>Ajax</li><li>Handler处理器</li></ul><h2 id="五、数据解析"><a href="#五、数据解析" class="headerlink" title="五、数据解析"></a><a href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/">五、数据解析</a></h2><ul><li>JsonPath</li><li>BeautifulSoup（bs4）</li></ul><h2 id="六、无头浏览器"><a href="#六、无头浏览器" class="headerlink" title="六、无头浏览器"></a><a href="https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%AB-selenium/">六、无头浏览器</a></h2><ul><li>selenium</li><li>Phantomjs</li><li>Chrome handless</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、HTTP&quot;&gt;&lt;a href=&quot;#一、HTTP&quot; class=&quot;headerlink&quot; title=&quot;一、HTTP&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sqlsafe.github.io/2022/04/27/Python%E7%88%AC%E8%99%</summary>
      
    
    
    
    <category term="Python爬虫" scheme="https://sqlsafe.github.io/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="https://sqlsafe.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="crawler" scheme="https://sqlsafe.github.io/tags/crawler/"/>
    
    <category term="HTTP" scheme="https://sqlsafe.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>算法进阶--动态规划(DP)</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP/</id>
    <published>2022-04-26T15:09:38.000Z</published>
    <updated>2022-04-26T15:26:43.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p><strong>动态规划（Dynamic Programming，DP）是运筹学的一个分支，是求解决策过程最优化的过程。20世纪50年代初，美国数学家贝尔曼（R.Bellman）等人在研究多阶段决策过程的优化问题时，提出了著名的最优化原理，从而创立了动态规划。动态规划的应用极其广泛，包括工程技术、经济、工业生产、军事以及自动化控制等领域，并在背包问题、生产经营问题、资金管理问题、资源分配问题、最短路径问题和复杂系统可靠性问题等中取得了显著的效果</strong></p><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>公元 1202 年，意大利数学家莱昂纳多·斐波那契提出了具备以下特征的数列：</p><ul><li>前两个数的值分别为 0 、1 或者 1、1；</li><li>从第 3 个数字开始，它的值是前两个数字的和；<br>为了纪念他，人们将满足以上两个特征的数列称为斐波那契数列。</li></ul><p>如下就是一个斐波那契数列：<br>1 1 2 3 5 8 13 21 34……</p><h3 id="递归速度问题-子问题重复计算"><a href="#递归速度问题-子问题重复计算" class="headerlink" title="递归速度问题-子问题重复计算"></a><strong>递归速度问题-子问题重复计算</strong></h3><p>递归是一种<strong>自顶向下</strong>的、很直观的编程方法，解释性强。但在写递归的时候，最关键的问题是怎样避免递归过程中可能产生的大量重复计算，即重叠子问题，否则，写出来的代码即便没有逻辑错误，也几乎会因为超时无法运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibnacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibnacci(n-<span class="number">1</span>) + fibnacci(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(5) = f(4)+f(3)</span><br><span class="line">f(4) = f(3)+f(2)</span><br><span class="line">f(3) = f(2)+f(1)</span><br><span class="line">f(2) = 1</span><br><span class="line">f(1) = 1</span><br></pre></td></tr></table></figure><h3 id="动态规划思想-x3D-最优子结构-x3D-递推式"><a href="#动态规划思想-x3D-最优子结构-x3D-递推式" class="headerlink" title="动态规划思想 &#x3D; 最优子结构 &#x3D; 递推式"></a><strong>动态规划思想 &#x3D; 最优子结构 &#x3D; 递推式</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibnacci_no_rec</span>(<span class="params">n</span>):</span><br><span class="line">    f = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">            num = f[-<span class="number">1</span>]+f[-<span class="number">2</span>]</span><br><span class="line">            f.append(num)</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure><h2 id="钢条切割问题"><a href="#钢条切割问题" class="headerlink" title="钢条切割问题"></a>钢条切割问题</h2><p><strong>钢条，价格与钢条长度之间的关系如下表：</strong></p><p><img src="/static/imgs/algorithm/cut_rod-1.png"></p><p><strong>现在有一段长度为n的钢条和价格表，求收益最大方案。</strong></p><ul><li>长度为4的钢条最优方案是c</li></ul><p><img src="/static/imgs/algorithm/cut_rod-2.png"></p><ul><li>钢条长度和价格最优关系表：</li></ul><p><img src="/static/imgs/algorithm/cut_rod-3.png"></p><h3 id="长度是n的钢条切割方案"><a href="#长度是n的钢条切割方案" class="headerlink" title="长度是n的钢条切割方案"></a>长度是n的钢条切割方案</h3><p><strong>递推式</strong></p><ul><li>设长度为n的钢条切割后最优收益值为rn，可以得出递推式：<ul><li><img src="/static/imgs/algorithm/cut-rod-4.png" alt="img.png"></li></ul></li><li>第一个参数pn表示不切割的价格</li><li>其他n-1个参数分别表示另外n-1种不同切割方案，对方案i&#x3D;1,2,…,n-1<ul><li>将钢条切割长度为i和n-i两段</li><li>方案i的最优收益为切割两段最优之和</li></ul></li><li>考察所有的i，选择其中收益最大的方案。</li></ul><p><strong>最优子结构</strong></p><p>可以将求解规模为n的原问题，划分为规模更小的子问题：</p><ul><li>钢条切割问题还存在更简单的递归求解方法<ul><li>从钢条的左边切割下长度为i的一段，只对右边剩下的一段继续进行切割，左边的不在切割</li><li>递推式简化为<img src="/static/imgs/algorithm/cut_rod-5.png" alt="img.png"></li><li>不做切割的方案就可以描述为：左边一段长度为n，收益为pn，剩余一段长度为0，收益为r0&#x3D;0</li></ul></li></ul><h4 id="自顶向下实现-–-O-2-n"><a href="#自顶向下实现-–-O-2-n" class="headerlink" title="自顶向下实现 – O(2^n)"></a>自顶向下实现 – O(2^n)</h4><p><img src="/static/imgs/algorithm/cut_rod_down.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">p = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">36</span>, <span class="number">39</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_rec</span>(<span class="params">p, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        res = <span class="built_in">max</span>(res, cut_rod_rec(p, i) + cut_rod_rec(p, n - i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_rec_2</span>(<span class="params">p, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        res = <span class="built_in">max</span>(res, p[i] + cut_rod_rec_2(p, n - i))</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="自底向上-–-O-n-2"><a href="#自底向上-–-O-n-2" class="headerlink" title="自底向上 – O(n^2)"></a>自底向上 – O(n^2)</h4><p><strong>由于每次都是直接取之前存好的值。</strong></p><p><img src="/static/imgs/algorithm/cut_rod_up.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_dp</span>(<span class="params">p ,n</span>):</span><br><span class="line">    r = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">max</span>(res, r[i-j]+p[j])</span><br><span class="line">        r.append(res)</span><br><span class="line">    <span class="keyword">return</span> r[n]</span><br></pre></td></tr></table></figure><h4 id="重构解"><a href="#重构解" class="headerlink" title="重构解"></a>重构解</h4><ul><li>输出最优切割方案</li></ul><p><img src="/static/imgs/algorithm/cut_rod-6.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_extent</span>(<span class="params">p, n</span>):</span><br><span class="line">    r = [<span class="number">0</span>]     <span class="comment"># 最优解</span></span><br><span class="line">    s = [<span class="number">0</span>]     <span class="comment"># 切割后左边的长度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        res_r = <span class="number">0</span></span><br><span class="line">        res_s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j] + r[i-j] &gt; res_r:</span><br><span class="line">                res_r = p[j] + r[i-j]</span><br><span class="line">                res_s = j</span><br><span class="line">        r.append(res_r)</span><br><span class="line">        s.append(res_s)</span><br><span class="line">    <span class="keyword">return</span> r[n], s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_rod_solution</span>(<span class="params">p, n</span>):</span><br><span class="line">    r, s = cut_rod_extent(p, n)</span><br><span class="line">    end = []</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        end.append(s[n])</span><br><span class="line">        n -= s[n]</span><br><span class="line">    <span class="keyword">return</span> end</span><br></pre></td></tr></table></figure><h3 id="动态规划问题特征"><a href="#动态规划问题特征" class="headerlink" title="动态规划问题特征"></a>动态规划问题特征</h3><ul><li>最优子结构</li><li>重叠子问题</li></ul><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p><strong>一个序列的子序列是在该序列中删去若干元素后得到的序列。例如：“ABCD”和“BDF”都是“ABCDEFG”的子序列。</strong></p><p><strong>最长公共子序列（Longest Common Subsequence,简写LCS）问题：给定两个序列X和Y，求X和Y长度最大的公共子序列。例如：X&#x3D;“ABBCBDE”, Y&#x3D;”DBBCDB”, LCS(X,Y)&#x3D;”BBCD”</strong></p><h3 id="最优子结构原理"><a href="#最优子结构原理" class="headerlink" title="最优子结构原理"></a>最优子结构原理</h3><p>X&#x3D;&lt;x1,x2,…,xm&gt;和Y&#x3D;&lt;y1,y2,…,yn&gt;为两个序列，Z&#x3D;&lt;z1,z2,…,zk&gt;为X和Y的任意LCS。</p><ul><li>如果xm&#x3D;yn，则zk&#x3D;xm&#x3D;yn且Zk-1是Xm-1和Yn-1的一个LCS。</li><li>如果xm≠yn，那么zk≠xm意味着Z是Xm-1和Y的一个LCS。</li><li>如果xm≠yn，那么zk≠yn意味着Z是X和Yn-1的一个LCS。</li></ul><h3 id="递推式"><a href="#递推式" class="headerlink" title="递推式"></a>递推式</h3><p><img src="/static/imgs/algorithm/dp_lcs.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lcs_length</span>(<span class="params">x, y</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i-<span class="number">1</span>] == y[j-<span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = <span class="built_in">max</span>(c[i-<span class="number">1</span>][j],c[i][j-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> c:</span><br><span class="line">        <span class="built_in">print</span>(_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c[m][n]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcs</span>(<span class="params">x, y</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    b = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]  <span class="comment"># 左上方  上方  左方</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i - <span class="number">1</span>] == y[j - <span class="number">1</span>]:  <span class="comment"># i,j位置上的字符匹配的时候，来自于左上方+1</span></span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                b[i][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> c[i - <span class="number">1</span>][j] &gt;= c[i][j - <span class="number">1</span>]:  <span class="comment"># 来自于上方(这里把等于也偏向上)</span></span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j]</span><br><span class="line">                b[i][j] = <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 来自于左方</span></span><br><span class="line">                c[i][j] = c[i][j - <span class="number">1</span>]</span><br><span class="line">                b[i][j] = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> c[m][n], b</span><br><span class="line"></span><br><span class="line">c, b = lcs(<span class="string">&quot;ABCBDAB&quot;</span>, <span class="string">&quot;BDCABA&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> b:</span><br><span class="line">    <span class="built_in">print</span>(_)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcs_trackback</span>(<span class="params">x,y</span>):</span><br><span class="line">    c, b = lcs(x, y)</span><br><span class="line">    i = <span class="built_in">len</span>(x)</span><br><span class="line">    j = <span class="built_in">len</span>(y)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b[i][j] == <span class="number">1</span>:   <span class="comment"># 来自左上方 -- 匹配</span></span><br><span class="line">            res.append(x[i-<span class="number">1</span>])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> b[i][j] == <span class="number">2</span>:   <span class="comment"># 来自于上方 -- 不匹配</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:       <span class="comment"># ==3,来自左方 -- 不匹配</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>(res))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;动态规划（Dynamic Programming，DP）是运筹学的一个分支，是求解决策过程最优化的过程。20</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://sqlsafe.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Dynamic Programming" scheme="https://sqlsafe.github.io/tags/Dynamic-Programming/"/>
    
    <category term="斐波那契数列" scheme="https://sqlsafe.github.io/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>算法进阶--贪心算法</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2022-04-26T15:09:14.000Z</published>
    <updated>2022-04-26T15:16:29.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p><strong>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。</strong></p><p>贪心算法并不保证会得到最优解，但是在某些问题上贪心算法的解就是最优解。要判断一个问题能否用贪心算法来计算。</p><h2 id="一、找零问题"><a href="#一、找零问题" class="headerlink" title="一、找零问题"></a>一、找零问题</h2><p><strong>假设商店老板需要找零n元钱，钱币的面额有：100元、50元、20元、5元、1元，如何找零使得所需钱币的数量最小？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">t, n</span>):</span><br><span class="line">    m = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line">    <span class="keyword">for</span> i, money <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">        m[i] = n // money</span><br><span class="line">        n = n % money</span><br><span class="line">    <span class="keyword">return</span> m, n</span><br></pre></td></tr></table></figure><h2 id="二、背包问题"><a href="#二、背包问题" class="headerlink" title="二、背包问题"></a>二、背包问题</h2><p><strong>背包问题(Knapsack problem)是一种组合优化的NP完全问题。 问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。 问题的名称来源于如何选择最合适的物品放置于给定背包中。</strong></p><p>一个小偷在某个商店发现有n个商品，第i个商品价值vi元，重wi千克。他希望拿走的价值尽量高，但他的背包最多只能容纳W千克的东西。他应该拿走哪些商品？</p><ul><li><p>0-1背包</p><p>对于一个商品，小偷要么把它完整拿走，要么留下。不能只拿走一部分，或把一个商品拿走多次。</p></li><li><p>分数背包</p><p>对于一个商品，小偷可以拿走其中任意一部分。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">goods = [(<span class="number">60</span> ,<span class="number">10</span>) ,(<span class="number">100</span> ,<span class="number">20</span>) ,(<span class="number">120</span> ,<span class="number">30</span>)]    <span class="comment"># （价格，重量）</span></span><br><span class="line">goods.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]/x[<span class="number">1</span>] ,reverse = <span class="literal">True</span>)     <span class="comment"># 根据商品单价排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fraction_backpack</span>(<span class="params">goods, w</span>):</span><br><span class="line">    m =[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(goods))]</span><br><span class="line">    total_v = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,(price,weight) <span class="keyword">in</span> <span class="built_in">enumerate</span>(goods):</span><br><span class="line">        <span class="keyword">if</span> weight &lt; w:</span><br><span class="line">            m[i] = <span class="number">1</span></span><br><span class="line">            total_v += price</span><br><span class="line">            w -= weight</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m[i] = w / weight</span><br><span class="line">            total_v += price * m[i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> m ,total_v</span><br></pre></td></tr></table></figure><h2 id="三、拼接最大数字问题"><a href="#三、拼接最大数字问题" class="headerlink" title="三、拼接最大数字问题"></a>三、拼接最大数字问题</h2><p><strong>有n个非负整数，将其按照字符串拼接的方式拼接为一个整体。如何拼接可以使得得到的整数最大？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xy_cap</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x + y &lt; y + x:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x + y &gt; y + x:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number_join</span>(<span class="params">li</span>):</span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, li))</span><br><span class="line">    li.sort(key=cmp_to_key(xy_cap))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(li)</span><br></pre></td></tr></table></figure><h2 id="四、活动选择问题"><a href="#四、活动选择问题" class="headerlink" title="四、活动选择问题"></a>四、活动选择问题</h2><p>假设有n个活动，这些互动要占用同一片场地，而场地在某时刻只能供一个活动使用。</p><p>每个活动都有一个开始时间si和结束时间fi（题目中时间以整数表示），表示活动在[si, fi)（左闭右开）区间占用场地。</p><p>问：安排哪些活动能够使该场地举办的活动个数最多？</p><p><img src="/static/imgs/algorithm/Greedy_Algorithm_activity.png"></p><ul><li>贪心结论：<strong>最先结束的活动一定是最优解的一部分</strong>。</li><li>假设a是所有活动中最先结束的活动，b是最优解中最先结束的活动。<ul><li>如果a&#x3D;b,结论成立</li><li>如果a不等b，则b的结束时间一定晚于a的结束时间，则此时用a替换掉最优解中的b，一定不与最优解中的其他活动时间重叠，因此替换后的解也是最优解。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">activities = [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">6</span>), (<span class="number">5</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">9</span>), (<span class="number">5</span>, <span class="number">9</span>), (<span class="number">6</span>, <span class="number">10</span>), (<span class="number">8</span>, <span class="number">11</span>), (<span class="number">8</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">14</span>), (<span class="number">12</span>, <span class="number">16</span>)]</span><br><span class="line">activities.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])  <span class="comment"># 以结束时间排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">activities_seletion</span>(<span class="params">a</span>):</span><br><span class="line">    res = [a[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> res[-<span class="number">1</span>][<span class="number">1</span>] &lt; a[i][<span class="number">0</span>]:</span><br><span class="line">            res.append(a[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;贪心算法&quot;&gt;&lt;a href=&quot;#贪心算法&quot; class=&quot;headerlink&quot; title=&quot;贪心算法&quot;&gt;&lt;/a&gt;贪心算法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="贪心算法" scheme="https://sqlsafe.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-树(Tree)</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-Tree/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91-Tree/</id>
    <published>2022-04-26T14:56:17.000Z</published>
    <updated>2022-04-26T15:07:46.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h1><p><strong>树（Tree）是一种抽象数据类型，或是实现这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。一般由N个有限节点组合，具有层次关系。</strong></p><p><img src="/static/imgs/algorithm/tree.png"></p><p><strong>树是一种可以递归定义的数据结构</strong></p><p><strong>树是由n个节点组成的集合：</strong></p><ul><li>如果n&#x3D;0，那么这是一颗空树；</li><li>如果n&gt;0，那存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一棵树。</li></ul><h3 id="树具有的特点"><a href="#树具有的特点" class="headerlink" title="树具有的特点"></a>树具有的特点</h3><ul><li>每个节点有零个或多个<strong>子节点</strong></li><li>没有父节点的节点称为<strong>根</strong></li><li>每个非根节点有且只有一个<strong>父节点</strong></li><li>除了根节点以外，每个子节点又可以分为多个不相交的子树</li></ul><h2 id="二叉树（Binary-tree）"><a href="#二叉树（Binary-tree）" class="headerlink" title="二叉树（Binary tree）"></a>二叉树（Binary tree）</h2><p><strong>二叉树是指树中节点的度不大于2(两颗子树)的有序树</strong></p><p>基于二叉树，又可分为<strong>满二叉树</strong>和<strong>完全二叉树</strong></p><ul><li><p>满二叉树</p><p> 一个二叉树，如果每一个层的结点树都达到最大值，则这个二叉树就是二叉树</p></li><li><p>完全二叉树</p><p>若设二叉树的深度为h，除第h层外，其他各层（1～（h-1）层）的节点树都达到最大个数，第h层所有的节点都连续集中在最左边，这就是完全二叉树</p></li></ul><p><img src="/static/imgs/algorithm/tree-1.png"></p><h3 id="二叉树的存储方法（表示方式）"><a href="#二叉树的存储方法（表示方式）" class="headerlink" title="二叉树的存储方法（表示方式）"></a>二叉树的存储方法（表示方式）</h3><ul><li><p><strong>链式存储方式</strong></p></li><li><p><strong>顺序存储方式</strong></p></li></ul><p><img src="/static/imgs/algorithm/Figure-A7-Binary-tree-data-generating-structure-Note-that-the-tree-data-structure-is.png"></p><p>子节点和父节点的关系</p><ul><li>父节点计算左子节点：<strong>2i+1</strong></li><li>父节点计算右子节点：<strong>2i+2</strong></li><li>子节点计算父节点下标：<strong>（i-1）&#x2F;&#x2F;2</strong></li></ul><h3 id="树的实例：模拟文件系统"><a href="#树的实例：模拟文件系统" class="headerlink" title="树的实例：模拟文件系统"></a>树的实例：模拟文件系统</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">type</span>=<span class="string">&#x27;dir&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="built_in">type</span></span><br><span class="line">        self.children = []</span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystemTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = Node(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        self.pwd = self.root</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name[-<span class="number">1</span>] != <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            name += <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        node = Node(name)</span><br><span class="line">        node.parent = self.pwd</span><br><span class="line">        self.pwd.children.append(node)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cd</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;..&#x27;</span>:</span><br><span class="line">            self.pwd = self.pwd.parent</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> name[-<span class="number">1</span>] != <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            name += <span class="string">&#x27;/&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> self.pwd.children:</span><br><span class="line">            <span class="keyword">if</span> child.name == name:</span><br><span class="line">                self.pwd = child</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;找不到目录...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ls</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.pwd.children</span><br></pre></td></tr></table></figure><h3 id="链表实现二叉树"><a href="#链表实现二叉树" class="headerlink" title="链表实现二叉树"></a>链表实现二叉树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self ,data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">E = BinaryTreeNode(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">A = BinaryTreeNode(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">G = BinaryTreeNode(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">C = BinaryTreeNode(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">F = BinaryTreeNode(<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">B = BinaryTreeNode(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">D = BinaryTreeNode(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">root = E</span><br><span class="line">E.lchild = A</span><br><span class="line">E.rchild = G</span><br><span class="line">A.rchild = C</span><br><span class="line">C.rchild = D</span><br><span class="line">C.lchild = B</span><br><span class="line">G.rchild = F</span><br></pre></td></tr></table></figure><h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历:"></a><strong>前序遍历:</strong></h4><p>首先访问根节点，然后遍历左子树，最后遍历右子树。</p><p><img src="/static/imgs/algorithm/pre_order_traversal.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pre_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="built_in">print</span>(root.data,end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        pre_order(root.lchild)</span><br><span class="line">        pre_order(root.rchild)</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a><strong>中序遍历</strong></h4><p>先遍历左子树，然后访问根节点，然后遍历右子树。</p><p><img src="/static/imgs/algorithm/in_order_traversal.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">in_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">       in_order(root.lchild)</span><br><span class="line">       <span class="built_in">print</span>(root.data, end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">       in_order(root.rchild)</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a><strong>后序遍历</strong></h4><p>是先遍历左子树，然后遍历右子树，最后访问树的根节点。</p><p><img src="/static/imgs/algorithm/post_order_traversal.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post_order</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        post_order(root.lchild)</span><br><span class="line">        post_order(root.rchild)</span><br><span class="line">        <span class="built_in">print</span>(root.data, end = <span class="string">&#x27;, &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a><strong>层次遍历</strong></h4><p>层序遍历就是逐层遍历树结构。</p><p><img src="/static/imgs/algorithm/level_order_traversal.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">level_order</span>(<span class="params">root</span>):</span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:   <span class="comment"># 只要队不空</span></span><br><span class="line">        node = queue.popleft()</span><br><span class="line">        <span class="built_in">print</span>(node.data, end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> node.lchild:</span><br><span class="line">            queue.append(node.lchild)</span><br><span class="line">        <span class="keyword">if</span> node.rchild:</span><br><span class="line">            queue.append(node.rchild)</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p><strong>二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。二叉搜索树作为一种经典的数据结构，它既有链表的快速插入与删除操作的特点，又有数组快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。</strong></p><p><img src="/static/imgs/algorithm/bst.png"></p><h3 id="二叉搜索树-–-插入"><a href="#二叉搜索树-–-插入" class="headerlink" title="二叉搜索树 – 插入"></a>二叉搜索树 – 插入</h3><p>二叉搜索树中的新节点总是添加到叶子位置。执行搜索可以轻松找到新节点的位置。</p><p><img src="/static/imgs/algorithm/bst_insert.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, node, val</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node: </span><br><span class="line">        node = TreeNode(val)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">elif</span> node.data &lt; val: </span><br><span class="line">        node.rchild = self.insert(node.rchild, val)</span><br><span class="line">        node.rchild.parent = node</span><br><span class="line">    <span class="keyword">elif</span> node.data &gt; val: </span><br><span class="line">        node.lchild = self.insert(node.lchild, val)</span><br><span class="line">        node.lchild.parent = node</span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树-–-查询"><a href="#二叉搜索树-–-查询" class="headerlink" title="二叉搜索树 – 查询"></a>二叉搜索树 – 查询</h3><ul><li>从树的根节点开始</li><li>如果值小于当前节点，左移</li><li>如果值大于当前节点，向右移动</li></ul><p><img src="/static/imgs/algorithm/bst_query.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, node, val</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node:    <span class="comment"># 判断空树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> node.data == val:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">elif</span> node.data &gt; val:</span><br><span class="line">        <span class="keyword">return</span> self.query(node.lchild, val)</span><br><span class="line">    <span class="keyword">elif</span> node.data &lt; val:</span><br><span class="line">        <span class="keyword">return</span> self.query(node.rchild, val)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="二叉搜索树-–-删除"><a href="#二叉搜索树-–-删除" class="headerlink" title="二叉搜索树 – 删除"></a>二叉搜索树 – 删除</h3><ul><li><p><strong>如果要删除的节点是叶子节点</strong></p><p> 操作方法：直接删除</p></li></ul><p><img src="/static/imgs/algorithm/bst_delete-01.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__remove_node_leaf</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="comment"># 情况1：node是叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.parent:  <span class="comment"># node为根节点</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> node.parent.lchild == node:  <span class="comment"># node是左孩子</span></span><br><span class="line">        node.parent.lchild = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># node是右孩子</span></span><br><span class="line">        node.parent.rchild = <span class="literal">None</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>如果要删除的节点只有一个孩子</strong></p><p> 操作方法：将此节点的父亲与孩子连接，然后删除该节点</p></li></ul><p>  <img src="/static/imgs/algorithm/bst_delete-02.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__remove_node_lchild</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="comment"># node只有一个左孩子</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.parent:  <span class="comment"># node是根节点</span></span><br><span class="line">        self.root = node.lchild</span><br><span class="line">    <span class="keyword">elif</span> node.parent.lchild == node:  <span class="comment"># node是左孩子</span></span><br><span class="line">        node.parent.lchild = node.lchild</span><br><span class="line">        node.lchile.parent = node.parent</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># node是右孩子</span></span><br><span class="line">        node.parent.rchild = node.lchild</span><br><span class="line">        node.lchile.parent = node.parent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__remove_node_rchild</span>(<span class="params">self, node</span>):</span><br><span class="line">    <span class="comment"># node只有一个右孩子</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node.parent:</span><br><span class="line">        self.root = node.rchild</span><br><span class="line">    <span class="keyword">elif</span> node == node.parent.lchild:</span><br><span class="line">        node.parent.lchild = node.rchild</span><br><span class="line">        node.rchild.parent = node.parent</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node.parent.rchild = node.rchild</span><br><span class="line">        node.rchild.parent = node.parent</span><br></pre></td></tr></table></figure><ul><li><p><strong>如果要删除的节点有两个孩子</strong></p><p> 操作方法：将其右子树最小节点删除，替换到当前节点</p></li></ul><p>  <img src="/static/imgs/algorithm/bst_delete-03.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, val</span>):</span><br><span class="line">    <span class="keyword">if</span> self.root:  <span class="comment"># 树不空</span></span><br><span class="line">        node = self.query_no_rec(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.lchild <span class="keyword">and</span> <span class="keyword">not</span> node.rchild:     <span class="comment"># node是根节点</span></span><br><span class="line">            self.__remove_node_leaf(node)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> node.rchild:       <span class="comment"># node只有一个左孩子</span></span><br><span class="line">            self.__remove_node_lchild(node)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> node.lchild:       <span class="comment"># node只有一个右孩子</span></span><br><span class="line">            self.__remove_node_rchild(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            min_node = node.rchild</span><br><span class="line">            <span class="keyword">while</span> min_node.lchild:     <span class="comment"># 拿到右子树中最小的节点</span></span><br><span class="line">                min_node = min_node.lchild</span><br><span class="line">            node.data = min_node.data   <span class="comment"># 将右子树最小节点覆盖当前node</span></span><br><span class="line">            <span class="keyword">if</span> min_node.rchild:     <span class="comment"># 只有右孩子</span></span><br><span class="line">                self.__remove_node_rchild(min_node)</span><br><span class="line">            <span class="keyword">else</span>:   <span class="comment"># 叶子节点</span></span><br><span class="line">                self.__remove_node_leaf(min_node)</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树的效率"><a href="#二叉搜索树的效率" class="headerlink" title="二叉搜索树的效率"></a>二叉搜索树的效率</h2><ul><li>平均情况下，二叉搜索树进行搜索的时间复杂度（O(lgn)）。</li><li>最坏情况下，二叉搜索树可能非常偏斜</li><li>解决方案：<ul><li>随机优化插入</li><li>AVL树</li></ul></li></ul><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><p><strong>AVL树是一颗自平衡的二叉搜索树。</strong></p><p>AVL树具有一下性质：</p><ul><li><strong>根的左右子树的高度之差的绝对值不能超过1</strong></li><li><strong>根的左右子树都是平衡二叉树</strong></li></ul><p><img src="/static/imgs/algorithm/avl_tree.png"></p><h3 id="AVL树-–插入"><a href="#AVL树-–插入" class="headerlink" title="AVL树 –插入"></a>AVL树 –插入</h3><ul><li>插入一个节点可能会破坏AVL树的平衡，可以通过旋转操作来进行修正。</li><li>插入一个节点后，只有从插入节点到根节点的路径上的节点的平衡可能被改变。我们需要找出第一个破坏了平衡条件的节点，称之为K。k的两颗子树的高度差2.</li><li>不平衡的出现可能有4中情况</li></ul><h4 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h4><p>不平衡是由于对K的右孩子的右子树插入导致的：左旋</p><p><img src="/static/imgs/algorithm/avl_left.png"></p><h4 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h4><p>不平衡是由于对K的左孩子的左子树插入导致的：右旋</p><p><img src="/static/imgs/algorithm/avl_right.png"></p><h4 id="右旋-gt-左旋"><a href="#右旋-gt-左旋" class="headerlink" title="右旋-&gt;左旋"></a>右旋-&gt;左旋</h4><p>不平衡是由对K的右孩子的左子树插入导致的</p><p><img src="/static/imgs/algorithm/avl_right_left.png"></p><h4 id="左旋-gt-右旋"><a href="#左旋-gt-右旋" class="headerlink" title="左旋-&gt;右旋"></a>左旋-&gt;右旋</h4><p>不平衡是由于对K的左孩子的右子树插入导致的</p><p><img src="/static/imgs/algorithm/avl_left_right.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树的概念&quot;&gt;&lt;a href=&quot;#树的概念&quot; class=&quot;headerlink&quot; title=&quot;树的概念&quot;&gt;&lt;/a&gt;树的概念&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;树（Tree）是一种抽象数据类型，或是实现这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。一</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="https://sqlsafe.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="二叉树" scheme="https://sqlsafe.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="Tree" scheme="https://sqlsafe.github.io/tags/Tree/"/>
    
    <category term="二叉搜索树" scheme="https://sqlsafe.github.io/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="AVL树" scheme="https://sqlsafe.github.io/tags/AVL%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-哈希表(HashTable)</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8-HashTable/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8-HashTable/</id>
    <published>2022-04-26T14:50:22.000Z</published>
    <updated>2022-04-26T14:55:34.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>哈希表(Hash Table，又为散列表)，是一种线性表的存储结构。哈希表由一个顺序表(数组)和一个哈希函数组成。哈希函数h(k)将元素k作为自变量，返回元素的存储下标。</p><ul><li>假设有一个长度为7的数组，哈希函数h(k)&#x3D;k%7。元素集合{14,22,3,5}的存储方式如下图</li></ul><p><img src="/static/imgs/algorithm/hashtable_01.png"> </p><h2 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h2><p>由于哈希表的大小是有限的，而要存储的值的总数量是无限的，因此对于任何哈希函数，都会出现两个不同元素映射到同一个位置上的情况，这种情况叫做哈希冲突。</p><ul><li>比如h(k)&#x3D;k%7, h(0)&#x3D;h(7)&#x3D;h(14)&#x3D;…</li></ul><p><img src="/static/imgs/algorithm/hashtable_02.png"></p><h2 id="解决哈希冲突"><a href="#解决哈希冲突" class="headerlink" title="解决哈希冲突"></a>解决哈希冲突</h2><h3 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h3><p><strong>开放寻址法：如果哈希函数返回的位置已经有值，则可以向后探查新的位置来存储这个值。</strong></p><ul><li>线性探查：如果位置i被占用，则探查i+1, i+2,……</li><li>二次探查：如果位置i被占用，则探查i+12,i-12,i+22,i-22,……</li><li>二度哈希：有n个哈希函数，当使用第1个哈希函数h1发生冲突时，则尝试使用h2,h3,……</li></ul><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><p>拉链法：哈希表每个位置都连接一个链表，当冲突发生时，冲突的元素将被加到该位置链表的最后</p><p><img src="/static/imgs/algorithm/hashtable_03.png"></p><h2 id="常见哈希函数"><a href="#常见哈希函数" class="headerlink" title="常见哈希函数"></a>常见哈希函数</h2><ul><li>除法哈希法：h(k) &#x3D; k%m</li><li>乘法哈希法：h(k) &#x3D; floor(m*(A*key%1))</li><li>全域哈希法：ha,b(k) &#x3D; ((a*key + b) % p) % m   a,b&#x3D;1,2,…,p-1</li></ul><h2 id="通过链表实现哈希表"><a href="#通过链表实现哈希表" class="headerlink" title="通过链表实现哈希表"></a>通过链表实现哈希表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item</span>):</span><br><span class="line">            self.item = item</span><br><span class="line">            self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LinkListIterator</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, node</span>):</span><br><span class="line">            self.node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">if</span> self.node:</span><br><span class="line">                cur_node = self.node</span><br><span class="line">                self.node = cur_node.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> cur_node.item</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iterable=<span class="literal">None</span></span>):</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> iterable:</span><br><span class="line">            self.extend(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, obj</span>):</span><br><span class="line">        s = LinkList.Node(obj)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            self.head = s</span><br><span class="line">            self.tail = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail.<span class="built_in">next</span> = s</span><br><span class="line">            self.tail = s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self, iterable</span>):</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> iterable:</span><br><span class="line">            self.append(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">if</span> n == obj:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, value</span>):</span><br><span class="line">        node = self.head</span><br><span class="line">        tmp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.item == value:</span><br><span class="line">                tmp.<span class="built_in">next</span> = node.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            tmp = node</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.LinkListIterator(self.head)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【&quot;</span> + <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, self)) + <span class="string">&quot;】&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">10</span></span>):</span><br><span class="line">        self.size = size</span><br><span class="line">        self.T = [LinkList() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.size)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">return</span> k % self.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, k</span>):</span><br><span class="line">        i = self.<span class="built_in">hash</span>(k)</span><br><span class="line">        <span class="keyword">if</span> self.find(k):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;重复插入&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.T[i].append(k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, k</span>):</span><br><span class="line">        i = self.<span class="built_in">hash</span>(k)</span><br><span class="line">        <span class="keyword">return</span> self.T[i].delete(k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, k</span>):</span><br><span class="line">        i = self.<span class="built_in">hash</span>(k)</span><br><span class="line">        <span class="keyword">return</span> self.T[i].find(k)</span><br></pre></td></tr></table></figure><h2 id="哈希表在Python中的应用"><a href="#哈希表在Python中的应用" class="headerlink" title="哈希表在Python中的应用"></a>哈希表在Python中的应用</h2><ul><li>Python字典与集合都是通过哈希表实现的</li><li>md5算法</li><li>SHA2算法</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哈希表&quot;&gt;&lt;a href=&quot;#哈希表&quot; class=&quot;headerlink&quot; title=&quot;哈希表&quot;&gt;&lt;/a&gt;哈希表&lt;/h1&gt;&lt;p&gt;哈希表(Hash Table，又为散列表)，是一种线性表的存储结构。哈希表由一个顺序表(数组)和一个哈希函数组成。哈希函数h(k)将</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="https://sqlsafe.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="Hash Table" scheme="https://sqlsafe.github.io/tags/Hash-Table/"/>
    
    <category term="散列表" scheme="https://sqlsafe.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-链表(linked_list)</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8-linked-list/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8-linked-list/</id>
    <published>2022-04-26T14:45:34.000Z</published>
    <updated>2022-04-26T14:49:22.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><strong>链表是由一系列节点组成的元素集合。每个节点包含两部分，数据域item和指向下一个节点的指针next。通过节点之间的互相连接，最终串联成一个链表。</strong></p><p><img src="/static/imgs/algorithm/linked_list.png"></p><h3 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h3><ul><li><strong>头插法</strong></li></ul><p><img src="/static/imgs/algorithm/linklist_head.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_linklist_head</span>(<span class="params">li</span>):</span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        node.<span class="built_in">next</span> = head</span><br><span class="line">        head = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><ul><li><strong>尾插法</strong></li></ul><p><img src="/static/imgs/algorithm/linked_list_tail.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_linklist_tail</span>(<span class="params">li</span>):</span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        tail.<span class="built_in">next</span> = node</span><br><span class="line">        tail = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="链表的插入和删除"><a href="#链表的插入和删除" class="headerlink" title="链表的插入和删除"></a>链表的插入和删除</h3><p><img src="/static/imgs/algorithm/linked_list_insert.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找到链表中值的对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_node</span>(<span class="params">lk, value</span>):</span><br><span class="line">    <span class="keyword">while</span> lk:</span><br><span class="line">        <span class="keyword">if</span> lk.item == value:</span><br><span class="line">            <span class="keyword">return</span> lk</span><br><span class="line">        lk = lk.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向链表中插入新的对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_node</span>(<span class="params">val_lk, node</span>):</span><br><span class="line">    node.<span class="built_in">next</span> = val_lk.<span class="built_in">next</span></span><br><span class="line">    val_lk.<span class="built_in">next</span> = node</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/static/imgs/algorithm/linked_list_delete.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除链表中的对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_node</span>(<span class="params">lk, value</span>):</span><br><span class="line">    tmp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> lk:</span><br><span class="line">        <span class="keyword">if</span> lk.item == value:</span><br><span class="line">            tmp.<span class="built_in">next</span> = lk.<span class="built_in">next</span></span><br><span class="line">        tmp = lk</span><br><span class="line">        lk = lk.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><strong>双链表的每个节点有两个指针：一个指向后一个节点，另一个指向前一个节点。</strong></p><p><img src="/static/imgs/algorithm/double_linked_list.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.prior = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_linked_list</span>(<span class="params">li</span>):</span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        node.prior = tail</span><br><span class="line">        tail.<span class="built_in">next</span> = node</span><br><span class="line">        tail = tail.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;链表是由一系列节点组成的元素集合。每个节点包含两部分，数据域item和指向下一个节点的指针next。通过节点之间的互相连接，</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="https://sqlsafe.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="双向链表" scheme="https://sqlsafe.github.io/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>栈和队列的应用--迷宫问题</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-26T14:41:10.000Z</published>
    <updated>2022-04-26T14:44:38.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈和队列的应用–迷宫问题"><a href="#栈和队列的应用–迷宫问题" class="headerlink" title="栈和队列的应用–迷宫问题"></a>栈和队列的应用–迷宫问题</h2><p><strong>给一个二维列表，表示迷宫(0表示通道，1表示围墙)。给出算法，求出一条走出迷宫的路径。</strong></p><p><img src="/static/imgs/algorithm/Labyrinth.png"></p><h3 id="栈–深度优先搜索"><a href="#栈–深度优先搜索" class="headerlink" title="栈–深度优先搜索"></a>栈–深度优先搜索</h3><ul><li>回溯法</li><li>思路：从一个节点开始，任意找下一个能走的点，当找不到能走的点时，退回上一个点寻找是否有其他方向的点。</li><li>使用栈存储当前路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">maze = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x+<span class="number">1</span>,y),    <span class="comment"># 向上走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x-<span class="number">1</span>,y),    <span class="comment"># 向下走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y-<span class="number">1</span>),    <span class="comment"># 向左走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y+<span class="number">1</span>)     <span class="comment"># 向右走</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># (x1, y1)代表起点；(x2, y2)代表终点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maze_path</span>(<span class="params">x1 ,y1 ,x2 ,y2</span>):</span><br><span class="line">    stack = [(x1,y1)]</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(stack)) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = stack[-<span class="number">1</span>] <span class="comment">#把当前节点存起来</span></span><br><span class="line">        <span class="comment"># 如果当前节点的x，y 等于 终点节点x，y说明已经到达终点</span></span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] ==y2:</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> stack:</span><br><span class="line">                <span class="built_in">print</span>(s)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">len</span>(stack))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>],curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="comment"># 如果下一个节点为0 说明可以走</span></span><br><span class="line">            <span class="keyword">if</span> maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                stack.append(nextNode)</span><br><span class="line">                maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span>  <span class="comment">#将走过的节点标识为2</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#当上下左右都走不通时，就往回走</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.pop() </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="队列–广度优先搜索"><a href="#队列–广度优先搜索" class="headerlink" title="队列–广度优先搜索"></a>队列–广度优先搜索</h3><ul><li>思路：从一个节点开始，寻找所有接下来能继续走的点，继续不断寻找，直到找到出口。</li><li>使用队列存储当前正在考虑的节点</li></ul><p><img src="/static/imgs/algorithm/deque_maze.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">maze = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x+<span class="number">1</span>,y),    <span class="comment"># 向上走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x-<span class="number">1</span>,y),    <span class="comment"># 向下走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y-<span class="number">1</span>),    <span class="comment"># 向左走</span></span><br><span class="line">    <span class="keyword">lambda</span> x,y: (x,y+<span class="number">1</span>)     <span class="comment"># 向右走</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_r</span>(<span class="params">path</span>):</span><br><span class="line">    curNode = path[-<span class="number">1</span>]</span><br><span class="line">    realpath = []</span><br><span class="line">    <span class="keyword">while</span> curNode[<span class="number">2</span>] != -<span class="number">1</span>:</span><br><span class="line">        realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        curNode = path[curNode[<span class="number">2</span>]]</span><br><span class="line">    realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">    realpath.reverse()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> realpath:</span><br><span class="line">        <span class="built_in">print</span>(node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deque_maze_path</span>(<span class="params">x1 ,y1 ,x2 ,y2</span>):</span><br><span class="line">    queue = deque()     <span class="comment"># 创建队列</span></span><br><span class="line">    queue.append((x1,y1,-<span class="number">1</span>))    <span class="comment"># 先把起点放到队列中</span></span><br><span class="line">    path = []   <span class="comment"># 存放走的坐标</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = queue.popleft()</span><br><span class="line">        path.append(curNode)</span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == x2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == y2:</span><br><span class="line">            print_r(path)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:     <span class="comment">#判断是否可以走</span></span><br><span class="line">                queue.append((nextNode[<span class="number">0</span>],nextNode[<span class="number">1</span>],<span class="built_in">len</span>(path)-<span class="number">1</span>))    <span class="comment">#将可以走的位置加入到队列中</span></span><br><span class="line">                maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span>  <span class="comment"># 将走过的位置改为2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没有路！&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;栈和队列的应用–迷宫问题&quot;&gt;&lt;a href=&quot;#栈和队列的应用–迷宫问题&quot; class=&quot;headerlink&quot; title=&quot;栈和队列的应用–迷宫问题&quot;&gt;&lt;/a&gt;栈和队列的应用–迷宫问题&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;给一个二维列表，表示迷宫(0表示通道，1表示</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Stack" scheme="https://sqlsafe.github.io/tags/Stack/"/>
    
    <category term="Queue" scheme="https://sqlsafe.github.io/tags/Queue/"/>
    
    <category term="迷宫问题" scheme="https://sqlsafe.github.io/tags/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-队列(Queue)</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97-Queue/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97-Queue/</id>
    <published>2022-04-26T14:33:34.000Z</published>
    <updated>2022-04-26T14:39:27.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h1><p><strong>队列是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除。</strong></p><p><img src="/static/imgs/algorithm/queue.png"></p><ul><li>进行插入的一端称为队尾(rear)，插入动作称为进队或入队</li><li>进行删除的一端称为对头(front)，删除动作称为出队</li><li>队列的性质：先进先出(First-in，First-out)</li></ul><h2 id="队列的实现方式"><a href="#队列的实现方式" class="headerlink" title="队列的实现方式"></a>队列的实现方式</h2><h3 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a>环形队列</h3><p><img src="/static/imgs/algorithm/ring_queue.png"></p><p><strong>环形队列：当队尾指针front &#x3D;&#x3D; Maxsize+1时，再前进一个位置自动到0.</strong></p><ul><li>队首指针前进1：front &#x3D; (front + 1)%MaxSize</li><li>队尾指针前进1：rear &#x3D; (rear + 1)%MaxSize</li><li>队空条件：rear &#x3D;&#x3D; front</li><li>队满条件：(rear + 1)%MaxSize &#x3D;&#x3D; front</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">100</span></span>):</span><br><span class="line">        <span class="comment"># 创建一个队列</span></span><br><span class="line">        self.queue = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">        self.size = size</span><br><span class="line">        self.front = <span class="number">0</span>  <span class="comment">#队首指针</span></span><br><span class="line">        self.rear = <span class="number">0</span>   <span class="comment">#队尾指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向队列中插入数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="comment"># 是否为满队列</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_filled():</span><br><span class="line">            self.rear = (self.rear + <span class="number">1</span>) % self.size</span><br><span class="line">            self.queue[self.rear] = element</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Queue is filled.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除队列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 是否为空队列</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            self.front = (self.front + <span class="number">1</span>) % self.size</span><br><span class="line">            <span class="keyword">return</span> self.queue[self.front]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Queue is empty.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否空队列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.rear == self.front</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否满队列</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_filled</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.front == (self.rear + <span class="number">1</span>) % self.size</span><br></pre></td></tr></table></figure><h3 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h3><p><strong>双向队列的两端都支持进队和出队操作</strong></p><h4 id="Python队列内置模块"><a href="#Python队列内置模块" class="headerlink" title="Python队列内置模块"></a>Python队列内置模块</h4><p>使用方法：from collections import deque </p><p><strong>双向队列的基本操作：</strong></p><ul><li>队首进队   append()</li><li>队首出队   popleft()</li><li>队尾进队   applendleft()</li><li>队尾出队   pop()</li></ul><h4 id="使用deque实现读取文件后n行"><a href="#使用deque实现读取文件后n行" class="headerlink" title="使用deque实现读取文件后n行"></a>使用deque实现读取文件后n行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tail</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tail.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        q = deque(f,n)</span><br><span class="line">        <span class="keyword">return</span> q</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> tail(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(line,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;队列-Queue&quot;&gt;&lt;a href=&quot;#队列-Queue&quot; class=&quot;headerlink&quot; title=&quot;队列(Queue)&quot;&gt;&lt;/a&gt;队列(Queue)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;队列是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除。&lt;/st</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="环形队列" scheme="https://sqlsafe.github.io/tags/%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/"/>
    
    <category term="双向队列" scheme="https://sqlsafe.github.io/tags/%E5%8F%8C%E5%90%91%E9%98%9F%E5%88%97/"/>
    
    <category term="Queue" scheme="https://sqlsafe.github.io/tags/Queue/"/>
    
    <category term="deque" scheme="https://sqlsafe.github.io/tags/deque/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-栈(Stack)</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88-Stack/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88-Stack/</id>
    <published>2022-04-26T14:27:58.000Z</published>
    <updated>2022-04-26T14:32:51.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><p><strong>栈是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。</strong></p><p><strong>栈的特点：后进先出LIFO(last-in,first-out)</strong></p><p><strong>栈的概念：栈顶、栈底</strong></p><h4 id="栈额基本操作："><a href="#栈额基本操作：" class="headerlink" title="栈额基本操作："></a>栈额基本操作：</h4><ul><li>进栈：push</li><li>出栈：pop</li><li>取栈顶：gettop</li></ul><h2 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h2><p><strong>使用一般的列表结构即可实现栈</strong></p><p><img src="/static/imgs/algorithm/stack.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, element</span>):</span><br><span class="line">        self.stack.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="栈的应用–括号匹配问题"><a href="#栈的应用–括号匹配问题" class="headerlink" title="栈的应用–括号匹配问题"></a>栈的应用–括号匹配问题</h2><p><strong>括号匹配问题：给一个字符串，其中包含小括号、中括号、大括号，求该字符串的括号是否匹配。</strong></p><p>例如：</p><ul><li>()()[]{}  匹配</li><li>([{])     不匹配</li><li>([{}])    匹配</li><li>]         不匹配</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,element</span>):</span><br><span class="line">        self.stack.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gettop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brackets_match</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    brackets = &#123;<span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;]&#x27;</span>:<span class="string">&quot;[&quot;</span>, <span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>&#125;</span><br><span class="line">    stack = Stack()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        <span class="comment"># 查看ch是否存在&#x27;(&#x27;,&#x27;[&#x27;,&#x27;&#123;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> &#123;<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>&#125;:</span><br><span class="line">            stack.push(ch)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> stack.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 拿栈顶和当前值比较</span></span><br><span class="line">            <span class="keyword">elif</span> stack.gettop() == brackets[ch]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:   <span class="comment">#if stack.pop() != brackets[ch]</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 如果列表为空返回true</span></span><br><span class="line">    <span class="keyword">if</span> stack.is_empty():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;栈-Stack&quot;&gt;&lt;a href=&quot;#栈-Stack&quot; class=&quot;headerlink&quot; title=&quot;栈(Stack)&quot;&gt;&lt;/a&gt;栈(Stack)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;栈是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。&lt;/strong</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈" scheme="https://sqlsafe.github.io/tags/%E6%A0%88/"/>
    
    <category term="Stack" scheme="https://sqlsafe.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>排序算法-其他排序</title>
    <link href="https://sqlsafe.github.io/2022/04/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%85%B6%E4%BB%96%E6%8E%92%E5%BA%8F/"/>
    <id>https://sqlsafe.github.io/2022/04/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%85%B6%E4%BB%96%E6%8E%92%E5%BA%8F/</id>
    <published>2022-04-26T14:10:07.000Z</published>
    <updated>2022-04-26T14:26:46.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><strong>希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。</strong></p><p><strong>希尔排序的基本思想是</strong>：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”<strong>基本有序</strong>“时，再对全体记录进行依次直接插入排序。</p><p><img src="/static/imgs/algorithm/shell_sort.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> cal_time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort_gap</span>(<span class="params">li ,gap</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,<span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - gap</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j+gap] = li[j]</span><br><span class="line">            j -= gap</span><br><span class="line">        li[j+gap] = tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell_sort</span>(<span class="params">li</span>):</span><br><span class="line">    d =<span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insertion_sort_gap(li,d)</span><br><span class="line">        d //= <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p><strong>计数排序是一个非基于比较的排序算法，该算法于1954年由 Harold H. Seward 提出。它的优势在于在对一定范围内的整数排序时，它的复杂度为Ο(n+k)（其中k是整数的范围），快于任何比较排序算法。 [1]  当然这是一种牺牲空间换取时间的做法，而且当O(k)&gt;O(n<em>log(n))的时候其效率反而不如基于比较的排序（基于比较的排序的时间复杂度在理论上的下限是O(n</em>log(n)), 如归并排序，堆排序）</strong></p><p><img src="/static/imgs/algorithm/count_sort.jpeg"></p><h4 id="对列表进行排序，已知列表中的数范围都在0-100之间；设计时间复杂度为o-n-的算法。"><a href="#对列表进行排序，已知列表中的数范围都在0-100之间；设计时间复杂度为o-n-的算法。" class="headerlink" title="对列表进行排序，已知列表中的数范围都在0-100之间；设计时间复杂度为o(n)的算法。"></a>对列表进行排序，已知列表中的数范围都在0-100之间；设计时间复杂度为o(n)的算法。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_sort</span>(<span class="params">li,max_count=<span class="number">100</span></span>):</span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_count+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count[val] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> i ,val <span class="keyword">in</span> <span class="built_in">enumerate</span> (count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(i)</span><br></pre></td></tr></table></figure><h2 id="桶排序（Bucket-Sort）"><a href="#桶排序（Bucket-Sort）" class="headerlink" title="桶排序（Bucket Sort）"></a>桶排序（Bucket Sort）</h2><p><strong>桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。当要被排序的数组内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。</strong></p><p><img src="/static/imgs/algorithm/bucket_sort.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bucket_sort</span>(<span class="params">li ,n=<span class="number">100</span> ,max_num=<span class="number">10000</span></span>):</span><br><span class="line">    buckets=[[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment">#创建桶</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">        i = <span class="built_in">min</span>(var//(max_num//n),n-<span class="number">1</span>)</span><br><span class="line">        buckets[i].append(var) <span class="comment">#往对应的桶添加数据</span></span><br><span class="line">        <span class="comment"># 保持桶里的顺序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i])-<span class="number">1</span> ,<span class="number">0</span> ,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="number">1</span>]:</span><br><span class="line">                buckets[i][j-<span class="number">1</span>],buckets[i][j] = buckets[i][j],buckets[i][j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    sort_li = []</span><br><span class="line">    <span class="comment"># 将所有桶放到sort_li 列表</span></span><br><span class="line">    <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">        sort_li.extend(buc) <span class="comment">#将这个列表数据添加到sort_li列表中</span></span><br><span class="line">    <span class="keyword">return</span> sort_li</span><br></pre></td></tr></table></figure><h2 id="基数排序-Radix-sort"><a href="#基数排序-Radix-sort" class="headerlink" title="基数排序(Radix sort)"></a>基数排序(Radix sort)</h2><p><strong>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</strong></p><p>它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p><p>基数排序的方式可以采用LSD（Least significant digital）或MSD（Most significant digital），LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。</p><p><img src="/static/imgs/algorithm/radix_sort.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">radix_sort</span>(<span class="params">li</span>):</span><br><span class="line">    max_num = <span class="built_in">max</span>(li)</span><br><span class="line">    it =<span class="number">0</span></span><br><span class="line">    <span class="comment"># 10的it次方</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">10</span> ** it &lt;= max_num:</span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        <span class="comment"># 1、把对应的数据放到对应的桶</span></span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">            <span class="comment"># max_num = 974；取十位，it=1，974//10 --&gt; 97 % 10 --&gt;7</span></span><br><span class="line">            digit = (var//<span class="number">10</span> ** it) % <span class="number">10</span></span><br><span class="line">            buckets[digit].append(var)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2、将原来的li列表清空</span></span><br><span class="line">        li.clear()</span><br><span class="line">        <span class="comment"># 3、将新的列表放回li列表</span></span><br><span class="line">        <span class="keyword">for</span> buc <span class="keyword">in</span> buckets:</span><br><span class="line">            li.extend(buc)</span><br><span class="line">        it += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="查找排序练习"><a href="#查找排序练习" class="headerlink" title="查找排序练习"></a>查找排序练习</h2><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></h3><p><strong>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</strong></p><p><strong>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</strong></p><p><strong>你可以按任意顺序返回答案。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">two_Sum</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        li =[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[j]+nums[i] == target:</span><br><span class="line">                    li.append(j)</span><br><span class="line">                    li.append(i)</span><br><span class="line">                    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Incre</summary>
      
    
    
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://sqlsafe.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://sqlsafe.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://sqlsafe.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="希尔排序" scheme="https://sqlsafe.github.io/tags/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    
    <category term="计数排序" scheme="https://sqlsafe.github.io/tags/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
    <category term="基数排序" scheme="https://sqlsafe.github.io/tags/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
    <category term="桶排序" scheme="https://sqlsafe.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
